
TugasAkhir.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  000041b4  00004248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000037e  0080213e  0080213e  00004386  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004386  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005a8  00000000  00000000  000043e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ee67  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002b25  00000000  00000000  000137f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a7e9  00000000  00000000  0001631c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000126c  00000000  00000000  00020b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00032c1c  00000000  00000000  00021d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006ff1  00000000  00000000  00054990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f8  00000000  00000000  0005b981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003edf  00000000  00000000  0005c179  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__vector_14>
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_39>
      a0:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_40>
      a4:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_41>
      a8:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_71>
     120:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__vector_72>
     124:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_73>
     128:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_74>
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__trampolines_end+0x21e>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__trampolines_end+0x24e>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	11 e2       	ldi	r17, 0x21	; 33
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e4 eb       	ldi	r30, 0xB4	; 180
     4a6:	f1 e4       	ldi	r31, 0x41	; 65
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 33       	cpi	r26, 0x3E	; 62
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	24 e2       	ldi	r18, 0x24	; 36
     4ba:	ae e3       	ldi	r26, 0x3E	; 62
     4bc:	b1 e2       	ldi	r27, 0x21	; 33
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ac 3b       	cpi	r26, 0xBC	; 188
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <main>
     4cc:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     4d2:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     4d6:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     4da:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2    
     4de:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2   
     4e2:	60 93 a1 06 	sts	0x06A1, r22
    ret
     4e6:	08 95       	ret

000004e8 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     4e8:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     4ea:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     4ee:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     4f2:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2 
     4f6:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     4fa:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     4fc:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     500:	84 23       	and	r24, r20
    ret
     502:	08 95       	ret

00000504 <_1101010110_>:

GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     504:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     508:	80 93 a1 06 	sts	0x06A1, r24
    ret
     50c:	08 95       	ret

0000050e <burst_1_1_10_0_1>:
     50e:	a1 e0       	ldi	r26, 0x01	; 1
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	ed e8       	ldi	r30, 0x8D	; 141
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__prologue_saves__+0xc>
     51a:	e8 2f       	mov	r30, r24
     51c:	0f b7       	in	r16, 0x3f	; 63
     51e:	00 78       	andi	r16, 0x80	; 128
     520:	19 82       	std	Y+1, r1	; 0x01
     522:	80 91 3f 21 	lds	r24, 0x213F
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	19 f0       	breq	.+6      	; 0x530 <burst_1_1_10_0_1+0x22>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 3f 21 	sts	0x213F, r24
     530:	ce 2e       	mov	r12, r30
     532:	dd 24       	eor	r13, r13
     534:	f6 01       	movw	r30, r12
     536:	ef 57       	subi	r30, 0x7F	; 127
     538:	fe 4d       	sbci	r31, 0xDE	; 222
     53a:	b0 80       	ld	r11, Z
     53c:	f6 01       	movw	r30, r12
     53e:	eb 57       	subi	r30, 0x7B	; 123
     540:	fe 4d       	sbci	r31, 0xDE	; 222
     542:	a0 80       	ld	r10, Z
     544:	f8 94       	cli
     546:	bb 20       	and	r11, r11
     548:	09 f4       	brne	.+2      	; 0x54c <burst_1_1_10_0_1+0x3e>
     54a:	aa c0       	rjmp	.+340    	; 0x6a0 <burst_1_1_10_0_1+0x192>
     54c:	8b 2d       	mov	r24, r11
     54e:	da df       	rcall	.-76     	; 0x504 <_1101010110_>
     550:	8b 2d       	mov	r24, r11
     552:	6a 2d       	mov	r22, r10
     554:	be df       	rcall	.-132    	; 0x4d2 <_1101010101_>
     556:	1b 2d       	mov	r17, r11
     558:	ee 24       	eor	r14, r14
     55a:	ff 24       	eor	r15, r15
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	81 2c       	mov	r8, r1
     560:	30 e2       	ldi	r19, 0x20	; 32
     562:	93 2e       	mov	r9, r19
     564:	f5 fe       	sbrs	r15, 5
     566:	07 c0       	rjmp	.+14     	; 0x576 <burst_1_1_10_0_1+0x68>
     568:	90 91 82 21 	lds	r25, 0x2182
     56c:	80 91 81 21 	lds	r24, 0x2181
     570:	98 2b       	or	r25, r24
     572:	19 f5       	brne	.+70     	; 0x5ba <burst_1_1_10_0_1+0xac>
     574:	35 c0       	rjmp	.+106    	; 0x5e0 <burst_1_1_10_0_1+0xd2>
     576:	8f b7       	in	r24, 0x3f	; 63
     578:	80 2b       	or	r24, r16
     57a:	8f bf       	out	0x3f, r24	; 63
     57c:	00 00       	nop
     57e:	f8 94       	cli
     580:	8b 2d       	mov	r24, r11
     582:	6a 2d       	mov	r22, r10
     584:	41 2f       	mov	r20, r17
     586:	b0 df       	rcall	.-160    	; 0x4e8 <_1101010111_>
     588:	68 2f       	mov	r22, r24
     58a:	08 94       	sec
     58c:	e1 1c       	adc	r14, r1
     58e:	f1 1c       	adc	r15, r1
     590:	80 91 00 20 	lds	r24, 0x2000
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 00 20 	sts	0x2000, r24
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	30 f0       	brcs	.+12     	; 0x5aa <burst_1_1_10_0_1+0x9c>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	21 f0       	breq	.+8      	; 0x5aa <burst_1_1_10_0_1+0x9c>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	11 f0       	breq	.+4      	; 0x5aa <burst_1_1_10_0_1+0x9c>
     5a6:	10 92 00 20 	sts	0x2000, r1
     5aa:	66 23       	and	r22, r22
     5ac:	d9 f2       	breq	.-74     	; 0x564 <burst_1_1_10_0_1+0x56>
     5ae:	20 91 82 21 	lds	r18, 0x2182
     5b2:	80 91 81 21 	lds	r24, 0x2181
     5b6:	28 2b       	or	r18, r24
     5b8:	15 c0       	rjmp	.+42     	; 0x5e4 <burst_1_1_10_0_1+0xd6>
     5ba:	41 2f       	mov	r20, r17
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	40 ff       	sbrs	r20, 0
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <burst_1_1_10_0_1+0xc6>
     5c2:	e8 2f       	mov	r30, r24
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e6 5b       	subi	r30, 0xB6	; 182
     5cc:	fe 4d       	sbci	r31, 0xDE	; 222
     5ce:	80 82       	st	Z, r8
     5d0:	91 82       	std	Z+1, r9	; 0x01
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <burst_1_1_10_0_1+0xc8>
     5d4:	90 fd       	sbrc	r25, 0
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	96 95       	lsr	r25
     5da:	46 95       	lsr	r20
     5dc:	99 23       	and	r25, r25
     5de:	79 f7       	brne	.-34     	; 0x5be <burst_1_1_10_0_1+0xb0>
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	80 2b       	or	r24, r16
     5e8:	8f bf       	out	0x3f, r24	; 63
     5ea:	10 92 40 21 	sts	0x2140, r1
     5ee:	22 23       	and	r18, r18
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <burst_1_1_10_0_1+0xe6>
     5f2:	3f c0       	rjmp	.+126    	; 0x672 <burst_1_1_10_0_1+0x164>
     5f4:	11 23       	and	r17, r17
     5f6:	09 f4       	brne	.+2      	; 0x5fa <burst_1_1_10_0_1+0xec>
     5f8:	3c c0       	rjmp	.+120    	; 0x672 <burst_1_1_10_0_1+0x164>
     5fa:	30 91 86 21 	lds	r19, 0x2186
     5fe:	80 91 85 21 	lds	r24, 0x2185
     602:	38 2b       	or	r19, r24
     604:	56 2f       	mov	r21, r22
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	23 c0       	rjmp	.+70     	; 0x656 <burst_1_1_10_0_1+0x148>
     610:	50 fd       	sbrc	r21, 0
     612:	17 c0       	rjmp	.+46     	; 0x642 <burst_1_1_10_0_1+0x134>
     614:	19 c0       	rjmp	.+50     	; 0x648 <burst_1_1_10_0_1+0x13a>
     616:	30 ff       	sbrs	r19, 0
     618:	13 c0       	rjmp	.+38     	; 0x640 <burst_1_1_10_0_1+0x132>
     61a:	98 17       	cp	r25, r24
     61c:	81 f4       	brne	.+32     	; 0x63e <burst_1_1_10_0_1+0x130>
     61e:	e4 2f       	mov	r30, r20
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e6 5b       	subi	r30, 0xB6	; 182
     628:	fe 4d       	sbci	r31, 0xDE	; 222
     62a:	e0 82       	st	Z, r14
     62c:	f1 82       	std	Z+1, r15	; 0x01
     62e:	85 2f       	mov	r24, r21
     630:	8e 7f       	andi	r24, 0xFE	; 254
     632:	19 f4       	brne	.+6      	; 0x63a <burst_1_1_10_0_1+0x12c>
     634:	89 2f       	mov	r24, r25
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	08 c0       	rjmp	.+16     	; 0x64a <burst_1_1_10_0_1+0x13c>
     63a:	89 2f       	mov	r24, r25
     63c:	06 c0       	rjmp	.+12     	; 0x64a <burst_1_1_10_0_1+0x13c>
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	36 95       	lsr	r19
     642:	33 23       	and	r19, r19
     644:	41 f7       	brne	.-48     	; 0x616 <burst_1_1_10_0_1+0x108>
     646:	01 c0       	rjmp	.+2      	; 0x64a <burst_1_1_10_0_1+0x13c>
     648:	20 fd       	sbrc	r18, 0
     64a:	9f 5f       	subi	r25, 0xFF	; 255
     64c:	20 fd       	sbrc	r18, 0
     64e:	4f 5f       	subi	r20, 0xFF	; 255
     650:	56 95       	lsr	r21
     652:	26 95       	lsr	r18
     654:	11 f0       	breq	.+4      	; 0x65a <burst_1_1_10_0_1+0x14c>
     656:	55 23       	and	r21, r21
     658:	d9 f6       	brne	.-74     	; 0x610 <burst_1_1_10_0_1+0x102>
     65a:	40 93 40 21 	sts	0x2140, r20
     65e:	60 95       	com	r22
     660:	16 23       	and	r17, r22
     662:	71 30       	cpi	r23, 0x01	; 1
     664:	21 f4       	brne	.+8      	; 0x66e <burst_1_1_10_0_1+0x160>
     666:	11 23       	and	r17, r17
     668:	11 f4       	brne	.+4      	; 0x66e <burst_1_1_10_0_1+0x160>
     66a:	ee 24       	eor	r14, r14
     66c:	ff 24       	eor	r15, r15
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	13 c0       	rjmp	.+38     	; 0x698 <burst_1_1_10_0_1+0x18a>
     672:	80 91 82 21 	lds	r24, 0x2182
     676:	90 91 81 21 	lds	r25, 0x2181
     67a:	89 2b       	or	r24, r25
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	06 c0       	rjmp	.+12     	; 0x68e <burst_1_1_10_0_1+0x180>
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	80 fd       	sbrc	r24, 0
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	86 95       	lsr	r24
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	88 23       	and	r24, r24
     692:	b9 f7       	brne	.-18     	; 0x682 <burst_1_1_10_0_1+0x174>
     694:	90 93 40 21 	sts	0x2140, r25
     698:	f8 94       	cli
     69a:	11 23       	and	r17, r17
     69c:	09 f0       	breq	.+2      	; 0x6a0 <burst_1_1_10_0_1+0x192>
     69e:	62 cf       	rjmp	.-316    	; 0x564 <burst_1_1_10_0_1+0x56>
     6a0:	81 e8       	ldi	r24, 0x81	; 129
     6a2:	91 e2       	ldi	r25, 0x21	; 33
     6a4:	c8 0e       	add	r12, r24
     6a6:	d9 1e       	adc	r13, r25
     6a8:	f6 01       	movw	r30, r12
     6aa:	80 81       	ld	r24, Z
     6ac:	2b df       	rcall	.-426    	; 0x504 <_1101010110_>
     6ae:	10 92 3e 21 	sts	0x213E, r1
     6b2:	8f b7       	in	r24, 0x3f	; 63
     6b4:	08 2b       	or	r16, r24
     6b6:	0f bf       	out	0x3f, r16	; 63
     6b8:	21 96       	adiw	r28, 0x01	; 1
     6ba:	ec e0       	ldi	r30, 0x0C	; 12
     6bc:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__epilogue_restores__+0xc>

000006c0 <qt_get_library_sig>:
     6c0:	fc 01       	movw	r30, r24
     6c2:	80 e2       	ldi	r24, 0x20	; 32
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	80 83       	st	Z, r24
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	12 82       	std	Z+2, r1	; 0x02
     6cc:	13 82       	std	Z+3, r1	; 0x03
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	84 83       	std	Z+4, r24	; 0x04
     6d4:	95 83       	std	Z+5, r25	; 0x05
     6d6:	08 95       	ret

000006d8 <qt_enable_key>:
     6d8:	90 91 7b 21 	lds	r25, 0x217B
     6dc:	a9 2f       	mov	r26, r25
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	fd 01       	movw	r30, r26
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ea 0f       	add	r30, r26
     6e8:	fb 1f       	adc	r31, r27
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	ed 59       	subi	r30, 0x9D	; 157
     6f0:	fe 4d       	sbci	r31, 0xDE	; 222
     6f2:	43 83       	std	Z+3, r20	; 0x03
     6f4:	67 70       	andi	r22, 0x07	; 7
     6f6:	85 83       	std	Z+5, r24	; 0x05
     6f8:	23 70       	andi	r18, 0x03	; 3
     6fa:	66 0f       	add	r22, r22
     6fc:	66 0f       	add	r22, r22
     6fe:	66 0f       	add	r22, r22
     700:	26 2b       	or	r18, r22
     702:	24 83       	std	Z+4, r18	; 0x04
     704:	9f 5f       	subi	r25, 0xFF	; 255
     706:	90 93 7b 21 	sts	0x217B, r25
     70a:	08 95       	ret

0000070c <qt_get_sensor_delta>:
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	28 2f       	mov	r18, r24
     714:	c8 2f       	mov	r28, r24
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	fe 01       	movw	r30, r28
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ed 59       	subi	r30, 0x9D	; 157
     728:	fe 4d       	sbci	r31, 0xDE	; 222
     72a:	35 81       	ldd	r19, Z+5	; 0x05
     72c:	83 81       	ldd	r24, Z+3	; 0x03
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	00 90 43 21 	lds	r0, 0x2143
     734:	02 c0       	rjmp	.+4      	; 0x73a <qt_get_sensor_delta+0x2e>
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <qt_get_sensor_delta+0x2a>
     73e:	18 2f       	mov	r17, r24
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	08 f4       	brcc	.+2      	; 0x746 <qt_get_sensor_delta+0x3a>
     744:	14 e0       	ldi	r17, 0x04	; 4
     746:	80 91 7b 21 	lds	r24, 0x217B
     74a:	28 17       	cp	r18, r24
     74c:	18 f0       	brcs	.+6      	; 0x754 <qt_get_sensor_delta+0x48>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	2d c0       	rjmp	.+90     	; 0x7ae <qt_get_sensor_delta+0xa2>
     754:	83 2f       	mov	r24, r19
     756:	1d d1       	rcall	.+570    	; 0x992 <get_channel_delta>
     758:	9c 01       	movw	r18, r24
     75a:	41 2f       	mov	r20, r17
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	16 95       	lsr	r17
     760:	16 95       	lsr	r17
     762:	81 2f       	mov	r24, r17
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	84 1b       	sub	r24, r20
     768:	95 0b       	sbc	r25, r21
     76a:	82 17       	cp	r24, r18
     76c:	93 07       	cpc	r25, r19
     76e:	64 f4       	brge	.+24     	; 0x788 <qt_get_sensor_delta+0x7c>
     770:	fe 01       	movw	r30, r28
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ed 59       	subi	r30, 0x9D	; 157
     780:	fe 4d       	sbci	r31, 0xDE	; 222
     782:	84 81       	ldd	r24, Z+4	; 0x04
     784:	8b 7f       	andi	r24, 0xFB	; 251
     786:	84 83       	std	Z+4, r24	; 0x04
     788:	88 27       	eor	r24, r24
     78a:	99 27       	eor	r25, r25
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	82 17       	cp	r24, r18
     792:	93 07       	cpc	r25, r19
     794:	64 f0       	brlt	.+24     	; 0x7ae <qt_get_sensor_delta+0xa2>
     796:	fe 01       	movw	r30, r28
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ec 0f       	add	r30, r28
     79e:	fd 1f       	adc	r31, r29
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	ed 59       	subi	r30, 0x9D	; 157
     7a6:	fe 4d       	sbci	r31, 0xDE	; 222
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	84 60       	ori	r24, 0x04	; 4
     7ac:	84 83       	std	Z+4, r24	; 0x04
     7ae:	c9 01       	movw	r24, r18
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <qt_measure_sensors>:
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	10 92 5b 21 	sts	0x215B, r1
     7c6:	10 92 5c 21 	sts	0x215C, r1
     7ca:	20 91 5f 21 	lds	r18, 0x215F
     7ce:	30 91 60 21 	lds	r19, 0x2160
     7d2:	80 93 5f 21 	sts	0x215F, r24
     7d6:	90 93 60 21 	sts	0x2160, r25
     7da:	40 91 61 21 	lds	r20, 0x2161
     7de:	50 91 62 21 	lds	r21, 0x2162
     7e2:	42 1b       	sub	r20, r18
     7e4:	53 0b       	sbc	r21, r19
     7e6:	48 0f       	add	r20, r24
     7e8:	59 1f       	adc	r21, r25
     7ea:	ff 24       	eor	r15, r15
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <qt_measure_sensors+0x3c>
     7ee:	f3 94       	inc	r15
     7f0:	48 5c       	subi	r20, 0xC8	; 200
     7f2:	50 40       	sbci	r21, 0x00	; 0
     7f4:	48 3c       	cpi	r20, 0xC8	; 200
     7f6:	51 05       	cpc	r21, r1
     7f8:	d0 f7       	brcc	.-12     	; 0x7ee <qt_measure_sensors+0x36>
     7fa:	40 93 61 21 	sts	0x2161, r20
     7fe:	50 93 62 21 	sts	0x2162, r21
     802:	80 91 7c 21 	lds	r24, 0x217C
     806:	88 23       	and	r24, r24
     808:	41 f0       	breq	.+16     	; 0x81a <qt_measure_sensors+0x62>
     80a:	8f 15       	cp	r24, r15
     80c:	18 f4       	brcc	.+6      	; 0x814 <qt_measure_sensors+0x5c>
     80e:	10 92 7c 21 	sts	0x217C, r1
     812:	03 c0       	rjmp	.+6      	; 0x81a <qt_measure_sensors+0x62>
     814:	8f 19       	sub	r24, r15
     816:	80 93 7c 21 	sts	0x217C, r24
     81a:	c3 d3       	rcall	.+1926   	; 0xfa2 <burst>
     81c:	e0 91 5d 21 	lds	r30, 0x215D
     820:	f0 91 5e 21 	lds	r31, 0x215E
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	09 f0       	breq	.+2      	; 0x82a <qt_measure_sensors+0x72>
     828:	19 95       	eicall
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	05 c0       	rjmp	.+10     	; 0x83a <qt_measure_sensors+0x82>
     830:	81 2f       	mov	r24, r17
     832:	6f 2d       	mov	r22, r15
     834:	c3 d0       	rcall	.+390    	; 0x9bc <process_sensor>
     836:	08 2b       	or	r16, r24
     838:	1f 5f       	subi	r17, 0xFF	; 255
     83a:	60 91 7b 21 	lds	r22, 0x217B
     83e:	16 17       	cp	r17, r22
     840:	b8 f3       	brcs	.-18     	; 0x830 <qt_measure_sensors+0x78>
     842:	00 23       	and	r16, r16
     844:	49 f0       	breq	.+18     	; 0x858 <qt_measure_sensors+0xa0>
     846:	80 91 5b 21 	lds	r24, 0x215B
     84a:	90 91 5c 21 	lds	r25, 0x215C
     84e:	91 60       	ori	r25, 0x01	; 1
     850:	80 93 5b 21 	sts	0x215B, r24
     854:	90 93 5c 21 	sts	0x215C, r25
     858:	10 92 5a 21 	sts	0x215A, r1
     85c:	a3 e6       	ldi	r26, 0x63	; 99
     85e:	b1 e2       	ldi	r27, 0x21	; 33
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	17 c0       	rjmp	.+46     	; 0x896 <qt_measure_sensors+0xde>
     868:	8c 91       	ld	r24, X
     86a:	88 71       	andi	r24, 0x18	; 24
     86c:	91 f0       	breq	.+36     	; 0x892 <qt_measure_sensors+0xda>
     86e:	e3 2f       	mov	r30, r19
     870:	e6 95       	lsr	r30
     872:	e6 95       	lsr	r30
     874:	e6 95       	lsr	r30
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e6 5b       	subi	r30, 0xB6	; 182
     87a:	fe 4d       	sbci	r31, 0xDE	; 222
     87c:	83 2f       	mov	r24, r19
     87e:	87 70       	andi	r24, 0x07	; 7
     880:	ea 01       	movw	r28, r20
     882:	02 c0       	rjmp	.+4      	; 0x888 <qt_measure_sensors+0xd0>
     884:	cc 0f       	add	r28, r28
     886:	dd 1f       	adc	r29, r29
     888:	8a 95       	dec	r24
     88a:	e2 f7       	brpl	.-8      	; 0x884 <qt_measure_sensors+0xcc>
     88c:	20 89       	ldd	r18, Z+16	; 0x10
     88e:	2c 2b       	or	r18, r28
     890:	20 8b       	std	Z+16, r18	; 0x10
     892:	3f 5f       	subi	r19, 0xFF	; 255
     894:	16 96       	adiw	r26, 0x06	; 6
     896:	36 17       	cp	r19, r22
     898:	38 f3       	brcs	.-50     	; 0x868 <qt_measure_sensors+0xb0>
     89a:	80 91 5b 21 	lds	r24, 0x215B
     89e:	90 91 5c 21 	lds	r25, 0x215C
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	e5 e0       	ldi	r30, 0x05	; 5
     8a8:	0c 94 e2 1c 	jmp	0x39c4	; 0x39c4 <__epilogue_restores__+0x1a>

000008ac <qt_reset_sensing>:
     8ac:	10 92 7b 21 	sts	0x217B, r1
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	80 93 44 21 	sts	0x2144, r24
     8b6:	94 e1       	ldi	r25, 0x14	; 20
     8b8:	90 93 47 21 	sts	0x2147, r25
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	80 93 48 21 	sts	0x2148, r24
     8c2:	10 92 46 21 	sts	0x2146, r1
     8c6:	90 93 45 21 	sts	0x2145, r25
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 43 21 	sts	0x2143, r24
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	80 93 49 21 	sts	0x2149, r24
     8d6:	54 d3       	rcall	.+1704   	; 0xf80 <burst_reset>
     8d8:	10 92 5d 21 	sts	0x215D, r1
     8dc:	10 92 5e 21 	sts	0x215E, r1
     8e0:	08 95       	ret

000008e2 <qt_calibrate_sensing>:
     8e2:	1f 93       	push	r17
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <qt_calibrate_sensing+0xc>
     8e8:	81 2f       	mov	r24, r17
     8ea:	27 d0       	rcall	.+78     	; 0x93a <start_cal_sensor>
     8ec:	1f 5f       	subi	r17, 0xFF	; 255
     8ee:	80 91 7b 21 	lds	r24, 0x217B
     8f2:	18 17       	cp	r17, r24
     8f4:	c8 f3       	brcs	.-14     	; 0x8e8 <qt_calibrate_sensing+0x6>
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <qt_init_sensing_with_burst>:
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
     906:	7b 01       	movw	r14, r22
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	03 c0       	rjmp	.+6      	; 0x912 <qt_init_sensing_with_burst+0x18>
     90c:	81 2f       	mov	r24, r17
     90e:	15 d0       	rcall	.+42     	; 0x93a <start_cal_sensor>
     910:	1f 5f       	subi	r17, 0xFF	; 255
     912:	80 91 7b 21 	lds	r24, 0x217B
     916:	18 17       	cp	r17, r24
     918:	c8 f3       	brcs	.-14     	; 0x90c <qt_init_sensing_with_burst+0x12>
     91a:	10 92 5f 21 	sts	0x215F, r1
     91e:	10 92 60 21 	sts	0x2160, r1
     922:	c0 93 41 21 	sts	0x2141, r28
     926:	d0 93 42 21 	sts	0x2142, r29
     92a:	c7 01       	movw	r24, r14
     92c:	24 d3       	rcall	.+1608   	; 0xf76 <burst_init>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <start_cal_sensor>:
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	e3 e6       	ldi	r30, 0x63	; 99
     93e:	f1 e2       	ldi	r31, 0x21	; 33
     940:	9c 01       	movw	r18, r24
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	28 0f       	add	r18, r24
     948:	39 1f       	adc	r19, r25
     94a:	d9 01       	movw	r26, r18
     94c:	aa 0f       	add	r26, r26
     94e:	bb 1f       	adc	r27, r27
     950:	ae 0f       	add	r26, r30
     952:	bf 1f       	adc	r27, r31
     954:	15 96       	adiw	r26, 0x05	; 5
     956:	4c 91       	ld	r20, X
     958:	15 97       	sbiw	r26, 0x05	; 5
     95a:	80 91 5b 21 	lds	r24, 0x215B
     95e:	90 91 5c 21 	lds	r25, 0x215C
     962:	82 60       	ori	r24, 0x02	; 2
     964:	80 93 5b 21 	sts	0x215B, r24
     968:	90 93 5c 21 	sts	0x215C, r25
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	10 82       	st	Z, r1
     97a:	ed e7       	ldi	r30, 0x7D	; 125
     97c:	f1 e2       	ldi	r31, 0x21	; 33
     97e:	e4 0f       	add	r30, r20
     980:	f1 1d       	adc	r31, r1
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	80 83       	st	Z, r24
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	8c 93       	st	X, r24
     98a:	8f e0       	ldi	r24, 0x0F	; 15
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	8c 93       	st	X, r24
     990:	08 95       	ret

00000992 <get_channel_delta>:
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	34 96       	adiw	r30, 0x04	; 4
     998:	aa e4       	ldi	r26, 0x4A	; 74
     99a:	b1 e2       	ldi	r27, 0x21	; 33
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ea 0f       	add	r30, r26
     9a2:	fb 1f       	adc	r31, r27
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	a8 0f       	add	r26, r24
     9aa:	b9 1f       	adc	r27, r25
     9ac:	20 81       	ld	r18, Z
     9ae:	31 81       	ldd	r19, Z+1	; 0x01
     9b0:	8d 91       	ld	r24, X+
     9b2:	9c 91       	ld	r25, X
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	c9 01       	movw	r24, r18
     9ba:	08 95       	ret

000009bc <process_sensor>:
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e4 ee       	ldi	r30, 0xE4	; 228
     9c2:	f4 e0       	ldi	r31, 0x04	; 4
     9c4:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x8>
     9c8:	78 2e       	mov	r7, r24
     9ca:	f6 2e       	mov	r15, r22
     9cc:	9f de       	rcall	.-706    	; 0x70c <qt_get_sensor_delta>
     9ce:	5c 01       	movw	r10, r24
     9d0:	07 2d       	mov	r16, r7
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	f8 01       	movw	r30, r16
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e0 0f       	add	r30, r16
     9dc:	f1 1f       	adc	r31, r17
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ed 59       	subi	r30, 0x9D	; 157
     9e4:	fe 4d       	sbci	r31, 0xDE	; 222
     9e6:	54 81       	ldd	r21, Z+4	; 0x04
     9e8:	43 81       	ldd	r20, Z+3	; 0x03
     9ea:	24 2f       	mov	r18, r20
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	85 2f       	mov	r24, r21
     9f0:	83 70       	andi	r24, 0x03	; 3
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <process_sensor+0x40>
     9f8:	35 95       	asr	r19
     9fa:	27 95       	ror	r18
     9fc:	8a 95       	dec	r24
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <process_sensor+0x3c>
     a00:	82 2f       	mov	r24, r18
     a02:	22 30       	cpi	r18, 0x02	; 2
     a04:	08 f4       	brcc	.+2      	; 0xa08 <process_sensor+0x4c>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	24 2f       	mov	r18, r20
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	68 1b       	sub	r22, r24
     a10:	71 09       	sbc	r23, r1
     a12:	f8 01       	movw	r30, r16
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	e0 0f       	add	r30, r16
     a1a:	f1 1f       	adc	r31, r17
     a1c:	ef 01       	movw	r28, r30
     a1e:	cc 0f       	add	r28, r28
     a20:	dd 1f       	adc	r29, r29
     a22:	cd 59       	subi	r28, 0x9D	; 157
     a24:	de 4d       	sbci	r29, 0xDE	; 222
     a26:	88 81       	ld	r24, Y
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	09 f4       	brne	.+2      	; 0xa2e <process_sensor+0x72>
     a2c:	fb c0       	rjmp	.+502    	; 0xc24 <process_sensor+0x268>
     a2e:	85 30       	cpi	r24, 0x05	; 5
     a30:	30 f4       	brcc	.+12     	; 0xa3e <process_sensor+0x82>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	71 f0       	breq	.+28     	; 0xa52 <process_sensor+0x96>
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	09 f0       	breq	.+2      	; 0xa3c <process_sensor+0x80>
     a3a:	96 c2       	rjmp	.+1324   	; 0xf68 <process_sensor+0x5ac>
     a3c:	6e c0       	rjmp	.+220    	; 0xb1a <process_sensor+0x15e>
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	09 f4       	brne	.+2      	; 0xa44 <process_sensor+0x88>
     a42:	a5 c1       	rjmp	.+842    	; 0xd8e <process_sensor+0x3d2>
     a44:	80 32       	cpi	r24, 0x20	; 32
     a46:	09 f4       	brne	.+2      	; 0xa4a <process_sensor+0x8e>
     a48:	56 c2       	rjmp	.+1196   	; 0xef6 <process_sensor+0x53a>
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	09 f0       	breq	.+2      	; 0xa50 <process_sensor+0x94>
     a4e:	8c c2       	rjmp	.+1304   	; 0xf68 <process_sensor+0x5ac>
     a50:	02 c2       	rjmp	.+1028   	; 0xe56 <process_sensor+0x49a>
     a52:	40 91 5b 21 	lds	r20, 0x215B
     a56:	50 91 5c 21 	lds	r21, 0x215C
     a5a:	ca 01       	movw	r24, r20
     a5c:	92 60       	ori	r25, 0x02	; 2
     a5e:	80 93 5b 21 	sts	0x215B, r24
     a62:	90 93 5c 21 	sts	0x215C, r25
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	a8 2f       	mov	r26, r24
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	6a 30       	cpi	r22, 0x0A	; 10
     a70:	60 f0       	brcs	.+24     	; 0xa8a <process_sensor+0xce>
     a72:	aa 0f       	add	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	fd 01       	movw	r30, r26
     a78:	e6 5b       	subi	r30, 0xB6	; 182
     a7a:	fe 4d       	sbci	r31, 0xDE	; 222
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	ae 5a       	subi	r26, 0xAE	; 174
     a82:	be 4d       	sbci	r27, 0xDE	; 222
     a84:	8d 93       	st	X+, r24
     a86:	9c 93       	st	X, r25
     a88:	18 c0       	rjmp	.+48     	; 0xaba <process_sensor+0xfe>
     a8a:	aa 0f       	add	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	fd 01       	movw	r30, r26
     a90:	ee 5a       	subi	r30, 0xAE	; 174
     a92:	fe 4d       	sbci	r31, 0xDE	; 222
     a94:	20 81       	ld	r18, Z
     a96:	31 81       	ldd	r19, Z+1	; 0x01
     a98:	a6 5b       	subi	r26, 0xB6	; 182
     a9a:	be 4d       	sbci	r27, 0xDE	; 222
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	82 17       	cp	r24, r18
     aa2:	93 07       	cpc	r25, r19
     aa4:	18 f4       	brcc	.+6      	; 0xaac <process_sensor+0xf0>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	30 40       	sbci	r19, 0x00	; 0
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <process_sensor+0xfa>
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	50 f4       	brcc	.+20     	; 0xac6 <process_sensor+0x10a>
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	20 83       	st	Z, r18
     ab8:	31 83       	std	Z+1, r19	; 0x01
     aba:	48 60       	ori	r20, 0x08	; 8
     abc:	52 60       	ori	r21, 0x02	; 2
     abe:	40 93 5b 21 	sts	0x215B, r20
     ac2:	50 93 5c 21 	sts	0x215C, r21
     ac6:	86 2f       	mov	r24, r22
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	f8 01       	movw	r30, r16
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	e0 0f       	add	r30, r16
     ad2:	f1 1f       	adc	r31, r17
     ad4:	ef 01       	movw	r28, r30
     ad6:	cc 0f       	add	r28, r28
     ad8:	dd 1f       	adc	r29, r29
     ada:	cd 59       	subi	r28, 0x9D	; 157
     adc:	de 4d       	sbci	r29, 0xDE	; 222
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	88 23       	and	r24, r24
     ae2:	b1 f4       	brne	.+44     	; 0xb10 <process_sensor+0x154>
     ae4:	ad 81       	ldd	r26, Y+5	; 0x05
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	88 83       	st	Y, r24
     aea:	80 91 5b 21 	lds	r24, 0x215B
     aee:	90 91 5c 21 	lds	r25, 0x215C
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 93 5b 21 	sts	0x215B, r24
     af8:	90 93 5c 21 	sts	0x215C, r25
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	eb 59       	subi	r30, 0x9B	; 155
     b02:	fe 4d       	sbci	r31, 0xDE	; 222
     b04:	10 82       	st	Z, r1
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	a3 58       	subi	r26, 0x83	; 131
     b0a:	be 4d       	sbci	r27, 0xDE	; 222
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	8c 93       	st	X, r24
     b10:	80 91 45 21 	lds	r24, 0x2145
     b14:	80 93 7c 21 	sts	0x217C, r24
     b18:	25 c2       	rjmp	.+1098   	; 0xf64 <process_sensor+0x5a8>
     b1a:	52 ff       	sbrs	r21, 2
     b1c:	08 c0       	rjmp	.+16     	; 0xb2e <process_sensor+0x172>
     b1e:	ed 81       	ldd	r30, Y+5	; 0x05
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	e3 58       	subi	r30, 0x83	; 131
     b24:	fe 4d       	sbci	r31, 0xDE	; 222
     b26:	10 82       	st	Z, r1
     b28:	80 e2       	ldi	r24, 0x20	; 32
     b2a:	88 83       	st	Y, r24
     b2c:	0c c2       	rjmp	.+1048   	; 0xf46 <process_sensor+0x58a>
     b2e:	c5 01       	movw	r24, r10
     b30:	b7 fe       	sbrs	r11, 7
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <process_sensor+0x17c>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	82 17       	cp	r24, r18
     b3a:	93 07       	cpc	r25, r19
     b3c:	80 f0       	brcs	.+32     	; 0xb5e <process_sensor+0x1a2>
     b3e:	f8 01       	movw	r30, r16
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e0 0f       	add	r30, r16
     b46:	f1 1f       	adc	r31, r17
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	df 01       	movw	r26, r30
     b4e:	ad 59       	subi	r26, 0x9D	; 157
     b50:	be 4d       	sbci	r27, 0xDE	; 222
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	8c 93       	st	X, r24
     b56:	eb 59       	subi	r30, 0x9B	; 155
     b58:	fe 4d       	sbci	r31, 0xDE	; 222
     b5a:	10 82       	st	Z, r1
     b5c:	fa c1       	rjmp	.+1012   	; 0xf52 <process_sensor+0x596>
     b5e:	ff 20       	and	r15, r15
     b60:	09 f4       	brne	.+2      	; 0xb64 <process_sensor+0x1a8>
     b62:	02 c2       	rjmp	.+1028   	; 0xf68 <process_sensor+0x5ac>
     b64:	80 91 7c 21 	lds	r24, 0x217C
     b68:	88 23       	and	r24, r24
     b6a:	09 f0       	breq	.+2      	; 0xb6e <process_sensor+0x1b2>
     b6c:	fd c1       	rjmp	.+1018   	; 0xf68 <process_sensor+0x5ac>
     b6e:	f8 01       	movw	r30, r16
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e0 0f       	add	r30, r16
     b76:	f1 1f       	adc	r31, r17
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ed 59       	subi	r30, 0x9D	; 157
     b7e:	fe 4d       	sbci	r31, 0xDE	; 222
     b80:	85 81       	ldd	r24, Z+5	; 0x05
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	ec 01       	movw	r28, r24
     b86:	cc 0f       	add	r28, r28
     b88:	dd 1f       	adc	r29, r29
     b8a:	ce 5a       	subi	r28, 0xAE	; 174
     b8c:	de 4d       	sbci	r29, 0xDE	; 222
     b8e:	28 81       	ld	r18, Y
     b90:	39 81       	ldd	r19, Y+1	; 0x01
     b92:	fc 01       	movw	r30, r24
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e6 5b       	subi	r30, 0xB6	; 182
     b9a:	fe 4d       	sbci	r31, 0xDE	; 222
     b9c:	01 90       	ld	r0, Z+
     b9e:	f0 81       	ld	r31, Z
     ba0:	e0 2d       	mov	r30, r0
     ba2:	2e 17       	cp	r18, r30
     ba4:	3f 07       	cpc	r19, r31
     ba6:	88 f4       	brcc	.+34     	; 0xbca <process_sensor+0x20e>
     ba8:	fc 01       	movw	r30, r24
     baa:	e3 58       	subi	r30, 0x83	; 131
     bac:	fe 4d       	sbci	r31, 0xDE	; 222
     bae:	90 81       	ld	r25, Z
     bb0:	9f 0d       	add	r25, r15
     bb2:	90 83       	st	Z, r25
     bb4:	80 91 48 21 	lds	r24, 0x2148
     bb8:	80 58       	subi	r24, 0x80	; 128
     bba:	98 17       	cp	r25, r24
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <process_sensor+0x204>
     bbe:	d4 c1       	rjmp	.+936    	; 0xf68 <process_sensor+0x5ac>
     bc0:	80 e8       	ldi	r24, 0x80	; 128
     bc2:	80 83       	st	Z, r24
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <process_sensor+0x236>
     bca:	dc 01       	movw	r26, r24
     bcc:	a3 58       	subi	r26, 0x83	; 131
     bce:	be 4d       	sbci	r27, 0xDE	; 222
     bd0:	e2 17       	cp	r30, r18
     bd2:	f3 07       	cpc	r31, r19
     bd4:	d0 f4       	brcc	.+52     	; 0xc0a <process_sensor+0x24e>
     bd6:	8c 91       	ld	r24, X
     bd8:	8f 19       	sub	r24, r15
     bda:	8c 93       	st	X, r24
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	90 91 47 21 	lds	r25, 0x2147
     be2:	54 2f       	mov	r21, r20
     be4:	59 1b       	sub	r21, r25
     be6:	58 17       	cp	r21, r24
     be8:	08 f4       	brcc	.+2      	; 0xbec <process_sensor+0x230>
     bea:	be c1       	rjmp	.+892    	; 0xf68 <process_sensor+0x5ac>
     bec:	4c 93       	st	X, r20
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	30 40       	sbci	r19, 0x00	; 0
     bf2:	28 83       	st	Y, r18
     bf4:	39 83       	std	Y+1, r19	; 0x01
     bf6:	80 91 5b 21 	lds	r24, 0x215B
     bfa:	90 91 5c 21 	lds	r25, 0x215C
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	80 93 5b 21 	sts	0x215B, r24
     c04:	90 93 5c 21 	sts	0x215C, r25
     c08:	af c1       	rjmp	.+862    	; 0xf68 <process_sensor+0x5ac>
     c0a:	2c 91       	ld	r18, X
     c0c:	21 38       	cpi	r18, 0x81	; 129
     c0e:	10 f0       	brcs	.+4      	; 0xc14 <process_sensor+0x258>
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	2c 93       	st	X, r18
     c14:	fc 01       	movw	r30, r24
     c16:	e3 58       	subi	r30, 0x83	; 131
     c18:	fe 4d       	sbci	r31, 0xDE	; 222
     c1a:	80 81       	ld	r24, Z
     c1c:	87 fd       	sbrc	r24, 7
     c1e:	a4 c1       	rjmp	.+840    	; 0xf68 <process_sensor+0x5ac>
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	67 c1       	rjmp	.+718    	; 0xef2 <process_sensor+0x536>
     c24:	c5 01       	movw	r24, r10
     c26:	b7 fe       	sbrs	r11, 7
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <process_sensor+0x272>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	f8 01       	movw	r30, r16
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	82 17       	cp	r24, r18
     c36:	93 07       	cpc	r25, r19
     c38:	08 f4       	brcc	.+2      	; 0xc3c <process_sensor+0x280>
     c3a:	8f c0       	rjmp	.+286    	; 0xd5a <process_sensor+0x39e>
     c3c:	80 91 45 21 	lds	r24, 0x2145
     c40:	80 93 7c 21 	sts	0x217C, r24
     c44:	9f 01       	movw	r18, r30
     c46:	20 0f       	add	r18, r16
     c48:	31 1f       	adc	r19, r17
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	d9 01       	movw	r26, r18
     c50:	ab 59       	subi	r26, 0x9B	; 155
     c52:	be 4d       	sbci	r27, 0xDE	; 222
     c54:	8c 91       	ld	r24, X
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	8c 93       	st	X, r24
     c5a:	f9 01       	movw	r30, r18
     c5c:	ed 59       	subi	r30, 0x9D	; 157
     c5e:	fe 4d       	sbci	r31, 0xDE	; 222
     c60:	84 81       	ldd	r24, Z+4	; 0x04
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	88 73       	andi	r24, 0x38	; 56
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	2a 95       	dec	r18
     c70:	e1 f7       	brne	.-8      	; 0xc6a <process_sensor+0x2ae>
     c72:	68 2e       	mov	r6, r24
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <process_sensor+0x2be>
     c78:	3e c0       	rjmp	.+124    	; 0xcf6 <process_sensor+0x33a>
     c7a:	cc 24       	eor	r12, r12
     c7c:	dd 24       	eor	r13, r13
     c7e:	7f 01       	movw	r14, r30
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	e8 0e       	add	r14, r24
     c86:	f9 1e       	adc	r15, r25
     c88:	4d 01       	movw	r8, r26
     c8a:	2f c0       	rjmp	.+94     	; 0xcea <process_sensor+0x32e>
     c8c:	d7 14       	cp	r13, r7
     c8e:	61 f1       	breq	.+88     	; 0xce8 <process_sensor+0x32c>
     c90:	8d 2d       	mov	r24, r13
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	ec 01       	movw	r28, r24
     c96:	cc 0f       	add	r28, r28
     c98:	dd 1f       	adc	r29, r29
     c9a:	c8 0f       	add	r28, r24
     c9c:	d9 1f       	adc	r29, r25
     c9e:	cc 0f       	add	r28, r28
     ca0:	dd 1f       	adc	r29, r29
     ca2:	cd 59       	subi	r28, 0x9D	; 157
     ca4:	de 4d       	sbci	r29, 0xDE	; 222
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	88 73       	andi	r24, 0x38	; 56
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	73 e0       	ldi	r23, 0x03	; 3
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	7a 95       	dec	r23
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <process_sensor+0x2f4>
     cb8:	68 16       	cp	r6, r24
     cba:	b1 f4       	brne	.+44     	; 0xce8 <process_sensor+0x32c>
     cbc:	8d 2d       	mov	r24, r13
     cbe:	26 dd       	rcall	.-1460   	; 0x70c <qt_get_sensor_delta>
     cc0:	2b 81       	ldd	r18, Y+3	; 0x03
     cc2:	82 1b       	sub	r24, r18
     cc4:	91 09       	sbc	r25, r1
     cc6:	f7 01       	movw	r30, r14
     cc8:	20 81       	ld	r18, Z
     cca:	a5 01       	movw	r20, r10
     ccc:	42 1b       	sub	r20, r18
     cce:	51 09       	sbc	r21, r1
     cd0:	48 17       	cp	r20, r24
     cd2:	59 07       	cpc	r21, r25
     cd4:	2c f0       	brlt	.+10     	; 0xce0 <process_sensor+0x324>
     cd6:	88 81       	ld	r24, Y
     cd8:	80 31       	cpi	r24, 0x10	; 16
     cda:	11 f0       	breq	.+4      	; 0xce0 <process_sensor+0x324>
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	21 f4       	brne	.+8      	; 0xce8 <process_sensor+0x32c>
     ce0:	f4 01       	movw	r30, r8
     ce2:	10 82       	st	Z, r1
     ce4:	cc 24       	eor	r12, r12
     ce6:	c3 94       	inc	r12
     ce8:	d3 94       	inc	r13
     cea:	80 91 7b 21 	lds	r24, 0x217B
     cee:	d8 16       	cp	r13, r24
     cf0:	68 f2       	brcs	.-102    	; 0xc8c <process_sensor+0x2d0>
     cf2:	cc 20       	and	r12, r12
     cf4:	79 f4       	brne	.+30     	; 0xd14 <process_sensor+0x358>
     cf6:	80 91 44 21 	lds	r24, 0x2144
     cfa:	88 23       	and	r24, r24
     cfc:	59 f0       	breq	.+22     	; 0xd14 <process_sensor+0x358>
     cfe:	80 91 5b 21 	lds	r24, 0x215B
     d02:	90 91 5c 21 	lds	r25, 0x215C
     d06:	98 60       	ori	r25, 0x08	; 8
     d08:	80 93 5b 21 	sts	0x215B, r24
     d0c:	90 93 5c 21 	sts	0x215C, r25
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <process_sensor+0x35a>
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	98 01       	movw	r18, r16
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	20 0f       	add	r18, r16
     d1e:	31 1f       	adc	r19, r17
     d20:	f9 01       	movw	r30, r18
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	eb 59       	subi	r30, 0x9B	; 155
     d28:	fe 4d       	sbci	r31, 0xDE	; 222
     d2a:	90 81       	ld	r25, Z
     d2c:	80 91 44 21 	lds	r24, 0x2144
     d30:	98 17       	cp	r25, r24
     d32:	08 f4       	brcc	.+2      	; 0xd36 <process_sensor+0x37a>
     d34:	1a c1       	rjmp	.+564    	; 0xf6a <process_sensor+0x5ae>
     d36:	80 91 5b 21 	lds	r24, 0x215B
     d3a:	90 91 5c 21 	lds	r25, 0x215C
     d3e:	83 60       	ori	r24, 0x03	; 3
     d40:	80 93 5b 21 	sts	0x215B, r24
     d44:	90 93 5c 21 	sts	0x215C, r25
     d48:	f9 01       	movw	r30, r18
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	ed 59       	subi	r30, 0x9D	; 157
     d50:	fe 4d       	sbci	r31, 0xDE	; 222
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	80 83       	st	Z, r24
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	08 c1       	rjmp	.+528    	; 0xf6a <process_sensor+0x5ae>
     d5a:	e0 0f       	add	r30, r16
     d5c:	f1 1f       	adc	r31, r17
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	df 01       	movw	r26, r30
     d64:	ad 59       	subi	r26, 0x9D	; 157
     d66:	be 4d       	sbci	r27, 0xDE	; 222
     d68:	15 96       	adiw	r26, 0x05	; 5
     d6a:	2c 91       	ld	r18, X
     d6c:	15 97       	sbiw	r26, 0x05	; 5
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
     d72:	80 91 5b 21 	lds	r24, 0x215B
     d76:	90 91 5c 21 	lds	r25, 0x215C
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	80 93 5b 21 	sts	0x215B, r24
     d80:	90 93 5c 21 	sts	0x215C, r25
     d84:	eb 59       	subi	r30, 0x9B	; 155
     d86:	fe 4d       	sbci	r31, 0xDE	; 222
     d88:	10 82       	st	Z, r1
     d8a:	e2 2f       	mov	r30, r18
     d8c:	ae c0       	rjmp	.+348    	; 0xeea <process_sensor+0x52e>
     d8e:	52 ff       	sbrs	r21, 2
     d90:	0e c0       	rjmp	.+28     	; 0xdae <process_sensor+0x3f2>
     d92:	ed 81       	ldd	r30, Y+5	; 0x05
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	e3 58       	subi	r30, 0x83	; 131
     d98:	fe 4d       	sbci	r31, 0xDE	; 222
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	80 83       	st	Z, r24
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	88 83       	st	Y, r24
     da2:	80 91 5b 21 	lds	r24, 0x215B
     da6:	90 91 5c 21 	lds	r25, 0x215C
     daa:	90 61       	ori	r25, 0x10	; 16
     dac:	4a c0       	rjmp	.+148    	; 0xe42 <process_sensor+0x486>
     dae:	c5 01       	movw	r24, r10
     db0:	b7 fe       	sbrs	r11, 7
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <process_sensor+0x3fc>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	f8 01       	movw	r30, r16
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	40 91 5b 21 	lds	r20, 0x215B
     dc2:	50 91 5c 21 	lds	r21, 0x215C
     dc6:	86 17       	cp	r24, r22
     dc8:	97 07       	cpc	r25, r23
     dca:	70 f4       	brcc	.+28     	; 0xde8 <process_sensor+0x42c>
     dcc:	e0 0f       	add	r30, r16
     dce:	f1 1f       	adc	r31, r17
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ed 59       	subi	r30, 0x9D	; 157
     dd6:	fe 4d       	sbci	r31, 0xDE	; 222
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	80 83       	st	Z, r24
     ddc:	54 60       	ori	r21, 0x04	; 4
     dde:	40 93 5b 21 	sts	0x215B, r20
     de2:	50 93 5c 21 	sts	0x215C, r21
     de6:	31 c0       	rjmp	.+98     	; 0xe4a <process_sensor+0x48e>
     de8:	41 60       	ori	r20, 0x01	; 1
     dea:	40 93 5b 21 	sts	0x215B, r20
     dee:	50 93 5c 21 	sts	0x215C, r21
     df2:	e0 0f       	add	r30, r16
     df4:	f1 1f       	adc	r31, r17
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	eb 59       	subi	r30, 0x9B	; 155
     dfc:	fe 4d       	sbci	r31, 0xDE	; 222
     dfe:	90 81       	ld	r25, Z
     e00:	80 91 44 21 	lds	r24, 0x2144
     e04:	98 17       	cp	r25, r24
     e06:	10 f4       	brcc	.+4      	; 0xe0c <process_sensor+0x450>
     e08:	9f 5f       	subi	r25, 0xFF	; 255
     e0a:	90 83       	st	Z, r25
     e0c:	90 91 46 21 	lds	r25, 0x2146
     e10:	99 23       	and	r25, r25
     e12:	71 f0       	breq	.+28     	; 0xe30 <process_sensor+0x474>
     e14:	f8 01       	movw	r30, r16
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	e0 0f       	add	r30, r16
     e1c:	f1 1f       	adc	r31, r17
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	ed 59       	subi	r30, 0x9D	; 157
     e24:	fe 4d       	sbci	r31, 0xDE	; 222
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	89 17       	cp	r24, r25
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <process_sensor+0x478>
     e2c:	8f 0d       	add	r24, r15
     e2e:	81 83       	std	Z+1, r24	; 0x01
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0c c0       	rjmp	.+24     	; 0xe4c <process_sensor+0x490>
     e34:	87 2d       	mov	r24, r7
     e36:	81 dd       	rcall	.-1278   	; 0x93a <start_cal_sensor>
     e38:	80 91 5b 21 	lds	r24, 0x215B
     e3c:	90 91 5c 21 	lds	r25, 0x215C
     e40:	92 60       	ori	r25, 0x02	; 2
     e42:	80 93 5b 21 	sts	0x215B, r24
     e46:	90 93 5c 21 	sts	0x215C, r25
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	80 91 45 21 	lds	r24, 0x2145
     e50:	80 93 7c 21 	sts	0x217C, r24
     e54:	8a c0       	rjmp	.+276    	; 0xf6a <process_sensor+0x5ae>
     e56:	80 91 45 21 	lds	r24, 0x2145
     e5a:	80 93 7c 21 	sts	0x217C, r24
     e5e:	df 01       	movw	r26, r30
     e60:	aa 0f       	add	r26, r26
     e62:	bb 1f       	adc	r27, r27
     e64:	ab 59       	subi	r26, 0x9B	; 155
     e66:	be 4d       	sbci	r27, 0xDE	; 222
     e68:	8c 91       	ld	r24, X
     e6a:	88 23       	and	r24, r24
     e6c:	89 f1       	breq	.+98     	; 0xed0 <process_sensor+0x514>
     e6e:	c5 01       	movw	r24, r10
     e70:	b7 fe       	sbrs	r11, 7
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <process_sensor+0x4bc>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	40 91 5b 21 	lds	r20, 0x215B
     e7c:	50 91 5c 21 	lds	r21, 0x215C
     e80:	68 17       	cp	r22, r24
     e82:	79 07       	cpc	r23, r25
     e84:	90 f4       	brcc	.+36     	; 0xeaa <process_sensor+0x4ee>
     e86:	f8 01       	movw	r30, r16
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e0 0f       	add	r30, r16
     e8e:	f1 1f       	adc	r31, r17
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ed 59       	subi	r30, 0x9D	; 157
     e96:	fe 4d       	sbci	r31, 0xDE	; 222
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	80 83       	st	Z, r24
     e9c:	41 60       	ori	r20, 0x01	; 1
     e9e:	40 93 5b 21 	sts	0x215B, r20
     ea2:	50 93 5c 21 	sts	0x215C, r21
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <process_sensor+0x4fa>
     eaa:	54 60       	ori	r21, 0x04	; 4
     eac:	40 93 5b 21 	sts	0x215B, r20
     eb0:	50 93 5c 21 	sts	0x215C, r21
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	f8 01       	movw	r30, r16
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e0 0f       	add	r30, r16
     ebe:	f1 1f       	adc	r31, r17
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	eb 59       	subi	r30, 0x9B	; 155
     ec6:	fe 4d       	sbci	r31, 0xDE	; 222
     ec8:	80 81       	ld	r24, Z
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24
     ece:	4d c0       	rjmp	.+154    	; 0xf6a <process_sensor+0x5ae>
     ed0:	ed 81       	ldd	r30, Y+5	; 0x05
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	88 83       	st	Y, r24
     ed6:	80 91 5b 21 	lds	r24, 0x215B
     eda:	90 91 5c 21 	lds	r25, 0x215C
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	80 93 5b 21 	sts	0x215B, r24
     ee4:	90 93 5c 21 	sts	0x215C, r25
     ee8:	1c 92       	st	X, r1
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	e3 58       	subi	r30, 0x83	; 131
     eee:	fe 4d       	sbci	r31, 0xDE	; 222
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	80 83       	st	Z, r24
     ef4:	39 c0       	rjmp	.+114    	; 0xf68 <process_sensor+0x5ac>
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	a8 2f       	mov	r26, r24
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	a3 58       	subi	r26, 0x83	; 131
     efe:	be 4d       	sbci	r27, 0xDE	; 222
     f00:	9c 91       	ld	r25, X
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	9c 93       	st	X, r25
     f06:	52 fd       	sbrc	r21, 2
     f08:	18 c0       	rjmp	.+48     	; 0xf3a <process_sensor+0x57e>
     f0a:	97 ff       	sbrs	r25, 7
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <process_sensor+0x558>
     f0e:	80 e1       	ldi	r24, 0x10	; 16
     f10:	88 83       	st	Y, r24
     f12:	2a c0       	rjmp	.+84     	; 0xf68 <process_sensor+0x5ac>
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	88 83       	st	Y, r24
     f18:	80 91 5b 21 	lds	r24, 0x215B
     f1c:	90 91 5c 21 	lds	r25, 0x215C
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	80 93 5b 21 	sts	0x215B, r24
     f26:	90 93 5c 21 	sts	0x215C, r25
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	eb 59       	subi	r30, 0x9B	; 155
     f30:	fe 4d       	sbci	r31, 0xDE	; 222
     f32:	10 82       	st	Z, r1
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
     f38:	17 c0       	rjmp	.+46     	; 0xf68 <process_sensor+0x5ac>
     f3a:	80 91 49 21 	lds	r24, 0x2149
     f3e:	98 17       	cp	r25, r24
     f40:	40 f0       	brcs	.+16     	; 0xf52 <process_sensor+0x596>
     f42:	87 2d       	mov	r24, r7
     f44:	fa dc       	rcall	.-1548   	; 0x93a <start_cal_sensor>
     f46:	80 91 5b 21 	lds	r24, 0x215B
     f4a:	90 91 5c 21 	lds	r25, 0x215C
     f4e:	90 61       	ori	r25, 0x10	; 16
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <process_sensor+0x5a0>
     f52:	80 91 5b 21 	lds	r24, 0x215B
     f56:	90 91 5c 21 	lds	r25, 0x215C
     f5a:	94 60       	ori	r25, 0x04	; 4
     f5c:	80 93 5b 21 	sts	0x215B, r24
     f60:	90 93 5c 21 	sts	0x215C, r25
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <process_sensor+0x5ae>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	84 2f       	mov	r24, r20
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	ee e0       	ldi	r30, 0x0E	; 14
     f72:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__+0x8>

00000f76 <burst_init>:
     f76:	fc 01       	movw	r30, r24
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	09 f0       	breq	.+2      	; 0xf7e <burst_init+0x8>
     f7c:	19 95       	eicall
     f7e:	08 95       	ret

00000f80 <burst_reset>:
     f80:	10 92 81 21 	sts	0x2181, r1
     f84:	10 92 82 21 	sts	0x2182, r1
     f88:	10 92 85 21 	sts	0x2185, r1
     f8c:	10 92 86 21 	sts	0x2186, r1
     f90:	10 92 83 21 	sts	0x2183, r1
     f94:	10 92 84 21 	sts	0x2184, r1
     f98:	10 92 87 21 	sts	0x2187, r1
     f9c:	10 92 88 21 	sts	0x2188, r1
     fa0:	08 95       	ret

00000fa2 <burst>:
     fa2:	80 91 83 21 	lds	r24, 0x2183
     fa6:	90 91 81 21 	lds	r25, 0x2181
     faa:	89 2b       	or	r24, r25
     fac:	41 f0       	breq	.+16     	; 0xfbe <burst+0x1c>
     fae:	e0 91 41 21 	lds	r30, 0x2141
     fb2:	f0 91 42 21 	lds	r31, 0x2142
     fb6:	30 97       	sbiw	r30, 0x00	; 0
     fb8:	11 f0       	breq	.+4      	; 0xfbe <burst+0x1c>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	19 95       	eicall
     fbe:	80 91 84 21 	lds	r24, 0x2184
     fc2:	90 91 82 21 	lds	r25, 0x2182
     fc6:	89 2b       	or	r24, r25
     fc8:	41 f0       	breq	.+16     	; 0xfda <burst+0x38>
     fca:	e0 91 41 21 	lds	r30, 0x2141
     fce:	f0 91 42 21 	lds	r31, 0x2142
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	11 f0       	breq	.+4      	; 0xfda <burst+0x38>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	19 95       	eicall
     fda:	08 95       	ret

00000fdc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	1f 92       	push	r1
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     ff4:	88 e0       	ldi	r24, 0x08	; 8
     ff6:	e0 e0       	ldi	r30, 0x00	; 0
     ff8:	f6 e0       	ldi	r31, 0x06	; 6
     ffa:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     ffc:	85 83       	std	Z+5, r24	; 0x05
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     ffe:	0f 2e       	mov	r0, r31
    1000:	fb e2       	ldi	r31, 0x2B	; 43
    1002:	bf 2e       	mov	r11, r31
    1004:	f0 2d       	mov	r31, r0
    1006:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    1008:	80 ea       	ldi	r24, 0xA0	; 160
    100a:	99 e0       	ldi	r25, 0x09	; 9
    100c:	0e 94 25 11 	call	0x224a	; 0x224a <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    1010:	c1 2c       	mov	r12, r1
    1012:	d1 2c       	mov	r13, r1
    1014:	76 01       	movw	r14, r12
    1016:	00 e4       	ldi	r16, 0x40	; 64
    1018:	12 e4       	ldi	r17, 0x42	; 66
    101a:	2f e0       	ldi	r18, 0x0F	; 15
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	43 e0       	ldi	r20, 0x03	; 3
    1020:	be 01       	movw	r22, r28
    1022:	6f 5f       	subi	r22, 0xFF	; 255
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	80 ea       	ldi	r24, 0xA0	; 160
    1028:	99 e0       	ldi	r25, 0x09	; 9
    102a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    102e:	00 e6       	ldi	r16, 0x60	; 96
    1030:	16 e0       	ldi	r17, 0x06	; 6
    1032:	ff 24       	eor	r15, r15
    1034:	f3 94       	inc	r15
    1036:	f8 01       	movw	r30, r16
    1038:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    103a:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    103c:	be 01       	movw	r22, r28
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	80 ea       	ldi	r24, 0xA0	; 160
    1044:	99 e0       	ldi	r25, 0x09	; 9
    1046:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    104a:	f8 01       	movw	r30, r16
    104c:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    104e:	e0 ea       	ldi	r30, 0xA0	; 160
    1050:	f9 e0       	ldi	r31, 0x09	; 9
    1052:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1054:	85 ff       	sbrs	r24, 5
    1056:	fd cf       	rjmp	.-6      	; 0x1052 <st7565r_init+0x76>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1058:	80 ea       	ldi	r24, 0xA0	; 160
    105a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    105e:	e0 ea       	ldi	r30, 0xA0	; 160
    1060:	f9 e0       	ldi	r31, 0x09	; 9
    1062:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1064:	86 ff       	sbrs	r24, 6
    1066:	fd cf       	rjmp	.-6      	; 0x1062 <st7565r_init+0x86>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1068:	e0 ea       	ldi	r30, 0xA0	; 160
    106a:	f9 e0       	ldi	r31, 0x09	; 9
    106c:	80 e4       	ldi	r24, 0x40	; 64
    106e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1070:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1072:	be 01       	movw	r22, r28
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	80 ea       	ldi	r24, 0xA0	; 160
    107a:	99 e0       	ldi	r25, 0x09	; 9
    107c:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1080:	8b e2       	ldi	r24, 0x2B	; 43
    1082:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1084:	be 01       	movw	r22, r28
    1086:	6f 5f       	subi	r22, 0xFF	; 255
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	80 ea       	ldi	r24, 0xA0	; 160
    108c:	99 e0       	ldi	r25, 0x09	; 9
    108e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	e0 e6       	ldi	r30, 0x60	; 96
    1096:	f6 e0       	ldi	r31, 0x06	; 6
    1098:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    109a:	e0 ea       	ldi	r30, 0xA0	; 160
    109c:	f9 e0       	ldi	r31, 0x09	; 9
    109e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    10a0:	85 ff       	sbrs	r24, 5
    10a2:	fd cf       	rjmp	.-6      	; 0x109e <st7565r_init+0xc2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    10a4:	86 ea       	ldi	r24, 0xA6	; 166
    10a6:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    10aa:	e0 ea       	ldi	r30, 0xA0	; 160
    10ac:	f9 e0       	ldi	r31, 0x09	; 9
    10ae:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    10b0:	86 ff       	sbrs	r24, 6
    10b2:	fd cf       	rjmp	.-6      	; 0x10ae <st7565r_init+0xd2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    10b4:	e0 ea       	ldi	r30, 0xA0	; 160
    10b6:	f9 e0       	ldi	r31, 0x09	; 9
    10b8:	80 e4       	ldi	r24, 0x40	; 64
    10ba:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    10bc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    10be:	be 01       	movw	r22, r28
    10c0:	6f 5f       	subi	r22, 0xFF	; 255
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	80 ea       	ldi	r24, 0xA0	; 160
    10c6:	99 e0       	ldi	r25, 0x09	; 9
    10c8:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    10cc:	8b e2       	ldi	r24, 0x2B	; 43
    10ce:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    10d0:	be 01       	movw	r22, r28
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	80 ea       	ldi	r24, 0xA0	; 160
    10d8:	99 e0       	ldi	r25, 0x09	; 9
    10da:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	e0 e6       	ldi	r30, 0x60	; 96
    10e2:	f6 e0       	ldi	r31, 0x06	; 6
    10e4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    10e6:	e0 ea       	ldi	r30, 0xA0	; 160
    10e8:	f9 e0       	ldi	r31, 0x09	; 9
    10ea:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    10ec:	85 ff       	sbrs	r24, 5
    10ee:	fd cf       	rjmp	.-6      	; 0x10ea <st7565r_init+0x10e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    10f0:	88 ec       	ldi	r24, 0xC8	; 200
    10f2:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    10f6:	e0 ea       	ldi	r30, 0xA0	; 160
    10f8:	f9 e0       	ldi	r31, 0x09	; 9
    10fa:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    10fc:	86 ff       	sbrs	r24, 6
    10fe:	fd cf       	rjmp	.-6      	; 0x10fa <st7565r_init+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1100:	e0 ea       	ldi	r30, 0xA0	; 160
    1102:	f9 e0       	ldi	r31, 0x09	; 9
    1104:	80 e4       	ldi	r24, 0x40	; 64
    1106:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1108:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    110a:	be 01       	movw	r22, r28
    110c:	6f 5f       	subi	r22, 0xFF	; 255
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	80 ea       	ldi	r24, 0xA0	; 160
    1112:	99 e0       	ldi	r25, 0x09	; 9
    1114:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1118:	8b e2       	ldi	r24, 0x2B	; 43
    111a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    111c:	be 01       	movw	r22, r28
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	80 ea       	ldi	r24, 0xA0	; 160
    1124:	99 e0       	ldi	r25, 0x09	; 9
    1126:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	e0 e6       	ldi	r30, 0x60	; 96
    112e:	f6 e0       	ldi	r31, 0x06	; 6
    1130:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1132:	e0 ea       	ldi	r30, 0xA0	; 160
    1134:	f9 e0       	ldi	r31, 0x09	; 9
    1136:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1138:	85 ff       	sbrs	r24, 5
    113a:	fd cf       	rjmp	.-6      	; 0x1136 <st7565r_init+0x15a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    113c:	82 ea       	ldi	r24, 0xA2	; 162
    113e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1142:	e0 ea       	ldi	r30, 0xA0	; 160
    1144:	f9 e0       	ldi	r31, 0x09	; 9
    1146:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1148:	86 ff       	sbrs	r24, 6
    114a:	fd cf       	rjmp	.-6      	; 0x1146 <st7565r_init+0x16a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    114c:	e0 ea       	ldi	r30, 0xA0	; 160
    114e:	f9 e0       	ldi	r31, 0x09	; 9
    1150:	80 e4       	ldi	r24, 0x40	; 64
    1152:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1154:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1156:	be 01       	movw	r22, r28
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	80 ea       	ldi	r24, 0xA0	; 160
    115e:	99 e0       	ldi	r25, 0x09	; 9
    1160:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1164:	8b e2       	ldi	r24, 0x2B	; 43
    1166:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1168:	be 01       	movw	r22, r28
    116a:	6f 5f       	subi	r22, 0xFF	; 255
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	80 ea       	ldi	r24, 0xA0	; 160
    1170:	99 e0       	ldi	r25, 0x09	; 9
    1172:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	e0 e6       	ldi	r30, 0x60	; 96
    117a:	f6 e0       	ldi	r31, 0x06	; 6
    117c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    117e:	e0 ea       	ldi	r30, 0xA0	; 160
    1180:	f9 e0       	ldi	r31, 0x09	; 9
    1182:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1184:	85 ff       	sbrs	r24, 5
    1186:	fd cf       	rjmp	.-6      	; 0x1182 <st7565r_init+0x1a6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1188:	8f e2       	ldi	r24, 0x2F	; 47
    118a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    118e:	e0 ea       	ldi	r30, 0xA0	; 160
    1190:	f9 e0       	ldi	r31, 0x09	; 9
    1192:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1194:	86 ff       	sbrs	r24, 6
    1196:	fd cf       	rjmp	.-6      	; 0x1192 <st7565r_init+0x1b6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1198:	e0 ea       	ldi	r30, 0xA0	; 160
    119a:	f9 e0       	ldi	r31, 0x09	; 9
    119c:	80 e4       	ldi	r24, 0x40	; 64
    119e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    11a0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    11a2:	be 01       	movw	r22, r28
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	80 ea       	ldi	r24, 0xA0	; 160
    11aa:	99 e0       	ldi	r25, 0x09	; 9
    11ac:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    11b0:	8b e2       	ldi	r24, 0x2B	; 43
    11b2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    11b4:	be 01       	movw	r22, r28
    11b6:	6f 5f       	subi	r22, 0xFF	; 255
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	80 ea       	ldi	r24, 0xA0	; 160
    11bc:	99 e0       	ldi	r25, 0x09	; 9
    11be:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	e0 e6       	ldi	r30, 0x60	; 96
    11c6:	f6 e0       	ldi	r31, 0x06	; 6
    11c8:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    11ca:	e0 ea       	ldi	r30, 0xA0	; 160
    11cc:	f9 e0       	ldi	r31, 0x09	; 9
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    11d0:	85 ff       	sbrs	r24, 5
    11d2:	fd cf       	rjmp	.-6      	; 0x11ce <st7565r_init+0x1f2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    11d4:	88 ef       	ldi	r24, 0xF8	; 248
    11d6:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    11da:	e0 ea       	ldi	r30, 0xA0	; 160
    11dc:	f9 e0       	ldi	r31, 0x09	; 9
    11de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    11e0:	86 ff       	sbrs	r24, 6
    11e2:	fd cf       	rjmp	.-6      	; 0x11de <st7565r_init+0x202>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    11e4:	e0 ea       	ldi	r30, 0xA0	; 160
    11e6:	f9 e0       	ldi	r31, 0x09	; 9
    11e8:	80 e4       	ldi	r24, 0x40	; 64
    11ea:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    11ec:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    11ee:	be 01       	movw	r22, r28
    11f0:	6f 5f       	subi	r22, 0xFF	; 255
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	80 ea       	ldi	r24, 0xA0	; 160
    11f6:	99 e0       	ldi	r25, 0x09	; 9
    11f8:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    11fc:	8b e2       	ldi	r24, 0x2B	; 43
    11fe:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1200:	be 01       	movw	r22, r28
    1202:	6f 5f       	subi	r22, 0xFF	; 255
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	80 ea       	ldi	r24, 0xA0	; 160
    1208:	99 e0       	ldi	r25, 0x09	; 9
    120a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	e0 e6       	ldi	r30, 0x60	; 96
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1216:	e0 ea       	ldi	r30, 0xA0	; 160
    1218:	f9 e0       	ldi	r31, 0x09	; 9
    121a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    121c:	85 ff       	sbrs	r24, 5
    121e:	fd cf       	rjmp	.-6      	; 0x121a <st7565r_init+0x23e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1220:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1224:	e0 ea       	ldi	r30, 0xA0	; 160
    1226:	f9 e0       	ldi	r31, 0x09	; 9
    1228:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    122a:	86 ff       	sbrs	r24, 6
    122c:	fd cf       	rjmp	.-6      	; 0x1228 <st7565r_init+0x24c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    122e:	e0 ea       	ldi	r30, 0xA0	; 160
    1230:	f9 e0       	ldi	r31, 0x09	; 9
    1232:	80 e4       	ldi	r24, 0x40	; 64
    1234:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1236:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1238:	be 01       	movw	r22, r28
    123a:	6f 5f       	subi	r22, 0xFF	; 255
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	80 ea       	ldi	r24, 0xA0	; 160
    1240:	99 e0       	ldi	r25, 0x09	; 9
    1242:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1246:	8b e2       	ldi	r24, 0x2B	; 43
    1248:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    124a:	be 01       	movw	r22, r28
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	80 ea       	ldi	r24, 0xA0	; 160
    1252:	99 e0       	ldi	r25, 0x09	; 9
    1254:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	e0 e6       	ldi	r30, 0x60	; 96
    125c:	f6 e0       	ldi	r31, 0x06	; 6
    125e:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1260:	e0 ea       	ldi	r30, 0xA0	; 160
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1266:	85 ff       	sbrs	r24, 5
    1268:	fd cf       	rjmp	.-6      	; 0x1264 <st7565r_init+0x288>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    126a:	81 e2       	ldi	r24, 0x21	; 33
    126c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1270:	e0 ea       	ldi	r30, 0xA0	; 160
    1272:	f9 e0       	ldi	r31, 0x09	; 9
    1274:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1276:	86 ff       	sbrs	r24, 6
    1278:	fd cf       	rjmp	.-6      	; 0x1274 <st7565r_init+0x298>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    127a:	e0 ea       	ldi	r30, 0xA0	; 160
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	80 e4       	ldi	r24, 0x40	; 64
    1280:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1282:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1284:	be 01       	movw	r22, r28
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	80 ea       	ldi	r24, 0xA0	; 160
    128c:	99 e0       	ldi	r25, 0x09	; 9
    128e:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1292:	8b e2       	ldi	r24, 0x2B	; 43
    1294:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1296:	be 01       	movw	r22, r28
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	80 ea       	ldi	r24, 0xA0	; 160
    129e:	99 e0       	ldi	r25, 0x09	; 9
    12a0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <usart_spi_select_device>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	e0 e6       	ldi	r30, 0x60	; 96
    12a8:	f6 e0       	ldi	r31, 0x06	; 6
    12aa:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12ac:	e0 ea       	ldi	r30, 0xA0	; 160
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12b2:	85 ff       	sbrs	r24, 5
    12b4:	fd cf       	rjmp	.-6      	; 0x12b0 <st7565r_init+0x2d4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12b6:	81 e8       	ldi	r24, 0x81	; 129
    12b8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12bc:	e0 ea       	ldi	r30, 0xA0	; 160
    12be:	f9 e0       	ldi	r31, 0x09	; 9
    12c0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12c2:	86 ff       	sbrs	r24, 6
    12c4:	fd cf       	rjmp	.-6      	; 0x12c0 <st7565r_init+0x2e4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12c6:	e0 ea       	ldi	r30, 0xA0	; 160
    12c8:	f9 e0       	ldi	r31, 0x09	; 9
    12ca:	80 e4       	ldi	r24, 0x40	; 64
    12cc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12ce:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    12d0:	be 01       	movw	r22, r28
    12d2:	6f 5f       	subi	r22, 0xFF	; 255
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	80 ea       	ldi	r24, 0xA0	; 160
    12d8:	99 e0       	ldi	r25, 0x09	; 9
    12da:	0e 94 84 11 	call	0x2308	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    12de:	8b e2       	ldi	r24, 0x2B	; 43
    12e0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    12e2:	be 01       	movw	r22, r28
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	80 ea       	ldi	r24, 0xA0	; 160
    12ea:	99 e0       	ldi	r25, 0x09	; 9
    12ec:	f7 d7       	rcall	.+4078   	; 0x22dc <usart_spi_select_device>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	e0 e6       	ldi	r30, 0x60	; 96
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12f6:	e0 ea       	ldi	r30, 0xA0	; 160
    12f8:	f9 e0       	ldi	r31, 0x09	; 9
    12fa:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12fc:	85 ff       	sbrs	r24, 5
    12fe:	fd cf       	rjmp	.-6      	; 0x12fa <st7565r_init+0x31e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1300:	81 e2       	ldi	r24, 0x21	; 33
    1302:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1306:	e0 ea       	ldi	r30, 0xA0	; 160
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    130c:	86 ff       	sbrs	r24, 6
    130e:	fd cf       	rjmp	.-6      	; 0x130a <st7565r_init+0x32e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1310:	e0 ea       	ldi	r30, 0xA0	; 160
    1312:	f9 e0       	ldi	r31, 0x09	; 9
    1314:	80 e4       	ldi	r24, 0x40	; 64
    1316:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1318:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    131a:	be 01       	movw	r22, r28
    131c:	6f 5f       	subi	r22, 0xFF	; 255
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	80 ea       	ldi	r24, 0xA0	; 160
    1322:	99 e0       	ldi	r25, 0x09	; 9
    1324:	f1 d7       	rcall	.+4066   	; 0x2308 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1326:	8b e2       	ldi	r24, 0x2B	; 43
    1328:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    132a:	be 01       	movw	r22, r28
    132c:	6f 5f       	subi	r22, 0xFF	; 255
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	80 ea       	ldi	r24, 0xA0	; 160
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	d3 d7       	rcall	.+4006   	; 0x22dc <usart_spi_select_device>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	e0 e6       	ldi	r30, 0x60	; 96
    133a:	f6 e0       	ldi	r31, 0x06	; 6
    133c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    133e:	e0 ea       	ldi	r30, 0xA0	; 160
    1340:	f9 e0       	ldi	r31, 0x09	; 9
    1342:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1344:	85 ff       	sbrs	r24, 5
    1346:	fd cf       	rjmp	.-6      	; 0x1342 <st7565r_init+0x366>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1348:	8f ea       	ldi	r24, 0xAF	; 175
    134a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    134e:	e0 ea       	ldi	r30, 0xA0	; 160
    1350:	f9 e0       	ldi	r31, 0x09	; 9
    1352:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1354:	86 ff       	sbrs	r24, 6
    1356:	fd cf       	rjmp	.-6      	; 0x1352 <st7565r_init+0x376>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1358:	e0 ea       	ldi	r30, 0xA0	; 160
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	80 e4       	ldi	r24, 0x40	; 64
    135e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1360:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1362:	be 01       	movw	r22, r28
    1364:	6f 5f       	subi	r22, 0xFF	; 255
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	80 ea       	ldi	r24, 0xA0	; 160
    136a:	99 e0       	ldi	r25, 0x09	; 9
    136c:	cd d7       	rcall	.+3994   	; 0x2308 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	08 95       	ret

00001384 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
    1384:	ff 92       	push	r15
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	1f 92       	push	r1
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	f8 2e       	mov	r15, r24
    1396:	06 2f       	mov	r16, r22
    1398:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
    139a:	d1 d7       	rcall	.+4002   	; 0x233e <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    139c:	8f 2d       	mov	r24, r15
    139e:	8f 70       	andi	r24, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    13a0:	80 6b       	ori	r24, 0xB0	; 176
    13a2:	f8 2e       	mov	r15, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    13a4:	8b e2       	ldi	r24, 0x2B	; 43
    13a6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	80 ea       	ldi	r24, 0xA0	; 160
    13b0:	99 e0       	ldi	r25, 0x09	; 9
    13b2:	94 d7       	rcall	.+3880   	; 0x22dc <usart_spi_select_device>
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	e0 e6       	ldi	r30, 0x60	; 96
    13b8:	f6 e0       	ldi	r31, 0x06	; 6
    13ba:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13bc:	e0 ea       	ldi	r30, 0xA0	; 160
    13be:	f9 e0       	ldi	r31, 0x09	; 9
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13c2:	95 ff       	sbrs	r25, 5
    13c4:	fd cf       	rjmp	.-6      	; 0x13c0 <gfx_mono_st7565r_put_byte+0x3c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13c6:	f0 92 a0 09 	sts	0x09A0, r15
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13ca:	e0 ea       	ldi	r30, 0xA0	; 160
    13cc:	f9 e0       	ldi	r31, 0x09	; 9
    13ce:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13d0:	86 ff       	sbrs	r24, 6
    13d2:	fd cf       	rjmp	.-6      	; 0x13ce <gfx_mono_st7565r_put_byte+0x4a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13d4:	e0 ea       	ldi	r30, 0xA0	; 160
    13d6:	f9 e0       	ldi	r31, 0x09	; 9
    13d8:	80 e4       	ldi	r24, 0x40	; 64
    13da:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13dc:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13de:	be 01       	movw	r22, r28
    13e0:	6f 5f       	subi	r22, 0xFF	; 255
    13e2:	7f 4f       	sbci	r23, 0xFF	; 255
    13e4:	80 ea       	ldi	r24, 0xA0	; 160
    13e6:	99 e0       	ldi	r25, 0x09	; 9
    13e8:	8f d7       	rcall	.+3870   	; 0x2308 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
    13ea:	80 2f       	mov	r24, r16
    13ec:	8f 77       	andi	r24, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    13ee:	82 95       	swap	r24
    13f0:	8f 70       	andi	r24, 0x0F	; 15
    13f2:	80 61       	ori	r24, 0x10	; 16
    13f4:	f8 2e       	mov	r15, r24
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    13f6:	8b e2       	ldi	r24, 0x2B	; 43
    13f8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    13fa:	be 01       	movw	r22, r28
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	80 ea       	ldi	r24, 0xA0	; 160
    1402:	99 e0       	ldi	r25, 0x09	; 9
    1404:	6b d7       	rcall	.+3798   	; 0x22dc <usart_spi_select_device>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	e0 e6       	ldi	r30, 0x60	; 96
    140a:	f6 e0       	ldi	r31, 0x06	; 6
    140c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    140e:	e0 ea       	ldi	r30, 0xA0	; 160
    1410:	f9 e0       	ldi	r31, 0x09	; 9
    1412:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1414:	85 ff       	sbrs	r24, 5
    1416:	fd cf       	rjmp	.-6      	; 0x1412 <gfx_mono_st7565r_put_byte+0x8e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1418:	f0 92 a0 09 	sts	0x09A0, r15
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    141c:	e0 ea       	ldi	r30, 0xA0	; 160
    141e:	f9 e0       	ldi	r31, 0x09	; 9
    1420:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1422:	86 ff       	sbrs	r24, 6
    1424:	fd cf       	rjmp	.-6      	; 0x1420 <gfx_mono_st7565r_put_byte+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1426:	e0 ea       	ldi	r30, 0xA0	; 160
    1428:	f9 e0       	ldi	r31, 0x09	; 9
    142a:	80 e4       	ldi	r24, 0x40	; 64
    142c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    142e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1430:	be 01       	movw	r22, r28
    1432:	6f 5f       	subi	r22, 0xFF	; 255
    1434:	7f 4f       	sbci	r23, 0xFF	; 255
    1436:	80 ea       	ldi	r24, 0xA0	; 160
    1438:	99 e0       	ldi	r25, 0x09	; 9
    143a:	66 d7       	rcall	.+3788   	; 0x2308 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    143c:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    143e:	8b e2       	ldi	r24, 0x2B	; 43
    1440:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1442:	be 01       	movw	r22, r28
    1444:	6f 5f       	subi	r22, 0xFF	; 255
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	80 ea       	ldi	r24, 0xA0	; 160
    144a:	99 e0       	ldi	r25, 0x09	; 9
    144c:	47 d7       	rcall	.+3726   	; 0x22dc <usart_spi_select_device>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	e0 e6       	ldi	r30, 0x60	; 96
    1452:	f6 e0       	ldi	r31, 0x06	; 6
    1454:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1456:	e0 ea       	ldi	r30, 0xA0	; 160
    1458:	f9 e0       	ldi	r31, 0x09	; 9
    145a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    145c:	85 ff       	sbrs	r24, 5
    145e:	fd cf       	rjmp	.-6      	; 0x145a <gfx_mono_st7565r_put_byte+0xd6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1460:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1464:	e0 ea       	ldi	r30, 0xA0	; 160
    1466:	f9 e0       	ldi	r31, 0x09	; 9
    1468:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    146a:	86 ff       	sbrs	r24, 6
    146c:	fd cf       	rjmp	.-6      	; 0x1468 <gfx_mono_st7565r_put_byte+0xe4>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    146e:	e0 ea       	ldi	r30, 0xA0	; 160
    1470:	f9 e0       	ldi	r31, 0x09	; 9
    1472:	80 e4       	ldi	r24, 0x40	; 64
    1474:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1476:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1478:	be 01       	movw	r22, r28
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	80 ea       	ldi	r24, 0xA0	; 160
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	42 d7       	rcall	.+3716   	; 0x2308 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1484:	8b e2       	ldi	r24, 0x2B	; 43
    1486:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1488:	be 01       	movw	r22, r28
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	80 ea       	ldi	r24, 0xA0	; 160
    1490:	99 e0       	ldi	r25, 0x09	; 9
    1492:	24 d7       	rcall	.+3656   	; 0x22dc <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	e0 e6       	ldi	r30, 0x60	; 96
    1498:	f6 e0       	ldi	r31, 0x06	; 6
    149a:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    149c:	e0 ea       	ldi	r30, 0xA0	; 160
    149e:	f9 e0       	ldi	r31, 0x09	; 9
    14a0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14a2:	85 ff       	sbrs	r24, 5
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <gfx_mono_st7565r_put_byte+0x11c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14a6:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14aa:	e0 ea       	ldi	r30, 0xA0	; 160
    14ac:	f9 e0       	ldi	r31, 0x09	; 9
    14ae:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    14b0:	86 ff       	sbrs	r24, 6
    14b2:	fd cf       	rjmp	.-6      	; 0x14ae <gfx_mono_st7565r_put_byte+0x12a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    14b4:	e0 ea       	ldi	r30, 0xA0	; 160
    14b6:	f9 e0       	ldi	r31, 0x09	; 9
    14b8:	80 e4       	ldi	r24, 0x40	; 64
    14ba:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    14bc:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	e0 e6       	ldi	r30, 0x60	; 96
    14c2:	f6 e0       	ldi	r31, 0x06	; 6
    14c4:	86 83       	std	Z+6, r24	; 0x06
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    14c6:	be 01       	movw	r22, r28
    14c8:	6f 5f       	subi	r22, 0xFF	; 255
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	80 ea       	ldi	r24, 0xA0	; 160
    14ce:	99 e0       	ldi	r25, 0x09	; 9
    14d0:	1b d7       	rcall	.+3638   	; 0x2308 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
    14d2:	0f 90       	pop	r0
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	08 95       	ret

000014e0 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	1f 92       	push	r1
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    14ee:	89 e8       	ldi	r24, 0x89	; 137
    14f0:	91 e2       	ldi	r25, 0x21	; 33
    14f2:	20 d7       	rcall	.+3648   	; 0x2334 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
    14f4:	73 dd       	rcall	.-1306   	; 0xfdc <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    14f6:	8b e2       	ldi	r24, 0x2B	; 43
    14f8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    14fa:	be 01       	movw	r22, r28
    14fc:	6f 5f       	subi	r22, 0xFF	; 255
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	80 ea       	ldi	r24, 0xA0	; 160
    1502:	99 e0       	ldi	r25, 0x09	; 9
    1504:	eb d6       	rcall	.+3542   	; 0x22dc <usart_spi_select_device>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	e0 e6       	ldi	r30, 0x60	; 96
    150a:	f6 e0       	ldi	r31, 0x06	; 6
    150c:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    150e:	e0 ea       	ldi	r30, 0xA0	; 160
    1510:	f9 e0       	ldi	r31, 0x09	; 9
    1512:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1514:	85 ff       	sbrs	r24, 5
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <gfx_mono_st7565r_init+0x32>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1518:	80 e4       	ldi	r24, 0x40	; 64
    151a:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    151e:	e0 ea       	ldi	r30, 0xA0	; 160
    1520:	f9 e0       	ldi	r31, 0x09	; 9
    1522:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1524:	86 ff       	sbrs	r24, 6
    1526:	fd cf       	rjmp	.-6      	; 0x1522 <gfx_mono_st7565r_init+0x42>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1528:	e0 ea       	ldi	r30, 0xA0	; 160
    152a:	f9 e0       	ldi	r31, 0x09	; 9
    152c:	80 e4       	ldi	r24, 0x40	; 64
    152e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1530:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1532:	be 01       	movw	r22, r28
    1534:	6f 5f       	subi	r22, 0xFF	; 255
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	80 ea       	ldi	r24, 0xA0	; 160
    153a:	99 e0       	ldi	r25, 0x09	; 9
    153c:	e5 d6       	rcall	.+3530   	; 0x2308 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <gfx_mono_st7565r_init+0x76>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	61 2f       	mov	r22, r17
    1546:	80 2f       	mov	r24, r16
    1548:	1d df       	rcall	.-454    	; 0x1384 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    154a:	1f 5f       	subi	r17, 0xFF	; 255
    154c:	10 38       	cpi	r17, 0x80	; 128
    154e:	c9 f7       	brne	.-14     	; 0x1542 <gfx_mono_st7565r_init+0x62>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	04 30       	cpi	r16, 0x04	; 4
    1554:	11 f0       	breq	.+4      	; 0x155a <gfx_mono_st7565r_init+0x7a>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	f4 cf       	rjmp	.-24     	; 0x1542 <gfx_mono_st7565r_init+0x62>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
    155a:	0f 90       	pop	r0
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	18 2f       	mov	r17, r24
    1572:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    1574:	88 23       	and	r24, r24
    1576:	74 f1       	brlt	.+92     	; 0x15d4 <gfx_mono_st7565r_draw_pixel+0x6e>
    1578:	60 32       	cpi	r22, 0x20	; 32
    157a:	60 f5       	brcc	.+88     	; 0x15d4 <gfx_mono_st7565r_draw_pixel+0x6e>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    157c:	f6 2e       	mov	r15, r22
    157e:	f6 94       	lsr	r15
    1580:	f6 94       	lsr	r15
    1582:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    1584:	2f 2d       	mov	r18, r15
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	31 95       	neg	r19
    158a:	21 95       	neg	r18
    158c:	31 09       	sbc	r19, r1
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	26 0f       	add	r18, r22
    159c:	31 1d       	adc	r19, r1
    159e:	e1 e0       	ldi	r30, 0x01	; 1
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	ef 01       	movw	r28, r30
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <gfx_mono_st7565r_draw_pixel+0x44>
    15a6:	cc 0f       	add	r28, r28
    15a8:	dd 1f       	adc	r29, r29
    15aa:	2a 95       	dec	r18
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    15ae:	68 2f       	mov	r22, r24
    15b0:	8f 2d       	mov	r24, r15
    15b2:	d4 d6       	rcall	.+3496   	; 0x235c <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
    15b4:	01 30       	cpi	r16, 0x01	; 1
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <gfx_mono_st7565r_draw_pixel+0x5a>
    15b8:	28 f0       	brcs	.+10     	; 0x15c4 <gfx_mono_st7565r_draw_pixel+0x5e>
    15ba:	02 30       	cpi	r16, 0x02	; 2
    15bc:	31 f0       	breq	.+12     	; 0x15ca <gfx_mono_st7565r_draw_pixel+0x64>
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <gfx_mono_st7565r_draw_pixel+0x66>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    15c0:	8c 2b       	or	r24, r28
		break;
    15c2:	04 c0       	rjmp	.+8      	; 0x15cc <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    15c4:	c0 95       	com	r28
    15c6:	8c 23       	and	r24, r28
		break;
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    15ca:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    15cc:	48 2f       	mov	r20, r24
    15ce:	61 2f       	mov	r22, r17
    15d0:	8f 2d       	mov	r24, r15
    15d2:	d8 de       	rcall	.-592    	; 0x1384 <gfx_mono_st7565r_put_byte>
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ff 90       	pop	r15
    15de:	08 95       	ret

000015e0 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    15e0:	bd c6       	rjmp	.+3450   	; 0x235c <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
    15e2:	08 95       	ret

000015e4 <tb_init>:


uint16_t qt_measurement_period_msec = 25;

void tb_init(void) {
	qt_config_data.qt_di				= DEF_QT_DI;
    15e4:	84 e0       	ldi	r24, 0x04	; 4
    15e6:	80 93 44 21 	sts	0x2144, r24
	qt_config_data.qt_neg_drift_rate	= DEF_QT_NEG_DRIFT_RATE;
    15ea:	84 e1       	ldi	r24, 0x14	; 20
    15ec:	80 93 47 21 	sts	0x2147, r24
	qt_config_data.qt_pos_drift_rate	= DEF_QT_POS_DRIFT_RATE;
    15f0:	95 e0       	ldi	r25, 0x05	; 5
    15f2:	90 93 48 21 	sts	0x2148, r25
	qt_config_data.qt_max_on_duration	= DEF_QT_MAX_ON_DURATION;
    15f6:	10 92 46 21 	sts	0x2146, r1
	qt_config_data.qt_drift_hold_time	= DEF_QT_DRIFT_HOLD_TIME;
    15fa:	80 93 45 21 	sts	0x2145, r24
	qt_config_data.qt_recal_threshold	= DEF_QT_RECAL_THRESHOLD;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 93 43 21 	sts	0x2143, r24
	qt_config_data.qt_pos_recal_delay	= DEF_QT_POS_RECAL_DELAY;
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	80 93 49 21 	sts	0x2149, r24
	qt_filter_callback					= 0;
    160a:	10 92 5d 21 	sts	0x215D, r1
    160e:	10 92 5e 21 	sts	0x215E, r1


	#ifdef QTOUCH_STUDIO_MASKS
		SNS_array[0][0] = 0x40;
    1612:	80 e4       	ldi	r24, 0x40	; 64
    1614:	80 93 81 21 	sts	0x2181, r24
		SNS_array[0][1] = 0x0;
    1618:	10 92 82 21 	sts	0x2182, r1
		SNS_array[1][0] = 0x0;
    161c:	10 92 83 21 	sts	0x2183, r1
		SNS_array[1][1] = 0x0;
    1620:	10 92 84 21 	sts	0x2184, r1

		SNSK_array[0][0] = 0x80;
    1624:	80 e8       	ldi	r24, 0x80	; 128
    1626:	80 93 85 21 	sts	0x2185, r24
		SNSK_array[0][1] = 0x0;
    162a:	10 92 86 21 	sts	0x2186, r1
		SNSK_array[1][0] = 0x0;
    162e:	10 92 87 21 	sts	0x2187, r1
		SNSK_array[1][1] = 0x0;
    1632:	10 92 88 21 	sts	0x2188, r1
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    1636:	23 e0       	ldi	r18, 0x03	; 3
    1638:	4a e0       	ldi	r20, 0x0A	; 10
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	4c d8       	rcall	.-3944   	; 0x6d8 <qt_enable_key>

	qt_init_sensing();
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	87 e8       	ldi	r24, 0x87	; 135
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	58 c9       	rjmp	.-3408   	; 0x8fa <qt_init_sensing_with_burst>
    164a:	08 95       	ret

0000164c <tb_is_touched>:
}


bool tb_is_touched(void) {
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
	
	static int16_t last = 0;
	int16_t now = getUptimeMs();
    1650:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <xTaskGetTickCount>
    1654:	ec 01       	movw	r28, r24
    1656:	cc 0f       	add	r28, r28
    1658:	dd 1f       	adc	r29, r29
	
	if(now - last >= 25) {
    165a:	80 91 89 23 	lds	r24, 0x2389
    165e:	90 91 8a 23 	lds	r25, 0x238A
    1662:	9e 01       	movw	r18, r28
    1664:	28 1b       	sub	r18, r24
    1666:	39 0b       	sbc	r19, r25
    1668:	29 31       	cpi	r18, 0x19	; 25
    166a:	31 05       	cpc	r19, r1
    166c:	5c f0       	brlt	.+22     	; 0x1684 <tb_is_touched+0x38>
		while(qt_measure_sensors(getUptimeMs()) & QTLIB_BURST_AGAIN);
    166e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <xTaskGetTickCount>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	a0 d8       	rcall	.-3776   	; 0x7b8 <qt_measure_sensors>
    1678:	90 fd       	sbrc	r25, 0
    167a:	f9 cf       	rjmp	.-14     	; 0x166e <tb_is_touched+0x22>
		last = now;
    167c:	c0 93 89 23 	sts	0x2389, r28
    1680:	d0 93 8a 23 	sts	0x238A, r29
	}
	
	if (GET_SENSOR_STATE(0)) {
    1684:	80 91 5a 21 	lds	r24, 0x215A
    1688:	80 95       	com	r24
		return 0;
	} else {
		return 1;
	}
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1
    169c:	0b b6       	in	r0, 0x3b	; 59
    169e:	0f 92       	push	r0
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    16b8:	e0 e0       	ldi	r30, 0x00	; 0
    16ba:	f2 e0       	ldi	r31, 0x02	; 2
    16bc:	44 a1       	ldd	r20, Z+36	; 0x24
    16be:	55 a1       	ldd	r21, Z+37	; 0x25
    16c0:	e0 91 b6 24 	lds	r30, 0x24B6
    16c4:	f0 91 b7 24 	lds	r31, 0x24B7
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	92 e0       	ldi	r25, 0x02	; 2
    16ce:	19 95       	eicall
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	0f 90       	pop	r0
    16f2:	1f 90       	pop	r1
    16f4:	18 95       	reti

000016f6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    16f6:	1f 92       	push	r1
    16f8:	0f 92       	push	r0
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	0f 92       	push	r0
    16fe:	11 24       	eor	r1, r1
    1700:	0b b6       	in	r0, 0x3b	; 59
    1702:	0f 92       	push	r0
    1704:	2f 93       	push	r18
    1706:	3f 93       	push	r19
    1708:	4f 93       	push	r20
    170a:	5f 93       	push	r21
    170c:	6f 93       	push	r22
    170e:	7f 93       	push	r23
    1710:	8f 93       	push	r24
    1712:	9f 93       	push	r25
    1714:	af 93       	push	r26
    1716:	bf 93       	push	r27
    1718:	ef 93       	push	r30
    171a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    171c:	e8 e2       	ldi	r30, 0x28	; 40
    171e:	f2 e0       	ldi	r31, 0x02	; 2
    1720:	44 81       	ldd	r20, Z+4	; 0x04
    1722:	55 81       	ldd	r21, Z+5	; 0x05
    1724:	e0 91 b6 24 	lds	r30, 0x24B6
    1728:	f0 91 b7 24 	lds	r31, 0x24B7
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	92 e0       	ldi	r25, 0x02	; 2
    1732:	19 95       	eicall
}
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	0f 90       	pop	r0
    1756:	1f 90       	pop	r1
    1758:	18 95       	reti

0000175a <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	0b b6       	in	r0, 0x3b	; 59
    1766:	0f 92       	push	r0
    1768:	2f 93       	push	r18
    176a:	3f 93       	push	r19
    176c:	4f 93       	push	r20
    176e:	5f 93       	push	r21
    1770:	6f 93       	push	r22
    1772:	7f 93       	push	r23
    1774:	8f 93       	push	r24
    1776:	9f 93       	push	r25
    1778:	af 93       	push	r26
    177a:	bf 93       	push	r27
    177c:	ef 93       	push	r30
    177e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1780:	e0 e3       	ldi	r30, 0x30	; 48
    1782:	f2 e0       	ldi	r31, 0x02	; 2
    1784:	44 81       	ldd	r20, Z+4	; 0x04
    1786:	55 81       	ldd	r21, Z+5	; 0x05
    1788:	e0 91 b6 24 	lds	r30, 0x24B6
    178c:	f0 91 b7 24 	lds	r31, 0x24B7
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	19 95       	eicall
}
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0b be       	out	0x3b, r0	; 59
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	0b b6       	in	r0, 0x3b	; 59
    17ca:	0f 92       	push	r0
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    17e4:	e8 e3       	ldi	r30, 0x38	; 56
    17e6:	f2 e0       	ldi	r31, 0x02	; 2
    17e8:	44 81       	ldd	r20, Z+4	; 0x04
    17ea:	55 81       	ldd	r21, Z+5	; 0x05
    17ec:	e0 91 b6 24 	lds	r30, 0x24B6
    17f0:	f0 91 b7 24 	lds	r31, 0x24B7
    17f4:	68 e0       	ldi	r22, 0x08	; 8
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	19 95       	eicall
}
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0b be       	out	0x3b, r0	; 59
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	0b b6       	in	r0, 0x3b	; 59
    182e:	0f 92       	push	r0
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1848:	e0 e4       	ldi	r30, 0x40	; 64
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	44 a1       	ldd	r20, Z+36	; 0x24
    184e:	55 a1       	ldd	r21, Z+37	; 0x25
    1850:	e0 91 b4 24 	lds	r30, 0x24B4
    1854:	f0 91 b5 24 	lds	r31, 0x24B5
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	80 e4       	ldi	r24, 0x40	; 64
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	19 95       	eicall
}
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	0f 90       	pop	r0
    187a:	0b be       	out	0x3b, r0	; 59
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	0b b6       	in	r0, 0x3b	; 59
    1892:	0f 92       	push	r0
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	4f 93       	push	r20
    189a:	5f 93       	push	r21
    189c:	6f 93       	push	r22
    189e:	7f 93       	push	r23
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	af 93       	push	r26
    18a6:	bf 93       	push	r27
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    18ac:	e8 e6       	ldi	r30, 0x68	; 104
    18ae:	f2 e0       	ldi	r31, 0x02	; 2
    18b0:	44 81       	ldd	r20, Z+4	; 0x04
    18b2:	55 81       	ldd	r21, Z+5	; 0x05
    18b4:	e0 91 b4 24 	lds	r30, 0x24B4
    18b8:	f0 91 b5 24 	lds	r31, 0x24B5
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	80 e4       	ldi	r24, 0x40	; 64
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	19 95       	eicall
}
    18c4:	ff 91       	pop	r31
    18c6:	ef 91       	pop	r30
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	0f 90       	pop	r0
    18de:	0b be       	out	0x3b, r0	; 59
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1910:	e0 e7       	ldi	r30, 0x70	; 112
    1912:	f2 e0       	ldi	r31, 0x02	; 2
    1914:	44 81       	ldd	r20, Z+4	; 0x04
    1916:	55 81       	ldd	r21, Z+5	; 0x05
    1918:	e0 91 b4 24 	lds	r30, 0x24B4
    191c:	f0 91 b5 24 	lds	r31, 0x24B5
    1920:	64 e0       	ldi	r22, 0x04	; 4
    1922:	80 e4       	ldi	r24, 0x40	; 64
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	19 95       	eicall
}
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0b be       	out	0x3b, r0	; 59
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	0b b6       	in	r0, 0x3b	; 59
    195a:	0f 92       	push	r0
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	6f 93       	push	r22
    1966:	7f 93       	push	r23
    1968:	8f 93       	push	r24
    196a:	9f 93       	push	r25
    196c:	af 93       	push	r26
    196e:	bf 93       	push	r27
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1974:	e8 e7       	ldi	r30, 0x78	; 120
    1976:	f2 e0       	ldi	r31, 0x02	; 2
    1978:	44 81       	ldd	r20, Z+4	; 0x04
    197a:	55 81       	ldd	r21, Z+5	; 0x05
    197c:	e0 91 b4 24 	lds	r30, 0x24B4
    1980:	f0 91 b5 24 	lds	r31, 0x24B5
    1984:	68 e0       	ldi	r22, 0x08	; 8
    1986:	80 e4       	ldi	r24, 0x40	; 64
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	19 95       	eicall
}
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0b be       	out	0x3b, r0	; 59
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <usart_getchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    19b2:	fc 01       	movw	r30, r24
    19b4:	81 81       	ldd	r24, Z+1	; 0x01
    19b6:	88 23       	and	r24, r24
    19b8:	ec f7       	brge	.-6      	; 0x19b4 <usart_getchar+0x2>
    19ba:	80 81       	ld	r24, Z
    19bc:	08 95       	ret

000019be <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    19be:	4f 92       	push	r4
    19c0:	5f 92       	push	r5
    19c2:	6f 92       	push	r6
    19c4:	7f 92       	push	r7
    19c6:	8f 92       	push	r8
    19c8:	9f 92       	push	r9
    19ca:	af 92       	push	r10
    19cc:	bf 92       	push	r11
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	4a 01       	movw	r8, r20
    19e2:	5b 01       	movw	r10, r22
    19e4:	28 01       	movw	r4, r16
    19e6:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    19e8:	d9 01       	movw	r26, r18
    19ea:	c8 01       	movw	r24, r16
    19ec:	68 94       	set
    19ee:	12 f8       	bld	r1, 2
    19f0:	b6 95       	lsr	r27
    19f2:	a7 95       	ror	r26
    19f4:	97 95       	ror	r25
    19f6:	87 95       	ror	r24
    19f8:	16 94       	lsr	r1
    19fa:	d1 f7       	brne	.-12     	; 0x19f0 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    19fc:	b9 01       	movw	r22, r18
    19fe:	a8 01       	movw	r20, r16
    1a00:	03 2e       	mov	r0, r19
    1a02:	36 e1       	ldi	r19, 0x16	; 22
    1a04:	76 95       	lsr	r23
    1a06:	67 95       	ror	r22
    1a08:	57 95       	ror	r21
    1a0a:	47 95       	ror	r20
    1a0c:	3a 95       	dec	r19
    1a0e:	d1 f7       	brne	.-12     	; 0x1a04 <usart_set_baudrate+0x46>
    1a10:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	22 fd       	sbrc	r18, 2
    1a16:	08 c0       	rjmp	.+16     	; 0x1a28 <usart_set_baudrate+0x6a>
		max_rate /= 2;
    1a18:	b6 95       	lsr	r27
    1a1a:	a7 95       	ror	r26
    1a1c:	97 95       	ror	r25
    1a1e:	87 95       	ror	r24
		min_rate /= 2;
    1a20:	76 95       	lsr	r23
    1a22:	67 95       	ror	r22
    1a24:	57 95       	ror	r21
    1a26:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1a28:	88 15       	cp	r24, r8
    1a2a:	99 05       	cpc	r25, r9
    1a2c:	aa 05       	cpc	r26, r10
    1a2e:	bb 05       	cpc	r27, r11
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <usart_set_baudrate+0x76>
    1a32:	a6 c0       	rjmp	.+332    	; 0x1b80 <usart_set_baudrate+0x1c2>
    1a34:	84 16       	cp	r8, r20
    1a36:	95 06       	cpc	r9, r21
    1a38:	a6 06       	cpc	r10, r22
    1a3a:	b7 06       	cpc	r11, r23
    1a3c:	08 f4       	brcc	.+2      	; 0x1a40 <usart_set_baudrate+0x82>
    1a3e:	a2 c0       	rjmp	.+324    	; 0x1b84 <usart_set_baudrate+0x1c6>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	82 fd       	sbrc	r24, 2
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <usart_set_baudrate+0x90>
		baud *= 2;
    1a46:	88 0c       	add	r8, r8
    1a48:	99 1c       	adc	r9, r9
    1a4a:	aa 1c       	adc	r10, r10
    1a4c:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1a4e:	c3 01       	movw	r24, r6
    1a50:	b2 01       	movw	r22, r4
    1a52:	a5 01       	movw	r20, r10
    1a54:	94 01       	movw	r18, r8
    1a56:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1a5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	41 05       	cpc	r20, r1
    1a60:	51 05       	cpc	r21, r1
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <usart_set_baudrate+0xa8>
    1a64:	91 c0       	rjmp	.+290    	; 0x1b88 <usart_set_baudrate+0x1ca>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    1a66:	c1 2c       	mov	r12, r1
    1a68:	d1 2c       	mov	r13, r1
    1a6a:	76 01       	movw	r14, r12
    1a6c:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1a6e:	19 ef       	ldi	r17, 0xF9	; 249
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <usart_set_baudrate+0xbe>
		if (ratio < limit) {
    1a72:	2c 15       	cp	r18, r12
    1a74:	3d 05       	cpc	r19, r13
    1a76:	4e 05       	cpc	r20, r14
    1a78:	5f 05       	cpc	r21, r15
    1a7a:	68 f0       	brcs	.+26     	; 0x1a96 <usart_set_baudrate+0xd8>
			break;
		}

		limit <<= 1;
    1a7c:	cc 0c       	add	r12, r12
    1a7e:	dd 1c       	adc	r13, r13
    1a80:	ee 1c       	adc	r14, r14
    1a82:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1a84:	1d 3f       	cpi	r17, 0xFD	; 253
    1a86:	14 f4       	brge	.+4      	; 0x1a8c <usart_set_baudrate+0xce>
			limit |= 1;
    1a88:	68 94       	set
    1a8a:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1a8c:	1f 5f       	subi	r17, 0xFF	; 255
    1a8e:	17 30       	cpi	r17, 0x07	; 7
    1a90:	81 f7       	brne	.-32     	; 0x1a72 <usart_set_baudrate+0xb4>
    1a92:	21 2f       	mov	r18, r17
    1a94:	50 c0       	rjmp	.+160    	; 0x1b36 <usart_set_baudrate+0x178>
    1a96:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1a98:	11 23       	and	r17, r17
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <usart_set_baudrate+0xe0>
    1a9c:	4c c0       	rjmp	.+152    	; 0x1b36 <usart_set_baudrate+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1a9e:	d5 01       	movw	r26, r10
    1aa0:	c4 01       	movw	r24, r8
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	bb 1f       	adc	r27, r27
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	aa 1f       	adc	r26, r26
    1ab0:	bb 1f       	adc	r27, r27
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	aa 1f       	adc	r26, r26
    1ab8:	bb 1f       	adc	r27, r27
    1aba:	48 1a       	sub	r4, r24
    1abc:	59 0a       	sbc	r5, r25
    1abe:	6a 0a       	sbc	r6, r26
    1ac0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1ac2:	1e 3f       	cpi	r17, 0xFE	; 254
    1ac4:	f4 f4       	brge	.+60     	; 0x1b02 <usart_set_baudrate+0x144>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1ac6:	6d ef       	ldi	r22, 0xFD	; 253
    1ac8:	7f ef       	ldi	r23, 0xFF	; 255
    1aca:	61 1b       	sub	r22, r17
    1acc:	71 09       	sbc	r23, r1
    1ace:	17 fd       	sbrc	r17, 7
    1ad0:	73 95       	inc	r23
    1ad2:	04 c0       	rjmp	.+8      	; 0x1adc <usart_set_baudrate+0x11e>
    1ad4:	44 0c       	add	r4, r4
    1ad6:	55 1c       	adc	r5, r5
    1ad8:	66 1c       	adc	r6, r6
    1ada:	77 1c       	adc	r7, r7
    1adc:	6a 95       	dec	r22
    1ade:	d2 f7       	brpl	.-12     	; 0x1ad4 <usart_set_baudrate+0x116>
    1ae0:	d5 01       	movw	r26, r10
    1ae2:	c4 01       	movw	r24, r8
    1ae4:	b6 95       	lsr	r27
    1ae6:	a7 95       	ror	r26
    1ae8:	97 95       	ror	r25
    1aea:	87 95       	ror	r24
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	64 0d       	add	r22, r4
    1af2:	75 1d       	adc	r23, r5
    1af4:	86 1d       	adc	r24, r6
    1af6:	97 1d       	adc	r25, r7
    1af8:	a5 01       	movw	r20, r10
    1afa:	94 01       	movw	r18, r8
    1afc:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodsi4>
    1b00:	36 c0       	rjmp	.+108    	; 0x1b6e <usart_set_baudrate+0x1b0>
		} else {
			baud <<= exp + 3;
    1b02:	23 e0       	ldi	r18, 0x03	; 3
    1b04:	21 0f       	add	r18, r17
    1b06:	d5 01       	movw	r26, r10
    1b08:	c4 01       	movw	r24, r8
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <usart_set_baudrate+0x156>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	aa 1f       	adc	r26, r26
    1b12:	bb 1f       	adc	r27, r27
    1b14:	2a 95       	dec	r18
    1b16:	d2 f7       	brpl	.-12     	; 0x1b0c <usart_set_baudrate+0x14e>
    1b18:	9c 01       	movw	r18, r24
    1b1a:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    1b1c:	b6 95       	lsr	r27
    1b1e:	a7 95       	ror	r26
    1b20:	97 95       	ror	r25
    1b22:	87 95       	ror	r24
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	64 0d       	add	r22, r4
    1b2a:	75 1d       	adc	r23, r5
    1b2c:	86 1d       	adc	r24, r6
    1b2e:	97 1d       	adc	r25, r7
    1b30:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodsi4>
    1b34:	1c c0       	rjmp	.+56     	; 0x1b6e <usart_set_baudrate+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1b36:	2d 5f       	subi	r18, 0xFD	; 253
    1b38:	d5 01       	movw	r26, r10
    1b3a:	c4 01       	movw	r24, r8
    1b3c:	04 c0       	rjmp	.+8      	; 0x1b46 <usart_set_baudrate+0x188>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	2a 95       	dec	r18
    1b48:	d2 f7       	brpl	.-12     	; 0x1b3e <usart_set_baudrate+0x180>
    1b4a:	9c 01       	movw	r18, r24
    1b4c:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    1b4e:	b6 95       	lsr	r27
    1b50:	a7 95       	ror	r26
    1b52:	97 95       	ror	r25
    1b54:	87 95       	ror	r24
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	64 0d       	add	r22, r4
    1b5c:	75 1d       	adc	r23, r5
    1b5e:	86 1d       	adc	r24, r6
    1b60:	97 1d       	adc	r25, r7
    1b62:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodsi4>
    1b66:	21 50       	subi	r18, 0x01	; 1
    1b68:	31 09       	sbc	r19, r1
    1b6a:	41 09       	sbc	r20, r1
    1b6c:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1b6e:	83 2f       	mov	r24, r19
    1b70:	8f 70       	andi	r24, 0x0F	; 15
    1b72:	12 95       	swap	r17
    1b74:	10 7f       	andi	r17, 0xF0	; 240
    1b76:	18 2b       	or	r17, r24
    1b78:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1b7a:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	18 c0       	rjmp	.+48     	; 0x1bb0 <usart_set_baudrate+0x1f2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	16 c0       	rjmp	.+44     	; 0x1bb0 <usart_set_baudrate+0x1f2>
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <usart_set_baudrate+0x1f2>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1b88:	d5 01       	movw	r26, r10
    1b8a:	c4 01       	movw	r24, r8
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	aa 1f       	adc	r26, r26
    1b92:	bb 1f       	adc	r27, r27
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	aa 1f       	adc	r26, r26
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	aa 1f       	adc	r26, r26
    1ba2:	bb 1f       	adc	r27, r27
    1ba4:	48 1a       	sub	r4, r24
    1ba6:	59 0a       	sbc	r5, r25
    1ba8:	6a 0a       	sbc	r6, r26
    1baa:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1bac:	19 ef       	ldi	r17, 0xF9	; 249
    1bae:	8b cf       	rjmp	.-234    	; 0x1ac6 <usart_set_baudrate+0x108>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	5f 90       	pop	r5
    1bce:	4f 90       	pop	r4
    1bd0:	08 95       	ret

00001bd2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
    1bdc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <usart_init_rs232+0x12>
    1be2:	03 c1       	rjmp	.+518    	; 0x1dea <usart_init_rs232+0x218>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1be4:	80 3c       	cpi	r24, 0xC0	; 192
    1be6:	91 05       	cpc	r25, r1
    1be8:	29 f4       	brne	.+10     	; 0x1bf4 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1bea:	60 e1       	ldi	r22, 0x10	; 16
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1bf2:	fb c0       	rjmp	.+502    	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1bf4:	c0 38       	cpi	r28, 0x80	; 128
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	d8 07       	cpc	r29, r24
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1bfc:	62 e0       	ldi	r22, 0x02	; 2
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c04:	f2 c0       	rjmp	.+484    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c06:	c1 15       	cp	r28, r1
    1c08:	e1 e0       	ldi	r30, 0x01	; 1
    1c0a:	de 07       	cpc	r29, r30
    1c0c:	29 f4       	brne	.+10     	; 0x1c18 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c16:	e9 c0       	rjmp	.+466    	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1c18:	c0 38       	cpi	r28, 0x80	; 128
    1c1a:	f3 e0       	ldi	r31, 0x03	; 3
    1c1c:	df 07       	cpc	r29, r31
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c28:	e0 c0       	rjmp	.+448    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1c2a:	c0 39       	cpi	r28, 0x90	; 144
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	d8 07       	cpc	r29, r24
    1c30:	29 f4       	brne	.+10     	; 0x1c3c <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c3a:	d7 c0       	rjmp	.+430    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1c3c:	c1 15       	cp	r28, r1
    1c3e:	e2 e0       	ldi	r30, 0x02	; 2
    1c40:	de 07       	cpc	r29, r30
    1c42:	29 f4       	brne	.+10     	; 0x1c4e <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1c44:	62 e0       	ldi	r22, 0x02	; 2
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c4c:	ce c0       	rjmp	.+412    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1c4e:	c0 34       	cpi	r28, 0x40	; 64
    1c50:	f2 e0       	ldi	r31, 0x02	; 2
    1c52:	df 07       	cpc	r29, r31
    1c54:	29 f4       	brne	.+10     	; 0x1c60 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1c56:	62 e0       	ldi	r22, 0x02	; 2
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c5e:	c5 c0       	rjmp	.+394    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1c60:	c0 32       	cpi	r28, 0x20	; 32
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	d8 07       	cpc	r29, r24
    1c66:	29 f4       	brne	.+10     	; 0x1c72 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1c68:	64 e0       	ldi	r22, 0x04	; 4
    1c6a:	82 e0       	ldi	r24, 0x02	; 2
    1c6c:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c70:	bc c0       	rjmp	.+376    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1c72:	c1 15       	cp	r28, r1
    1c74:	e8 e0       	ldi	r30, 0x08	; 8
    1c76:	de 07       	cpc	r29, r30
    1c78:	29 f4       	brne	.+10     	; 0x1c84 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c82:	b3 c0       	rjmp	.+358    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1c84:	c1 15       	cp	r28, r1
    1c86:	f9 e0       	ldi	r31, 0x09	; 9
    1c88:	df 07       	cpc	r29, r31
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	84 e0       	ldi	r24, 0x04	; 4
    1c90:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1c94:	aa c0       	rjmp	.+340    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1c96:	c1 15       	cp	r28, r1
    1c98:	8a e0       	ldi	r24, 0x0A	; 10
    1c9a:	d8 07       	cpc	r29, r24
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	85 e0       	ldi	r24, 0x05	; 5
    1ca2:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1ca6:	a1 c0       	rjmp	.+322    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1ca8:	c1 15       	cp	r28, r1
    1caa:	eb e0       	ldi	r30, 0x0B	; 11
    1cac:	de 07       	cpc	r29, r30
    1cae:	29 f4       	brne	.+10     	; 0x1cba <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	86 e0       	ldi	r24, 0x06	; 6
    1cb4:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1cb8:	98 c0       	rjmp	.+304    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1cba:	c0 34       	cpi	r28, 0x40	; 64
    1cbc:	f8 e0       	ldi	r31, 0x08	; 8
    1cbe:	df 07       	cpc	r29, r31
    1cc0:	29 f4       	brne	.+10     	; 0x1ccc <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1cc2:	62 e0       	ldi	r22, 0x02	; 2
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1cca:	8f c0       	rjmp	.+286    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1ccc:	c0 34       	cpi	r28, 0x40	; 64
    1cce:	89 e0       	ldi	r24, 0x09	; 9
    1cd0:	d8 07       	cpc	r29, r24
    1cd2:	29 f4       	brne	.+10     	; 0x1cde <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1cd4:	62 e0       	ldi	r22, 0x02	; 2
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1cdc:	86 c0       	rjmp	.+268    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1cde:	c0 34       	cpi	r28, 0x40	; 64
    1ce0:	ea e0       	ldi	r30, 0x0A	; 10
    1ce2:	de 07       	cpc	r29, r30
    1ce4:	29 f4       	brne	.+10     	; 0x1cf0 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1ce6:	62 e0       	ldi	r22, 0x02	; 2
    1ce8:	85 e0       	ldi	r24, 0x05	; 5
    1cea:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1cee:	7d c0       	rjmp	.+250    	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1cf0:	c0 39       	cpi	r28, 0x90	; 144
    1cf2:	f8 e0       	ldi	r31, 0x08	; 8
    1cf4:	df 07       	cpc	r29, r31
    1cf6:	29 f4       	brne	.+10     	; 0x1d02 <usart_init_rs232+0x130>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1cf8:	64 e0       	ldi	r22, 0x04	; 4
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d00:	74 c0       	rjmp	.+232    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1d02:	c0 39       	cpi	r28, 0x90	; 144
    1d04:	89 e0       	ldi	r24, 0x09	; 9
    1d06:	d8 07       	cpc	r29, r24
    1d08:	29 f4       	brne	.+10     	; 0x1d14 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1d0a:	64 e0       	ldi	r22, 0x04	; 4
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d12:	6b c0       	rjmp	.+214    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1d14:	c0 39       	cpi	r28, 0x90	; 144
    1d16:	ea e0       	ldi	r30, 0x0A	; 10
    1d18:	de 07       	cpc	r29, r30
    1d1a:	29 f4       	brne	.+10     	; 0x1d26 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	85 e0       	ldi	r24, 0x05	; 5
    1d20:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d24:	62 c0       	rjmp	.+196    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1d26:	c0 39       	cpi	r28, 0x90	; 144
    1d28:	fb e0       	ldi	r31, 0x0B	; 11
    1d2a:	df 07       	cpc	r29, r31
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1d2e:	64 e0       	ldi	r22, 0x04	; 4
    1d30:	86 e0       	ldi	r24, 0x06	; 6
    1d32:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d36:	59 c0       	rjmp	.+178    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1d38:	c0 3c       	cpi	r28, 0xC0	; 192
    1d3a:	88 e0       	ldi	r24, 0x08	; 8
    1d3c:	d8 07       	cpc	r29, r24
    1d3e:	29 f4       	brne	.+10     	; 0x1d4a <usart_init_rs232+0x178>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1d40:	68 e0       	ldi	r22, 0x08	; 8
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d48:	50 c0       	rjmp	.+160    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1d4a:	c0 3c       	cpi	r28, 0xC0	; 192
    1d4c:	e9 e0       	ldi	r30, 0x09	; 9
    1d4e:	de 07       	cpc	r29, r30
    1d50:	29 f4       	brne	.+10     	; 0x1d5c <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1d52:	68 e0       	ldi	r22, 0x08	; 8
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d5a:	47 c0       	rjmp	.+142    	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1d5c:	c0 3a       	cpi	r28, 0xA0	; 160
    1d5e:	f8 e0       	ldi	r31, 0x08	; 8
    1d60:	df 07       	cpc	r29, r31
    1d62:	29 f4       	brne	.+10     	; 0x1d6e <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1d64:	60 e1       	ldi	r22, 0x10	; 16
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d6c:	3e c0       	rjmp	.+124    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1d6e:	c0 3a       	cpi	r28, 0xA0	; 160
    1d70:	89 e0       	ldi	r24, 0x09	; 9
    1d72:	d8 07       	cpc	r29, r24
    1d74:	29 f4       	brne	.+10     	; 0x1d80 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1d76:	60 e1       	ldi	r22, 0x10	; 16
    1d78:	84 e0       	ldi	r24, 0x04	; 4
    1d7a:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d7e:	35 c0       	rjmp	.+106    	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1d80:	c0 3a       	cpi	r28, 0xA0	; 160
    1d82:	ea e0       	ldi	r30, 0x0A	; 10
    1d84:	de 07       	cpc	r29, r30
    1d86:	29 f4       	brne	.+10     	; 0x1d92 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1d88:	60 e1       	ldi	r22, 0x10	; 16
    1d8a:	85 e0       	ldi	r24, 0x05	; 5
    1d8c:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1d90:	2c c0       	rjmp	.+88     	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1d92:	c0 3a       	cpi	r28, 0xA0	; 160
    1d94:	fb e0       	ldi	r31, 0x0B	; 11
    1d96:	df 07       	cpc	r29, r31
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1d9a:	60 e1       	ldi	r22, 0x10	; 16
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1da2:	23 c0       	rjmp	.+70     	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1da4:	c0 3b       	cpi	r28, 0xB0	; 176
    1da6:	88 e0       	ldi	r24, 0x08	; 8
    1da8:	d8 07       	cpc	r29, r24
    1daa:	29 f4       	brne	.+10     	; 0x1db6 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1dac:	60 e2       	ldi	r22, 0x20	; 32
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1db4:	1a c0       	rjmp	.+52     	; 0x1dea <usart_init_rs232+0x218>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1db6:	c0 3b       	cpi	r28, 0xB0	; 176
    1db8:	e9 e0       	ldi	r30, 0x09	; 9
    1dba:	de 07       	cpc	r29, r30
    1dbc:	29 f4       	brne	.+10     	; 0x1dc8 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1dbe:	60 e2       	ldi	r22, 0x20	; 32
    1dc0:	84 e0       	ldi	r24, 0x04	; 4
    1dc2:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1dc6:	11 c0       	rjmp	.+34     	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1dc8:	c0 38       	cpi	r28, 0x80	; 128
    1dca:	f4 e0       	ldi	r31, 0x04	; 4
    1dcc:	df 07       	cpc	r29, r31
    1dce:	29 f4       	brne	.+10     	; 0x1dda <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1dd0:	60 e4       	ldi	r22, 0x40	; 64
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1dd8:	08 c0       	rjmp	.+16     	; 0x1dea <usart_init_rs232+0x218>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1dda:	c0 3a       	cpi	r28, 0xA0	; 160
    1ddc:	84 e0       	ldi	r24, 0x04	; 4
    1dde:	d8 07       	cpc	r29, r24
    1de0:	21 f4       	brne	.+8      	; 0x1dea <usart_init_rs232+0x218>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1de2:	60 e4       	ldi	r22, 0x40	; 64
    1de4:	85 e0       	ldi	r24, 0x05	; 5
    1de6:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	8f 73       	andi	r24, 0x3F	; 63
    1dee:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1df0:	f8 01       	movw	r30, r16
    1df2:	94 81       	ldd	r25, Z+4	; 0x04
    1df4:	85 81       	ldd	r24, Z+5	; 0x05
    1df6:	89 2b       	or	r24, r25
    1df8:	96 81       	ldd	r25, Z+6	; 0x06
    1dfa:	99 23       	and	r25, r25
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <usart_init_rs232+0x230>
    1dfe:	98 e0       	ldi	r25, 0x08	; 8
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <usart_init_rs232+0x232>
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	89 2b       	or	r24, r25
    1e06:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1e08:	f8 01       	movw	r30, r16
    1e0a:	40 81       	ld	r20, Z
    1e0c:	51 81       	ldd	r21, Z+1	; 0x01
    1e0e:	62 81       	ldd	r22, Z+2	; 0x02
    1e10:	73 81       	ldd	r23, Z+3	; 0x03
    1e12:	00 e8       	ldi	r16, 0x80	; 128
    1e14:	14 e8       	ldi	r17, 0x84	; 132
    1e16:	2e e1       	ldi	r18, 0x1E	; 30
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	d0 dd       	rcall	.-1120   	; 0x19be <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	98 60       	ori	r25, 0x08	; 8
    1e22:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	90 61       	ori	r25, 0x10	; 16
    1e28:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1e34:	cf 92       	push	r12
    1e36:	df 92       	push	r13
    1e38:	ef 92       	push	r14
    1e3a:	ff 92       	push	r15
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1e46:	68 01       	movw	r12, r16
    1e48:	79 01       	movw	r14, r18
    1e4a:	f6 94       	lsr	r15
    1e4c:	e7 94       	ror	r14
    1e4e:	d7 94       	ror	r13
    1e50:	c7 94       	ror	r12
    1e52:	4c 15       	cp	r20, r12
    1e54:	5d 05       	cpc	r21, r13
    1e56:	6e 05       	cpc	r22, r14
    1e58:	7f 05       	cpc	r23, r15
    1e5a:	78 f4       	brcc	.+30     	; 0x1e7a <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1e5c:	6a 01       	movw	r12, r20
    1e5e:	7b 01       	movw	r14, r22
    1e60:	cc 0c       	add	r12, r12
    1e62:	dd 1c       	adc	r13, r13
    1e64:	ee 1c       	adc	r14, r14
    1e66:	ff 1c       	adc	r15, r15
    1e68:	c9 01       	movw	r24, r18
    1e6a:	b8 01       	movw	r22, r16
    1e6c:	a7 01       	movw	r20, r14
    1e6e:	96 01       	movw	r18, r12
    1e70:	0e 94 9a 1c 	call	0x3934	; 0x3934 <__udivmodsi4>
    1e74:	21 50       	subi	r18, 0x01	; 1
    1e76:	31 09       	sbc	r19, r1
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1e7e:	83 2f       	mov	r24, r19
    1e80:	8f 70       	andi	r24, 0x0F	; 15
    1e82:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1e84:	2e 83       	std	Y+6, r18	; 0x06
}
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	08 95       	ret

00001e98 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	ec 01       	movw	r28, r24
    1ea4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <usart_init_spi+0x14>
    1eaa:	b2 c1       	rjmp	.+868    	; 0x2210 <usart_init_spi+0x378>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1eac:	80 3c       	cpi	r24, 0xC0	; 192
    1eae:	91 05       	cpc	r25, r1
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <usart_init_spi+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1eb2:	60 e1       	ldi	r22, 0x10	; 16
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1eba:	aa c1       	rjmp	.+852    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1ebc:	80 38       	cpi	r24, 0x80	; 128
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	92 07       	cpc	r25, r18
    1ec2:	29 f4       	brne	.+10     	; 0x1ece <usart_init_spi+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1ec4:	62 e0       	ldi	r22, 0x02	; 2
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1ecc:	a1 c1       	rjmp	.+834    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1ece:	c1 15       	cp	r28, r1
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	d8 07       	cpc	r29, r24
    1ed4:	29 f4       	brne	.+10     	; 0x1ee0 <usart_init_spi+0x48>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1ede:	98 c1       	rjmp	.+816    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ee0:	c0 38       	cpi	r28, 0x80	; 128
    1ee2:	e3 e0       	ldi	r30, 0x03	; 3
    1ee4:	de 07       	cpc	r29, r30
    1ee6:	29 f4       	brne	.+10     	; 0x1ef2 <usart_init_spi+0x5a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1ef0:	8f c1       	rjmp	.+798    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1ef2:	c0 39       	cpi	r28, 0x90	; 144
    1ef4:	f3 e0       	ldi	r31, 0x03	; 3
    1ef6:	df 07       	cpc	r29, r31
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <usart_init_spi+0x6c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f02:	86 c1       	rjmp	.+780    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1f04:	c1 15       	cp	r28, r1
    1f06:	22 e0       	ldi	r18, 0x02	; 2
    1f08:	d2 07       	cpc	r29, r18
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <usart_init_spi+0x7e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f14:	7d c1       	rjmp	.+762    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1f16:	c0 34       	cpi	r28, 0x40	; 64
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	d8 07       	cpc	r29, r24
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <usart_init_spi+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f26:	74 c1       	rjmp	.+744    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1f28:	c0 32       	cpi	r28, 0x20	; 32
    1f2a:	e3 e0       	ldi	r30, 0x03	; 3
    1f2c:	de 07       	cpc	r29, r30
    1f2e:	29 f4       	brne	.+10     	; 0x1f3a <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1f30:	64 e0       	ldi	r22, 0x04	; 4
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f38:	6b c1       	rjmp	.+726    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1f3a:	c1 15       	cp	r28, r1
    1f3c:	f8 e0       	ldi	r31, 0x08	; 8
    1f3e:	df 07       	cpc	r29, r31
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <usart_init_spi+0xb4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1f42:	61 e0       	ldi	r22, 0x01	; 1
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f4a:	62 c1       	rjmp	.+708    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1f4c:	c1 15       	cp	r28, r1
    1f4e:	29 e0       	ldi	r18, 0x09	; 9
    1f50:	d2 07       	cpc	r29, r18
    1f52:	29 f4       	brne	.+10     	; 0x1f5e <usart_init_spi+0xc6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	84 e0       	ldi	r24, 0x04	; 4
    1f58:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f5c:	59 c1       	rjmp	.+690    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1f5e:	c1 15       	cp	r28, r1
    1f60:	8a e0       	ldi	r24, 0x0A	; 10
    1f62:	d8 07       	cpc	r29, r24
    1f64:	29 f4       	brne	.+10     	; 0x1f70 <usart_init_spi+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	85 e0       	ldi	r24, 0x05	; 5
    1f6a:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f6e:	50 c1       	rjmp	.+672    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1f70:	c1 15       	cp	r28, r1
    1f72:	eb e0       	ldi	r30, 0x0B	; 11
    1f74:	de 07       	cpc	r29, r30
    1f76:	29 f4       	brne	.+10     	; 0x1f82 <usart_init_spi+0xea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	86 e0       	ldi	r24, 0x06	; 6
    1f7c:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f80:	47 c1       	rjmp	.+654    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1f82:	c0 34       	cpi	r28, 0x40	; 64
    1f84:	f8 e0       	ldi	r31, 0x08	; 8
    1f86:	df 07       	cpc	r29, r31
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <usart_init_spi+0xfc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1f8a:	62 e0       	ldi	r22, 0x02	; 2
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1f92:	3e c1       	rjmp	.+636    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1f94:	c0 34       	cpi	r28, 0x40	; 64
    1f96:	29 e0       	ldi	r18, 0x09	; 9
    1f98:	d2 07       	cpc	r29, r18
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <usart_init_spi+0x10e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	84 e0       	ldi	r24, 0x04	; 4
    1fa0:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1fa4:	35 c1       	rjmp	.+618    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1fa6:	c0 34       	cpi	r28, 0x40	; 64
    1fa8:	8a e0       	ldi	r24, 0x0A	; 10
    1faa:	d8 07       	cpc	r29, r24
    1fac:	29 f4       	brne	.+10     	; 0x1fb8 <usart_init_spi+0x120>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1fae:	62 e0       	ldi	r22, 0x02	; 2
    1fb0:	85 e0       	ldi	r24, 0x05	; 5
    1fb2:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1fb6:	2c c1       	rjmp	.+600    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1fb8:	c0 39       	cpi	r28, 0x90	; 144
    1fba:	e8 e0       	ldi	r30, 0x08	; 8
    1fbc:	de 07       	cpc	r29, r30
    1fbe:	29 f4       	brne	.+10     	; 0x1fca <usart_init_spi+0x132>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1fc0:	64 e0       	ldi	r22, 0x04	; 4
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1fc8:	23 c1       	rjmp	.+582    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1fca:	c0 39       	cpi	r28, 0x90	; 144
    1fcc:	f9 e0       	ldi	r31, 0x09	; 9
    1fce:	df 07       	cpc	r29, r31
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <usart_init_spi+0x144>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1fd2:	64 e0       	ldi	r22, 0x04	; 4
    1fd4:	84 e0       	ldi	r24, 0x04	; 4
    1fd6:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1fda:	1a c1       	rjmp	.+564    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1fdc:	c0 39       	cpi	r28, 0x90	; 144
    1fde:	2a e0       	ldi	r18, 0x0A	; 10
    1fe0:	d2 07       	cpc	r29, r18
    1fe2:	29 f4       	brne	.+10     	; 0x1fee <usart_init_spi+0x156>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1fe4:	64 e0       	ldi	r22, 0x04	; 4
    1fe6:	85 e0       	ldi	r24, 0x05	; 5
    1fe8:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1fec:	11 c1       	rjmp	.+546    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1fee:	c0 39       	cpi	r28, 0x90	; 144
    1ff0:	8b e0       	ldi	r24, 0x0B	; 11
    1ff2:	d8 07       	cpc	r29, r24
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <usart_init_spi+0x168>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1ff6:	64 e0       	ldi	r22, 0x04	; 4
    1ff8:	86 e0       	ldi	r24, 0x06	; 6
    1ffa:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    1ffe:	08 c1       	rjmp	.+528    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2000:	c0 3c       	cpi	r28, 0xC0	; 192
    2002:	e8 e0       	ldi	r30, 0x08	; 8
    2004:	de 07       	cpc	r29, r30
    2006:	29 f4       	brne	.+10     	; 0x2012 <usart_init_spi+0x17a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2008:	68 e0       	ldi	r22, 0x08	; 8
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    2010:	ff c0       	rjmp	.+510    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2012:	c0 3c       	cpi	r28, 0xC0	; 192
    2014:	f9 e0       	ldi	r31, 0x09	; 9
    2016:	df 07       	cpc	r29, r31
    2018:	29 f4       	brne	.+10     	; 0x2024 <usart_init_spi+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    201a:	68 e0       	ldi	r22, 0x08	; 8
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    2022:	f6 c0       	rjmp	.+492    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2024:	c0 3a       	cpi	r28, 0xA0	; 160
    2026:	28 e0       	ldi	r18, 0x08	; 8
    2028:	d2 07       	cpc	r29, r18
    202a:	79 f4       	brne	.+30     	; 0x204a <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    202c:	60 e1       	ldi	r22, 0x10	; 16
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2034:	e0 ea       	ldi	r30, 0xA0	; 160
    2036:	f8 e0       	ldi	r31, 0x08	; 8
    2038:	84 81       	ldd	r24, Z+4	; 0x04
    203a:	8f 7e       	andi	r24, 0xEF	; 239
    203c:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    203e:	f8 01       	movw	r30, r16
    2040:	34 81       	ldd	r19, Z+4	; 0x04
    2042:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2044:	80 ea       	ldi	r24, 0xA0	; 160
    2046:	98 e0       	ldi	r25, 0x08	; 8
    2048:	44 c0       	rjmp	.+136    	; 0x20d2 <usart_init_spi+0x23a>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    204a:	c0 3a       	cpi	r28, 0xA0	; 160
    204c:	f9 e0       	ldi	r31, 0x09	; 9
    204e:	df 07       	cpc	r29, r31
    2050:	29 f4       	brne	.+10     	; 0x205c <usart_init_spi+0x1c4>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2052:	60 e1       	ldi	r22, 0x10	; 16
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	0e 94 33 18 	call	0x3066	; 0x3066 <sysclk_enable_module>
    205a:	da c0       	rjmp	.+436    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    205c:	c0 3a       	cpi	r28, 0xA0	; 160
    205e:	2a e0       	ldi	r18, 0x0A	; 10
    2060:	d2 07       	cpc	r29, r18
    2062:	21 f4       	brne	.+8      	; 0x206c <usart_init_spi+0x1d4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2064:	60 e1       	ldi	r22, 0x10	; 16
    2066:	85 e0       	ldi	r24, 0x05	; 5
    2068:	fe d7       	rcall	.+4092   	; 0x3066 <sysclk_enable_module>
    206a:	d2 c0       	rjmp	.+420    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    206c:	c0 3a       	cpi	r28, 0xA0	; 160
    206e:	8b e0       	ldi	r24, 0x0B	; 11
    2070:	d8 07       	cpc	r29, r24
    2072:	21 f4       	brne	.+8      	; 0x207c <usart_init_spi+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2074:	60 e1       	ldi	r22, 0x10	; 16
    2076:	86 e0       	ldi	r24, 0x06	; 6
    2078:	f6 d7       	rcall	.+4076   	; 0x3066 <sysclk_enable_module>
    207a:	ca c0       	rjmp	.+404    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    207c:	c0 3b       	cpi	r28, 0xB0	; 176
    207e:	e8 e0       	ldi	r30, 0x08	; 8
    2080:	de 07       	cpc	r29, r30
    2082:	21 f4       	brne	.+8      	; 0x208c <usart_init_spi+0x1f4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2084:	60 e2       	ldi	r22, 0x20	; 32
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	ee d7       	rcall	.+4060   	; 0x3066 <sysclk_enable_module>
    208a:	c2 c0       	rjmp	.+388    	; 0x2210 <usart_init_spi+0x378>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    208c:	c0 3b       	cpi	r28, 0xB0	; 176
    208e:	f9 e0       	ldi	r31, 0x09	; 9
    2090:	df 07       	cpc	r29, r31
    2092:	21 f4       	brne	.+8      	; 0x209c <usart_init_spi+0x204>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2094:	60 e2       	ldi	r22, 0x20	; 32
    2096:	84 e0       	ldi	r24, 0x04	; 4
    2098:	e6 d7       	rcall	.+4044   	; 0x3066 <sysclk_enable_module>
    209a:	ba c0       	rjmp	.+372    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    209c:	c0 38       	cpi	r28, 0x80	; 128
    209e:	24 e0       	ldi	r18, 0x04	; 4
    20a0:	d2 07       	cpc	r29, r18
    20a2:	21 f4       	brne	.+8      	; 0x20ac <usart_init_spi+0x214>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    20a4:	60 e4       	ldi	r22, 0x40	; 64
    20a6:	83 e0       	ldi	r24, 0x03	; 3
    20a8:	de d7       	rcall	.+4028   	; 0x3066 <sysclk_enable_module>
    20aa:	b2 c0       	rjmp	.+356    	; 0x2210 <usart_init_spi+0x378>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    20ac:	c0 3a       	cpi	r28, 0xA0	; 160
    20ae:	84 e0       	ldi	r24, 0x04	; 4
    20b0:	d8 07       	cpc	r29, r24
    20b2:	21 f4       	brne	.+8      	; 0x20bc <usart_init_spi+0x224>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    20b4:	60 e4       	ldi	r22, 0x40	; 64
    20b6:	85 e0       	ldi	r24, 0x05	; 5
    20b8:	d6 d7       	rcall	.+4012   	; 0x3066 <sysclk_enable_module>
    20ba:	aa c0       	rjmp	.+340    	; 0x2210 <usart_init_spi+0x378>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	8f 7e       	andi	r24, 0xEF	; 239
    20c0:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    20c2:	fb 01       	movw	r30, r22
    20c4:	34 81       	ldd	r19, Z+4	; 0x04
    20c6:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    20c8:	ce 01       	movw	r24, r28
    20ca:	c0 3a       	cpi	r28, 0xA0	; 160
    20cc:	f8 e0       	ldi	r31, 0x08	; 8
    20ce:	df 07       	cpc	r29, r31
    20d0:	51 f4       	brne	.+20     	; 0x20e6 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    20d2:	e0 e4       	ldi	r30, 0x40	; 64
    20d4:	f6 e0       	ldi	r31, 0x06	; 6
    20d6:	26 85       	ldd	r18, Z+14	; 0x0e
    20d8:	24 fd       	sbrc	r18, 4
    20da:	a2 c0       	rjmp	.+324    	; 0x2220 <usart_init_spi+0x388>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    20dc:	0f 2e       	mov	r0, r31
    20de:	f1 e1       	ldi	r31, 0x11	; 17
    20e0:	ff 2e       	mov	r15, r31
    20e2:	f0 2d       	mov	r31, r0
    20e4:	04 c0       	rjmp	.+8      	; 0x20ee <usart_init_spi+0x256>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    20e6:	80 3b       	cpi	r24, 0xB0	; 176
    20e8:	28 e0       	ldi	r18, 0x08	; 8
    20ea:	92 07       	cpc	r25, r18
    20ec:	99 f0       	breq	.+38     	; 0x2114 <usart_init_spi+0x27c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    20ee:	80 3a       	cpi	r24, 0xA0	; 160
    20f0:	e9 e0       	ldi	r30, 0x09	; 9
    20f2:	9e 07       	cpc	r25, r30
    20f4:	51 f4       	brne	.+20     	; 0x210a <usart_init_spi+0x272>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    20f6:	e0 e6       	ldi	r30, 0x60	; 96
    20f8:	f6 e0       	ldi	r31, 0x06	; 6
    20fa:	26 85       	ldd	r18, Z+14	; 0x0e
    20fc:	24 fd       	sbrc	r18, 4
    20fe:	95 c0       	rjmp	.+298    	; 0x222a <usart_init_spi+0x392>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    2100:	0f 2e       	mov	r0, r31
    2102:	f9 e1       	ldi	r31, 0x19	; 25
    2104:	ff 2e       	mov	r15, r31
    2106:	f0 2d       	mov	r31, r0
    2108:	17 c0       	rjmp	.+46     	; 0x2138 <usart_init_spi+0x2a0>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    210a:	80 3b       	cpi	r24, 0xB0	; 176
    210c:	f9 e0       	ldi	r31, 0x09	; 9
    210e:	9f 07       	cpc	r25, r31
    2110:	01 f1       	breq	.+64     	; 0x2152 <usart_init_spi+0x2ba>
    2112:	04 c0       	rjmp	.+8      	; 0x211c <usart_init_spi+0x284>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2114:	0f 2e       	mov	r0, r31
    2116:	f5 e1       	ldi	r31, 0x15	; 21
    2118:	ff 2e       	mov	r15, r31
    211a:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    211c:	80 3a       	cpi	r24, 0xA0	; 160
    211e:	2a e0       	ldi	r18, 0x0A	; 10
    2120:	92 07       	cpc	r25, r18
    2122:	51 f4       	brne	.+20     	; 0x2138 <usart_init_spi+0x2a0>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    2124:	e0 e8       	ldi	r30, 0x80	; 128
    2126:	f6 e0       	ldi	r31, 0x06	; 6
    2128:	86 85       	ldd	r24, Z+14	; 0x0e
    212a:	84 fd       	sbrc	r24, 4
    212c:	83 c0       	rjmp	.+262    	; 0x2234 <usart_init_spi+0x39c>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    212e:	0f 2e       	mov	r0, r31
    2130:	f1 e2       	ldi	r31, 0x21	; 33
    2132:	ff 2e       	mov	r15, r31
    2134:	f0 2d       	mov	r31, r0
    2136:	16 c0       	rjmp	.+44     	; 0x2164 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    2138:	80 3a       	cpi	r24, 0xA0	; 160
    213a:	9b 40       	sbci	r25, 0x0B	; 11
    213c:	99 f4       	brne	.+38     	; 0x2164 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    213e:	e0 ea       	ldi	r30, 0xA0	; 160
    2140:	f6 e0       	ldi	r31, 0x06	; 6
    2142:	86 85       	ldd	r24, Z+14	; 0x0e
    2144:	84 ff       	sbrs	r24, 4
    2146:	0a c0       	rjmp	.+20     	; 0x215c <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    2148:	0f 2e       	mov	r0, r31
    214a:	fd e2       	ldi	r31, 0x2D	; 45
    214c:	ff 2e       	mov	r15, r31
    214e:	f0 2d       	mov	r31, r0
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2152:	0f 2e       	mov	r0, r31
    2154:	fd e1       	ldi	r31, 0x1D	; 29
    2156:	ff 2e       	mov	r15, r31
    2158:	f0 2d       	mov	r31, r0
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    215c:	0f 2e       	mov	r0, r31
    215e:	f9 e2       	ldi	r31, 0x29	; 41
    2160:	ff 2e       	mov	r15, r31
    2162:	f0 2d       	mov	r31, r0
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2164:	af 2d       	mov	r26, r15
    2166:	a6 95       	lsr	r26
    2168:	a6 95       	lsr	r26
    216a:	a6 95       	lsr	r26
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    216c:	f0 e2       	ldi	r31, 0x20	; 32
    216e:	af 9f       	mul	r26, r31
    2170:	d0 01       	movw	r26, r0
    2172:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2174:	ba 5f       	subi	r27, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2176:	2f 2d       	mov	r18, r15
    2178:	27 70       	andi	r18, 0x07	; 7
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	02 2e       	mov	r0, r18
    2180:	02 c0       	rjmp	.+4      	; 0x2186 <usart_init_spi+0x2ee>
    2182:	88 0f       	add	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	0a 94       	dec	r0
    2188:	e2 f7       	brpl	.-8      	; 0x2182 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    218a:	11 96       	adiw	r26, 0x01	; 1
    218c:	8c 93       	st	X, r24
    218e:	11 97       	sbiw	r26, 0x01	; 1
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    2190:	32 30       	cpi	r19, 0x02	; 2
    2192:	10 f4       	brcc	.+4      	; 0x2198 <usart_init_spi+0x300>
    2194:	30 e4       	ldi	r19, 0x40	; 64
    2196:	01 c0       	rjmp	.+2      	; 0x219a <usart_init_spi+0x302>
    2198:	30 e0       	ldi	r19, 0x00	; 0
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    219a:	fd 01       	movw	r30, r26
    219c:	70 96       	adiw	r30, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    219e:	e2 0f       	add	r30, r18
    21a0:	f1 1d       	adc	r31, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    21a2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    21a4:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    21a6:	20 81       	ld	r18, Z
    21a8:	27 70       	andi	r18, 0x07	; 7
    21aa:	20 83       	st	Z, r18
	*pin_ctrl |= mode;
    21ac:	20 81       	ld	r18, Z
    21ae:	23 2b       	or	r18, r19
    21b0:	20 83       	st	Z, r18
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    21b2:	9f bf       	out	0x3f, r25	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    21b4:	15 96       	adiw	r26, 0x05	; 5
    21b6:	8c 93       	st	X, r24
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	80 6c       	ori	r24, 0xC0	; 192
    21bc:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    21be:	f8 01       	movw	r30, r16
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	8d 7f       	andi	r24, 0xFD	; 253
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <usart_init_spi+0x338>
		usart->CTRLC |= USART_UCPHA_bm;
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	82 60       	ori	r24, 0x02	; 2
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <usart_init_spi+0x33e>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	8d 7f       	andi	r24, 0xFD	; 253
    21d4:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    21d6:	f8 01       	movw	r30, r16
    21d8:	85 81       	ldd	r24, Z+5	; 0x05
    21da:	88 23       	and	r24, r24
    21dc:	21 f0       	breq	.+8      	; 0x21e6 <usart_init_spi+0x34e>
		(usart)->CTRLC |= USART_DORD_bm;
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	84 60       	ori	r24, 0x04	; 4
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <usart_init_spi+0x354>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	8b 7f       	andi	r24, 0xFB	; 251
    21ea:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    21ec:	f8 01       	movw	r30, r16
    21ee:	40 81       	ld	r20, Z
    21f0:	51 81       	ldd	r21, Z+1	; 0x01
    21f2:	62 81       	ldd	r22, Z+2	; 0x02
    21f4:	73 81       	ldd	r23, Z+3	; 0x03
    21f6:	00 e8       	ldi	r16, 0x80	; 128
    21f8:	14 e8       	ldi	r17, 0x84	; 132
    21fa:	2e e1       	ldi	r18, 0x1E	; 30
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	ce 01       	movw	r24, r28
    2200:	19 de       	rcall	.-974    	; 0x1e34 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	88 60       	ori	r24, 0x08	; 8
    2206:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	80 61       	ori	r24, 0x10	; 16
    220c:	8c 83       	std	Y+4, r24	; 0x04
    220e:	17 c0       	rjmp	.+46     	; 0x223e <usart_init_spi+0x3a6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	8f 7e       	andi	r24, 0xEF	; 239
    2214:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2216:	f8 01       	movw	r30, r16
    2218:	34 81       	ldd	r19, Z+4	; 0x04
    221a:	32 50       	subi	r19, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    221c:	ce 01       	movw	r24, r28
    221e:	63 cf       	rjmp	.-314    	; 0x20e6 <usart_init_spi+0x24e>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    2220:	0f 2e       	mov	r0, r31
    2222:	f5 e1       	ldi	r31, 0x15	; 21
    2224:	ff 2e       	mov	r15, r31
    2226:	f0 2d       	mov	r31, r0
    2228:	62 cf       	rjmp	.-316    	; 0x20ee <usart_init_spi+0x256>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    222a:	0f 2e       	mov	r0, r31
    222c:	fd e1       	ldi	r31, 0x1D	; 29
    222e:	ff 2e       	mov	r15, r31
    2230:	f0 2d       	mov	r31, r0
    2232:	82 cf       	rjmp	.-252    	; 0x2138 <usart_init_spi+0x2a0>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2234:	0f 2e       	mov	r0, r31
    2236:	f5 e2       	ldi	r31, 0x25	; 37
    2238:	ff 2e       	mov	r15, r31
    223a:	f0 2d       	mov	r31, r0
    223c:	93 cf       	rjmp	.-218    	; 0x2164 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	08 95       	ret

0000224a <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    224a:	80 3a       	cpi	r24, 0xA0	; 160
    224c:	28 e0       	ldi	r18, 0x08	; 8
    224e:	92 07       	cpc	r25, r18
    2250:	21 f4       	brne	.+8      	; 0x225a <usart_spi_init+0x10>
    2252:	60 e1       	ldi	r22, 0x10	; 16
    2254:	83 e0       	ldi	r24, 0x03	; 3
    2256:	07 c7       	rjmp	.+3598   	; 0x3066 <sysclk_enable_module>
    2258:	08 95       	ret
    225a:	80 3b       	cpi	r24, 0xB0	; 176
    225c:	28 e0       	ldi	r18, 0x08	; 8
    225e:	92 07       	cpc	r25, r18
    2260:	21 f4       	brne	.+8      	; 0x226a <usart_spi_init+0x20>
    2262:	60 e2       	ldi	r22, 0x20	; 32
    2264:	83 e0       	ldi	r24, 0x03	; 3
    2266:	ff c6       	rjmp	.+3582   	; 0x3066 <sysclk_enable_module>
    2268:	08 95       	ret
    226a:	80 3a       	cpi	r24, 0xA0	; 160
    226c:	29 e0       	ldi	r18, 0x09	; 9
    226e:	92 07       	cpc	r25, r18
    2270:	21 f4       	brne	.+8      	; 0x227a <usart_spi_init+0x30>
    2272:	60 e1       	ldi	r22, 0x10	; 16
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	f7 c6       	rjmp	.+3566   	; 0x3066 <sysclk_enable_module>
    2278:	08 95       	ret
    227a:	80 3b       	cpi	r24, 0xB0	; 176
    227c:	29 e0       	ldi	r18, 0x09	; 9
    227e:	92 07       	cpc	r25, r18
    2280:	21 f4       	brne	.+8      	; 0x228a <usart_spi_init+0x40>
    2282:	60 e2       	ldi	r22, 0x20	; 32
    2284:	84 e0       	ldi	r24, 0x04	; 4
    2286:	ef c6       	rjmp	.+3550   	; 0x3066 <sysclk_enable_module>
    2288:	08 95       	ret
    228a:	80 3a       	cpi	r24, 0xA0	; 160
    228c:	2a e0       	ldi	r18, 0x0A	; 10
    228e:	92 07       	cpc	r25, r18
    2290:	21 f4       	brne	.+8      	; 0x229a <usart_spi_init+0x50>
    2292:	60 e1       	ldi	r22, 0x10	; 16
    2294:	85 e0       	ldi	r24, 0x05	; 5
    2296:	e7 c6       	rjmp	.+3534   	; 0x3066 <sysclk_enable_module>
    2298:	08 95       	ret
    229a:	80 3a       	cpi	r24, 0xA0	; 160
    229c:	9b 40       	sbci	r25, 0x0B	; 11
    229e:	19 f4       	brne	.+6      	; 0x22a6 <usart_spi_init+0x5c>
    22a0:	60 e1       	ldi	r22, 0x10	; 16
    22a2:	86 e0       	ldi	r24, 0x06	; 6
    22a4:	e0 c6       	rjmp	.+3520   	; 0x3066 <sysclk_enable_module>
    22a6:	08 95       	ret

000022a8 <usart_spi_setup_device>:
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <usart_spi_setup_device+0xa>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <usart_spi_setup_device+0xc>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	09 83       	std	Y+1, r16	; 0x01
    22ba:	1a 83       	std	Y+2, r17	; 0x02
    22bc:	2b 83       	std	Y+3, r18	; 0x03
    22be:	3c 83       	std	Y+4, r19	; 0x04
    22c0:	4d 83       	std	Y+5, r20	; 0x05
    22c2:	1e 82       	std	Y+6, r1	; 0x06
    22c4:	be 01       	movw	r22, r28
    22c6:	6f 5f       	subi	r22, 0xFF	; 255
    22c8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ca:	e6 dd       	rcall	.-1076   	; 0x1e98 <usart_init_spi>
    22cc:	26 96       	adiw	r28, 0x06	; 6
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    22dc:	fb 01       	movw	r30, r22
    22de:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    22e0:	e8 2f       	mov	r30, r24
    22e2:	e6 95       	lsr	r30
    22e4:	e6 95       	lsr	r30
    22e6:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	e4 9f       	mul	r30, r20
    22ec:	f0 01       	movw	r30, r0
    22ee:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    22f0:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    22f2:	87 70       	andi	r24, 0x07	; 7
    22f4:	21 e0       	ldi	r18, 0x01	; 1
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <usart_spi_select_device+0x24>
    22fc:	44 0f       	add	r20, r20
    22fe:	55 1f       	adc	r21, r21
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2304:	46 83       	std	Z+6, r20	; 0x06
    2306:	08 95       	ret

00002308 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2308:	fb 01       	movw	r30, r22
    230a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    230c:	e8 2f       	mov	r30, r24
    230e:	e6 95       	lsr	r30
    2310:	e6 95       	lsr	r30
    2312:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	e4 9f       	mul	r30, r20
    2318:	f0 01       	movw	r30, r0
    231a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    231c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    231e:	87 70       	andi	r24, 0x07	; 7
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <usart_spi_deselect_device+0x24>
    2328:	44 0f       	add	r20, r20
    232a:	55 1f       	adc	r21, r21
    232c:	8a 95       	dec	r24
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2330:	45 83       	std	Z+5, r20	; 0x05
    2332:	08 95       	ret

00002334 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    2334:	80 93 8b 23 	sts	0x238B, r24
    2338:	90 93 8c 23 	sts	0x238C, r25
    233c:	08 95       	ret

0000233e <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    233e:	20 e8       	ldi	r18, 0x80	; 128
    2340:	82 9f       	mul	r24, r18
    2342:	c0 01       	movw	r24, r0
    2344:	11 24       	eor	r1, r1
    2346:	fc 01       	movw	r30, r24
    2348:	e6 0f       	add	r30, r22
    234a:	f1 1d       	adc	r31, r1
    234c:	80 91 8b 23 	lds	r24, 0x238B
    2350:	90 91 8c 23 	lds	r25, 0x238C
    2354:	e8 0f       	add	r30, r24
    2356:	f9 1f       	adc	r31, r25
    2358:	40 83       	st	Z, r20
    235a:	08 95       	ret

0000235c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    235c:	20 e8       	ldi	r18, 0x80	; 128
    235e:	82 9f       	mul	r24, r18
    2360:	c0 01       	movw	r24, r0
    2362:	11 24       	eor	r1, r1
    2364:	fc 01       	movw	r30, r24
    2366:	e6 0f       	add	r30, r22
    2368:	f1 1d       	adc	r31, r1
    236a:	80 91 8b 23 	lds	r24, 0x238B
    236e:	90 91 8c 23 	lds	r25, 0x238C
    2372:	e8 0f       	add	r30, r24
    2374:	f9 1f       	adc	r31, r25
}
    2376:	80 81       	ld	r24, Z
    2378:	08 95       	ret

0000237a <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    237a:	ff 92       	push	r15
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	e4 2f       	mov	r30, r20
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	e8 0f       	add	r30, r24
    238a:	f1 1d       	adc	r31, r1
    238c:	e1 38       	cpi	r30, 0x81	; 129
    238e:	f1 05       	cpc	r31, r1
    2390:	14 f0       	brlt	.+4      	; 0x2396 <gfx_mono_generic_draw_horizontal_line+0x1c>
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	48 1b       	sub	r20, r24
    2396:	44 23       	and	r20, r20
    2398:	09 f4       	brne	.+2      	; 0x239c <gfx_mono_generic_draw_horizontal_line+0x22>
    239a:	5c c0       	rjmp	.+184    	; 0x2454 <gfx_mono_generic_draw_horizontal_line+0xda>
    239c:	c6 2f       	mov	r28, r22
    239e:	c6 95       	lsr	r28
    23a0:	c6 95       	lsr	r28
    23a2:	c6 95       	lsr	r28
    23a4:	ec 2f       	mov	r30, r28
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	f1 95       	neg	r31
    23aa:	e1 95       	neg	r30
    23ac:	f1 09       	sbc	r31, r1
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	ee 0f       	add	r30, r30
    23b4:	ff 1f       	adc	r31, r31
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	df 01       	movw	r26, r30
    23bc:	a6 0f       	add	r26, r22
    23be:	b1 1d       	adc	r27, r1
    23c0:	bd 01       	movw	r22, r26
    23c2:	e1 e0       	ldi	r30, 0x01	; 1
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	df 01       	movw	r26, r30
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <gfx_mono_generic_draw_horizontal_line+0x54>
    23ca:	aa 0f       	add	r26, r26
    23cc:	bb 1f       	adc	r27, r27
    23ce:	6a 95       	dec	r22
    23d0:	e2 f7       	brpl	.-8      	; 0x23ca <gfx_mono_generic_draw_horizontal_line+0x50>
    23d2:	0a 2f       	mov	r16, r26
    23d4:	21 30       	cpi	r18, 0x01	; 1
    23d6:	49 f0       	breq	.+18     	; 0x23ea <gfx_mono_generic_draw_horizontal_line+0x70>
    23d8:	68 f0       	brcs	.+26     	; 0x23f4 <gfx_mono_generic_draw_horizontal_line+0x7a>
    23da:	22 30       	cpi	r18, 0x02	; 2
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <gfx_mono_generic_draw_horizontal_line+0x66>
    23de:	3a c0       	rjmp	.+116    	; 0x2454 <gfx_mono_generic_draw_horizontal_line+0xda>
    23e0:	d4 2f       	mov	r29, r20
    23e2:	ff 24       	eor	r15, r15
    23e4:	fa 94       	dec	r15
    23e6:	f8 0e       	add	r15, r24
    23e8:	28 c0       	rjmp	.+80     	; 0x243a <gfx_mono_generic_draw_horizontal_line+0xc0>
    23ea:	d4 2f       	mov	r29, r20
    23ec:	ff 24       	eor	r15, r15
    23ee:	fa 94       	dec	r15
    23f0:	f8 0e       	add	r15, r24
    23f2:	07 c0       	rjmp	.+14     	; 0x2402 <gfx_mono_generic_draw_horizontal_line+0x88>
    23f4:	d4 2f       	mov	r29, r20
    23f6:	ff 24       	eor	r15, r15
    23f8:	fa 94       	dec	r15
    23fa:	f8 0e       	add	r15, r24
    23fc:	0a 2f       	mov	r16, r26
    23fe:	00 95       	com	r16
    2400:	0e c0       	rjmp	.+28     	; 0x241e <gfx_mono_generic_draw_horizontal_line+0xa4>
    2402:	1f 2d       	mov	r17, r15
    2404:	1d 0f       	add	r17, r29
    2406:	61 2f       	mov	r22, r17
    2408:	8c 2f       	mov	r24, r28
    240a:	ea d8       	rcall	.-3628   	; 0x15e0 <gfx_mono_st7565r_get_byte>
    240c:	48 2f       	mov	r20, r24
    240e:	40 2b       	or	r20, r16
    2410:	61 2f       	mov	r22, r17
    2412:	8c 2f       	mov	r24, r28
    2414:	0e 94 c2 09 	call	0x1384	; 0x1384 <gfx_mono_st7565r_put_byte>
    2418:	d1 50       	subi	r29, 0x01	; 1
    241a:	99 f7       	brne	.-26     	; 0x2402 <gfx_mono_generic_draw_horizontal_line+0x88>
    241c:	1b c0       	rjmp	.+54     	; 0x2454 <gfx_mono_generic_draw_horizontal_line+0xda>
    241e:	1f 2d       	mov	r17, r15
    2420:	1d 0f       	add	r17, r29
    2422:	61 2f       	mov	r22, r17
    2424:	8c 2f       	mov	r24, r28
    2426:	dc d8       	rcall	.-3656   	; 0x15e0 <gfx_mono_st7565r_get_byte>
    2428:	48 2f       	mov	r20, r24
    242a:	40 23       	and	r20, r16
    242c:	61 2f       	mov	r22, r17
    242e:	8c 2f       	mov	r24, r28
    2430:	0e 94 c2 09 	call	0x1384	; 0x1384 <gfx_mono_st7565r_put_byte>
    2434:	d1 50       	subi	r29, 0x01	; 1
    2436:	99 f7       	brne	.-26     	; 0x241e <gfx_mono_generic_draw_horizontal_line+0xa4>
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <gfx_mono_generic_draw_horizontal_line+0xda>
    243a:	1f 2d       	mov	r17, r15
    243c:	1d 0f       	add	r17, r29
    243e:	61 2f       	mov	r22, r17
    2440:	8c 2f       	mov	r24, r28
    2442:	ce d8       	rcall	.-3684   	; 0x15e0 <gfx_mono_st7565r_get_byte>
    2444:	48 2f       	mov	r20, r24
    2446:	40 27       	eor	r20, r16
    2448:	61 2f       	mov	r22, r17
    244a:	8c 2f       	mov	r24, r28
    244c:	0e 94 c2 09 	call	0x1384	; 0x1384 <gfx_mono_st7565r_put_byte>
    2450:	d1 50       	subi	r29, 0x01	; 1
    2452:	99 f7       	brne	.-26     	; 0x243a <gfx_mono_generic_draw_horizontal_line+0xc0>
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	ff 90       	pop	r15
    245e:	08 95       	ret

00002460 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	d8 2f       	mov	r29, r24
    246c:	14 2f       	mov	r17, r20
	if (height == 0) {
    246e:	22 23       	and	r18, r18
    2470:	61 f0       	breq	.+24     	; 0x248a <gfx_mono_generic_draw_filled_rect+0x2a>
    2472:	c2 2f       	mov	r28, r18
    2474:	ff 24       	eor	r15, r15
    2476:	fa 94       	dec	r15
    2478:	f6 0e       	add	r15, r22
    247a:	6f 2d       	mov	r22, r15
    247c:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    247e:	20 2f       	mov	r18, r16
    2480:	41 2f       	mov	r20, r17
    2482:	8d 2f       	mov	r24, r29
    2484:	7a df       	rcall	.-268    	; 0x237a <gfx_mono_generic_draw_horizontal_line>
    2486:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    2488:	c1 f7       	brne	.-16     	; 0x247a <gfx_mono_generic_draw_filled_rect+0x1a>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	ff 90       	pop	r15
    2494:	08 95       	ret

00002496 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	c8 2f       	mov	r28, r24
    24ac:	d6 2e       	mov	r13, r22
    24ae:	a4 2e       	mov	r10, r20
    24b0:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    24b2:	00 e0       	ldi	r16, 0x00	; 0
    24b4:	f9 01       	movw	r30, r18
    24b6:	24 81       	ldd	r18, Z+4	; 0x04
    24b8:	43 81       	ldd	r20, Z+3	; 0x03
    24ba:	6a 2d       	mov	r22, r10
    24bc:	8d 2d       	mov	r24, r13
    24be:	d0 df       	rcall	.-96     	; 0x2460 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    24c0:	f7 01       	movw	r30, r14
    24c2:	90 81       	ld	r25, Z
    24c4:	91 11       	cpse	r25, r1
    24c6:	39 c0       	rjmp	.+114    	; 0x253a <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    24c8:	83 81       	ldd	r24, Z+3	; 0x03
    24ca:	a8 2f       	mov	r26, r24
    24cc:	a6 95       	lsr	r26
    24ce:	a6 95       	lsr	r26
    24d0:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    24d2:	87 70       	andi	r24, 0x07	; 7
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <gfx_mono_draw_char+0x42>
		char_row_size++;
    24d6:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    24d8:	f7 01       	movw	r30, r14
    24da:	c4 80       	ldd	r12, Z+4	; 0x04
    24dc:	ac 9d       	mul	r26, r12
    24de:	d0 01       	movw	r26, r0
    24e0:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    24e2:	ec 2f       	mov	r30, r28
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	e7 01       	movw	r28, r14
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	e8 1b       	sub	r30, r24
    24ec:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    24ee:	ae 9f       	mul	r26, r30
    24f0:	90 01       	movw	r18, r0
    24f2:	af 9f       	mul	r26, r31
    24f4:	30 0d       	add	r19, r0
    24f6:	be 9f       	mul	r27, r30
    24f8:	30 0d       	add	r19, r0
    24fa:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    24fc:	09 80       	ldd	r0, Y+1	; 0x01
    24fe:	da 81       	ldd	r29, Y+2	; 0x02
    2500:	c0 2d       	mov	r28, r0
    2502:	c2 0f       	add	r28, r18
    2504:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    2506:	f7 01       	movw	r30, r14
    2508:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    250a:	bb 20       	and	r11, r11
    250c:	99 f0       	breq	.+38     	; 0x2534 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
    250e:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2510:	10 e0       	ldi	r17, 0x00	; 0
    2512:	81 2f       	mov	r24, r17
    2514:	8d 0d       	add	r24, r13
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    2516:	91 2f       	mov	r25, r17
    2518:	97 70       	andi	r25, 0x07	; 7
    251a:	19 f4       	brne	.+6      	; 0x2522 <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    251c:	fe 01       	movw	r30, r28
    251e:	04 91       	lpm	r16, Z
				glyph_data++;
    2520:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
    2522:	00 23       	and	r16, r16
    2524:	1c f4       	brge	.+6      	; 0x252c <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	6a 2d       	mov	r22, r10
    252a:	1d d8       	rcall	.-4038   	; 0x1566 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    252c:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    252e:	1f 5f       	subi	r17, 0xFF	; 255
    2530:	1b 11       	cpse	r17, r11
    2532:	ef cf       	rjmp	.-34     	; 0x2512 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    2534:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
    2536:	ca 94       	dec	r12
	} while (rows_left > 0);
    2538:	31 f7       	brne	.-52     	; 0x2506 <gfx_mono_draw_char+0x70>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	af 90       	pop	r10
    254e:	08 95       	ret

00002550 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    2550:	df 92       	push	r13
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	e4 2e       	mov	r14, r20
    2560:	89 01       	movw	r16, r18
    2562:	ec 01       	movw	r28, r24
    2564:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2566:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2568:	89 91       	ld	r24, Y+
    256a:	8a 30       	cpi	r24, 0x0A	; 10
    256c:	31 f4       	brne	.+12     	; 0x257a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    256e:	f8 01       	movw	r30, r16
    2570:	84 81       	ldd	r24, Z+4	; 0x04
    2572:	8f 5f       	subi	r24, 0xFF	; 255
    2574:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2576:	fd 2c       	mov	r15, r13
    2578:	09 c0       	rjmp	.+18     	; 0x258c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    257a:	8d 30       	cpi	r24, 0x0D	; 13
    257c:	39 f0       	breq	.+14     	; 0x258c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    257e:	98 01       	movw	r18, r16
    2580:	4e 2d       	mov	r20, r14
    2582:	6f 2d       	mov	r22, r15
    2584:	88 df       	rcall	.-240    	; 0x2496 <gfx_mono_draw_char>
			x += font->width;
    2586:	f8 01       	movw	r30, r16
    2588:	83 81       	ldd	r24, Z+3	; 0x03
    258a:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
    258c:	88 81       	ld	r24, Y
    258e:	81 11       	cpse	r24, r1
    2590:	eb cf       	rjmp	.-42     	; 0x2568 <gfx_mono_draw_string+0x18>
}
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	df 90       	pop	r13
    25a0:	08 95       	ret

000025a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    25a2:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25a4:	03 96       	adiw	r24, 0x03	; 3
    25a6:	81 83       	std	Z+1, r24	; 0x01
    25a8:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    25aa:	2f ef       	ldi	r18, 0xFF	; 255
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	23 83       	std	Z+3, r18	; 0x03
    25b0:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25b2:	85 83       	std	Z+5, r24	; 0x05
    25b4:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    25b6:	87 83       	std	Z+7, r24	; 0x07
    25b8:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    25ba:	10 82       	st	Z, r1
    25bc:	08 95       	ret

000025be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    25be:	fc 01       	movw	r30, r24
    25c0:	10 86       	std	Z+8, r1	; 0x08
    25c2:	11 86       	std	Z+9, r1	; 0x09
    25c4:	08 95       	ret

000025c6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	9c 01       	movw	r18, r24
    25cc:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    25ce:	dc 01       	movw	r26, r24
    25d0:	11 96       	adiw	r26, 0x01	; 1
    25d2:	cd 91       	ld	r28, X+
    25d4:	dc 91       	ld	r29, X
    25d6:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    25d8:	c2 83       	std	Z+2, r28	; 0x02
    25da:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    25dc:	8c 81       	ldd	r24, Y+4	; 0x04
    25de:	9d 81       	ldd	r25, Y+5	; 0x05
    25e0:	84 83       	std	Z+4, r24	; 0x04
    25e2:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	dc 01       	movw	r26, r24
    25ea:	12 96       	adiw	r26, 0x02	; 2
    25ec:	6d 93       	st	X+, r22
    25ee:	7c 93       	st	X, r23
    25f0:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    25f2:	6c 83       	std	Y+4, r22	; 0x04
    25f4:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    25f6:	20 87       	std	Z+8, r18	; 0x08
    25f8:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    25fa:	f9 01       	movw	r30, r18
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	80 83       	st	Z, r24
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2608:	cf 93       	push	r28
    260a:	df 93       	push	r29
    260c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    260e:	48 81       	ld	r20, Y
    2610:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2612:	4f 3f       	cpi	r20, 0xFF	; 255
    2614:	2f ef       	ldi	r18, 0xFF	; 255
    2616:	52 07       	cpc	r21, r18
    2618:	21 f4       	brne	.+8      	; 0x2622 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    261a:	fc 01       	movw	r30, r24
    261c:	a7 81       	ldd	r26, Z+7	; 0x07
    261e:	b0 85       	ldd	r27, Z+8	; 0x08
    2620:	0d c0       	rjmp	.+26     	; 0x263c <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2622:	dc 01       	movw	r26, r24
    2624:	13 96       	adiw	r26, 0x03	; 3
    2626:	12 96       	adiw	r26, 0x02	; 2
    2628:	ed 91       	ld	r30, X+
    262a:	fc 91       	ld	r31, X
    262c:	13 97       	sbiw	r26, 0x03	; 3
    262e:	20 81       	ld	r18, Z
    2630:	31 81       	ldd	r19, Z+1	; 0x01
    2632:	42 17       	cp	r20, r18
    2634:	53 07       	cpc	r21, r19
    2636:	10 f0       	brcs	.+4      	; 0x263c <vListInsert+0x34>
    2638:	df 01       	movw	r26, r30
    263a:	f5 cf       	rjmp	.-22     	; 0x2626 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    263c:	12 96       	adiw	r26, 0x02	; 2
    263e:	ed 91       	ld	r30, X+
    2640:	fc 91       	ld	r31, X
    2642:	13 97       	sbiw	r26, 0x03	; 3
    2644:	ea 83       	std	Y+2, r30	; 0x02
    2646:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2648:	c4 83       	std	Z+4, r28	; 0x04
    264a:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    264c:	ac 83       	std	Y+4, r26	; 0x04
    264e:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    2650:	12 96       	adiw	r26, 0x02	; 2
    2652:	cd 93       	st	X+, r28
    2654:	dc 93       	st	X, r29
    2656:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2658:	88 87       	std	Y+8, r24	; 0x08
    265a:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    265c:	fc 01       	movw	r30, r24
    265e:	20 81       	ld	r18, Z
    2660:	2f 5f       	subi	r18, 0xFF	; 255
    2662:	20 83       	st	Z, r18
}
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	08 95       	ret

0000266a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2670:	a0 85       	ldd	r26, Z+8	; 0x08
    2672:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2674:	c2 81       	ldd	r28, Z+2	; 0x02
    2676:	d3 81       	ldd	r29, Z+3	; 0x03
    2678:	84 81       	ldd	r24, Z+4	; 0x04
    267a:	95 81       	ldd	r25, Z+5	; 0x05
    267c:	8c 83       	std	Y+4, r24	; 0x04
    267e:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2680:	c4 81       	ldd	r28, Z+4	; 0x04
    2682:	d5 81       	ldd	r29, Z+5	; 0x05
    2684:	82 81       	ldd	r24, Z+2	; 0x02
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	8a 83       	std	Y+2, r24	; 0x02
    268a:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	cd 91       	ld	r28, X+
    2690:	dc 91       	ld	r29, X
    2692:	12 97       	sbiw	r26, 0x02	; 2
    2694:	ce 17       	cp	r28, r30
    2696:	df 07       	cpc	r29, r31
    2698:	31 f4       	brne	.+12     	; 0x26a6 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	11 96       	adiw	r26, 0x01	; 1
    26a0:	8d 93       	st	X+, r24
    26a2:	9c 93       	st	X, r25
    26a4:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    26a6:	10 86       	std	Z+8, r1	; 0x08
    26a8:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    26aa:	8c 91       	ld	r24, X
    26ac:	81 50       	subi	r24, 0x01	; 1
    26ae:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    26bc:	71 e1       	ldi	r23, 0x11	; 17
    26be:	fc 01       	movw	r30, r24
    26c0:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    26c2:	31 97       	sbiw	r30, 0x01	; 1
    26c4:	62 e2       	ldi	r22, 0x22	; 34
    26c6:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    26c8:	31 97       	sbiw	r30, 0x01	; 1
    26ca:	23 e3       	ldi	r18, 0x33	; 51
    26cc:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    26ce:	22 27       	eor	r18, r18
    26d0:	17 fd       	sbrc	r17, 7
    26d2:	20 95       	com	r18
    26d4:	32 2f       	mov	r19, r18
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    26d6:	31 97       	sbiw	r30, 0x01	; 1
    26d8:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    26da:	31 97       	sbiw	r30, 0x01	; 1
    26dc:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    26de:	31 97       	sbiw	r30, 0x01	; 1
    26e0:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    26e2:	31 97       	sbiw	r30, 0x01	; 1
    26e4:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    26e6:	31 97       	sbiw	r30, 0x01	; 1
    26e8:	20 e8       	ldi	r18, 0x80	; 128
    26ea:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    26ec:	31 97       	sbiw	r30, 0x01	; 1
    26ee:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    26f0:	31 97       	sbiw	r30, 0x01	; 1
    26f2:	22 e0       	ldi	r18, 0x02	; 2
    26f4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    26f6:	31 97       	sbiw	r30, 0x01	; 1
    26f8:	23 e0       	ldi	r18, 0x03	; 3
    26fa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    26fc:	31 97       	sbiw	r30, 0x01	; 1
    26fe:	24 e0       	ldi	r18, 0x04	; 4
    2700:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    2702:	31 97       	sbiw	r30, 0x01	; 1
    2704:	25 e0       	ldi	r18, 0x05	; 5
    2706:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    2708:	31 97       	sbiw	r30, 0x01	; 1
    270a:	26 e0       	ldi	r18, 0x06	; 6
    270c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    270e:	31 97       	sbiw	r30, 0x01	; 1
    2710:	27 e0       	ldi	r18, 0x07	; 7
    2712:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    2714:	31 97       	sbiw	r30, 0x01	; 1
    2716:	28 e0       	ldi	r18, 0x08	; 8
    2718:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	29 e0       	ldi	r18, 0x09	; 9
    271e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    2720:	31 97       	sbiw	r30, 0x01	; 1
    2722:	20 e1       	ldi	r18, 0x10	; 16
    2724:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    272a:	31 97       	sbiw	r30, 0x01	; 1
    272c:	22 e1       	ldi	r18, 0x12	; 18
    272e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    2730:	31 97       	sbiw	r30, 0x01	; 1
    2732:	23 e1       	ldi	r18, 0x13	; 19
    2734:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    2736:	31 97       	sbiw	r30, 0x01	; 1
    2738:	24 e1       	ldi	r18, 0x14	; 20
    273a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    273c:	31 97       	sbiw	r30, 0x01	; 1
    273e:	25 e1       	ldi	r18, 0x15	; 21
    2740:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    2742:	31 97       	sbiw	r30, 0x01	; 1
    2744:	26 e1       	ldi	r18, 0x16	; 22
    2746:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    2748:	31 97       	sbiw	r30, 0x01	; 1
    274a:	27 e1       	ldi	r18, 0x17	; 23
    274c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    274e:	31 97       	sbiw	r30, 0x01	; 1
    2750:	28 e1       	ldi	r18, 0x18	; 24
    2752:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    2754:	31 97       	sbiw	r30, 0x01	; 1
    2756:	29 e1       	ldi	r18, 0x19	; 25
    2758:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    275a:	31 97       	sbiw	r30, 0x01	; 1
    275c:	20 e2       	ldi	r18, 0x20	; 32
    275e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    2760:	31 97       	sbiw	r30, 0x01	; 1
    2762:	21 e2       	ldi	r18, 0x21	; 33
    2764:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    2766:	31 97       	sbiw	r30, 0x01	; 1
    2768:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    276a:	31 97       	sbiw	r30, 0x01	; 1
    276c:	23 e2       	ldi	r18, 0x23	; 35
    276e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    2770:	31 97       	sbiw	r30, 0x01	; 1
    2772:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    2774:	31 97       	sbiw	r30, 0x01	; 1
    2776:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    2778:	31 97       	sbiw	r30, 0x01	; 1
    277a:	26 e2       	ldi	r18, 0x26	; 38
    277c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    277e:	31 97       	sbiw	r30, 0x01	; 1
    2780:	27 e2       	ldi	r18, 0x27	; 39
    2782:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    2784:	31 97       	sbiw	r30, 0x01	; 1
    2786:	28 e2       	ldi	r18, 0x28	; 40
    2788:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    278a:	31 97       	sbiw	r30, 0x01	; 1
    278c:	29 e2       	ldi	r18, 0x29	; 41
    278e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    2790:	31 97       	sbiw	r30, 0x01	; 1
    2792:	20 e3       	ldi	r18, 0x30	; 48
    2794:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    2796:	31 97       	sbiw	r30, 0x01	; 1
    2798:	21 e3       	ldi	r18, 0x31	; 49
    279a:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    279c:	87 97       	sbiw	r24, 0x27	; 39
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	08 95       	ret

000027a4 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    27a4:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    27a6:	e0 e7       	ldi	r30, 0x70	; 112
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	83 81       	ldd	r24, Z+3	; 0x03
    27ac:	8a 7f       	andi	r24, 0xFA	; 250
    27ae:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    27b0:	e0 e0       	ldi	r30, 0x00	; 0
    27b2:	f8 e0       	ldi	r31, 0x08	; 8
    27b4:	80 ea       	ldi	r24, 0xA0	; 160
    27b6:	9f e0       	ldi	r25, 0x0F	; 15
    27b8:	86 a3       	std	Z+38, r24	; 0x26
    27ba:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	86 83       	std	Z+6, r24	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    27c0:	a0 ea       	ldi	r26, 0xA0	; 160
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	12 96       	adiw	r26, 0x02	; 2
    27c6:	9c 91       	ld	r25, X
    27c8:	12 97       	sbiw	r26, 0x02	; 2
    27ca:	91 60       	ori	r25, 0x01	; 1
    27cc:	12 96       	adiw	r26, 0x02	; 2
    27ce:	9c 93       	st	X, r25

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    27d0:	80 83       	st	Z, r24

    }

    // enable global interrupt
    sei();
    27d2:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    27d4:	a0 91 e3 23 	lds	r26, 0x23E3
    27d8:	b0 91 e4 23 	lds	r27, 0x23E4
    27dc:	0d 90       	ld	r0, X+
    27de:	0d be       	out	0x3d, r0	; 61
    27e0:	0d 90       	ld	r0, X+
    27e2:	0e be       	out	0x3e, r0	; 62
    27e4:	ff 91       	pop	r31
    27e6:	ef 91       	pop	r30
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	bf 91       	pop	r27
    27ee:	af 91       	pop	r26
    27f0:	9f 91       	pop	r25
    27f2:	8f 91       	pop	r24
    27f4:	7f 91       	pop	r23
    27f6:	6f 91       	pop	r22
    27f8:	5f 91       	pop	r21
    27fa:	4f 91       	pop	r20
    27fc:	3f 91       	pop	r19
    27fe:	2f 91       	pop	r18
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	ff 90       	pop	r15
    2806:	ef 90       	pop	r14
    2808:	df 90       	pop	r13
    280a:	cf 90       	pop	r12
    280c:	bf 90       	pop	r11
    280e:	af 90       	pop	r10
    2810:	9f 90       	pop	r9
    2812:	8f 90       	pop	r8
    2814:	7f 90       	pop	r7
    2816:	6f 90       	pop	r6
    2818:	5f 90       	pop	r5
    281a:	4f 90       	pop	r4
    281c:	3f 90       	pop	r3
    281e:	2f 90       	pop	r2
    2820:	1f 90       	pop	r1
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    2828:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    282a:	08 95       	ret

0000282c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    282c:	0f 92       	push	r0
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	0f 92       	push	r0
    2834:	1f 92       	push	r1
    2836:	11 24       	eor	r1, r1
    2838:	2f 92       	push	r2
    283a:	3f 92       	push	r3
    283c:	4f 92       	push	r4
    283e:	5f 92       	push	r5
    2840:	6f 92       	push	r6
    2842:	7f 92       	push	r7
    2844:	8f 92       	push	r8
    2846:	9f 92       	push	r9
    2848:	af 92       	push	r10
    284a:	bf 92       	push	r11
    284c:	cf 92       	push	r12
    284e:	df 92       	push	r13
    2850:	ef 92       	push	r14
    2852:	ff 92       	push	r15
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	2f 93       	push	r18
    285a:	3f 93       	push	r19
    285c:	4f 93       	push	r20
    285e:	5f 93       	push	r21
    2860:	6f 93       	push	r22
    2862:	7f 93       	push	r23
    2864:	8f 93       	push	r24
    2866:	9f 93       	push	r25
    2868:	af 93       	push	r26
    286a:	bf 93       	push	r27
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ef 93       	push	r30
    2872:	ff 93       	push	r31
    2874:	a0 91 e3 23 	lds	r26, 0x23E3
    2878:	b0 91 e4 23 	lds	r27, 0x23E4
    287c:	0d b6       	in	r0, 0x3d	; 61
    287e:	0d 92       	st	X+, r0
    2880:	0e b6       	in	r0, 0x3e	; 62
    2882:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    2884:	82 d3       	rcall	.+1796   	; 0x2f8a <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    2886:	a0 91 e3 23 	lds	r26, 0x23E3
    288a:	b0 91 e4 23 	lds	r27, 0x23E4
    288e:	0d 90       	ld	r0, X+
    2890:	0d be       	out	0x3d, r0	; 61
    2892:	0d 90       	ld	r0, X+
    2894:	0e be       	out	0x3e, r0	; 62
    2896:	ff 91       	pop	r31
    2898:	ef 91       	pop	r30
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	bf 91       	pop	r27
    28a0:	af 91       	pop	r26
    28a2:	9f 91       	pop	r25
    28a4:	8f 91       	pop	r24
    28a6:	7f 91       	pop	r23
    28a8:	6f 91       	pop	r22
    28aa:	5f 91       	pop	r21
    28ac:	4f 91       	pop	r20
    28ae:	3f 91       	pop	r19
    28b0:	2f 91       	pop	r18
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	ff 90       	pop	r15
    28b8:	ef 90       	pop	r14
    28ba:	df 90       	pop	r13
    28bc:	cf 90       	pop	r12
    28be:	bf 90       	pop	r11
    28c0:	af 90       	pop	r10
    28c2:	9f 90       	pop	r9
    28c4:	8f 90       	pop	r8
    28c6:	7f 90       	pop	r7
    28c8:	6f 90       	pop	r6
    28ca:	5f 90       	pop	r5
    28cc:	4f 90       	pop	r4
    28ce:	3f 90       	pop	r3
    28d0:	2f 90       	pop	r2
    28d2:	1f 90       	pop	r1
    28d4:	0f 90       	pop	r0
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	0f 90       	pop	r0

    asm volatile ( "ret" );
    28da:	08 95       	ret

000028dc <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	0f 92       	push	r0
    28e4:	1f 92       	push	r1
    28e6:	11 24       	eor	r1, r1
    28e8:	2f 92       	push	r2
    28ea:	3f 92       	push	r3
    28ec:	4f 92       	push	r4
    28ee:	5f 92       	push	r5
    28f0:	6f 92       	push	r6
    28f2:	7f 92       	push	r7
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	2f 93       	push	r18
    290a:	3f 93       	push	r19
    290c:	4f 93       	push	r20
    290e:	5f 93       	push	r21
    2910:	6f 93       	push	r22
    2912:	7f 93       	push	r23
    2914:	8f 93       	push	r24
    2916:	9f 93       	push	r25
    2918:	af 93       	push	r26
    291a:	bf 93       	push	r27
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	ef 93       	push	r30
    2922:	ff 93       	push	r31
    2924:	a0 91 e3 23 	lds	r26, 0x23E3
    2928:	b0 91 e4 23 	lds	r27, 0x23E4
    292c:	0d b6       	in	r0, 0x3d	; 61
    292e:	0d 92       	st	X+, r0
    2930:	0e b6       	in	r0, 0x3e	; 62
    2932:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    2934:	bc d1       	rcall	.+888    	; 0x2cae <xTaskIncrementTick>
    2936:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    2938:	28 d3       	rcall	.+1616   	; 0x2f8a <vTaskSwitchContext>
        }
        portRESTORE_CONTEXT();
    293a:	a0 91 e3 23 	lds	r26, 0x23E3
    293e:	b0 91 e4 23 	lds	r27, 0x23E4
    2942:	0d 90       	ld	r0, X+
    2944:	0d be       	out	0x3d, r0	; 61
    2946:	0d 90       	ld	r0, X+
    2948:	0e be       	out	0x3e, r0	; 62
    294a:	ff 91       	pop	r31
    294c:	ef 91       	pop	r30
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	bf 91       	pop	r27
    2954:	af 91       	pop	r26
    2956:	9f 91       	pop	r25
    2958:	8f 91       	pop	r24
    295a:	7f 91       	pop	r23
    295c:	6f 91       	pop	r22
    295e:	5f 91       	pop	r21
    2960:	4f 91       	pop	r20
    2962:	3f 91       	pop	r19
    2964:	2f 91       	pop	r18
    2966:	1f 91       	pop	r17
    2968:	0f 91       	pop	r16
    296a:	ff 90       	pop	r15
    296c:	ef 90       	pop	r14
    296e:	df 90       	pop	r13
    2970:	cf 90       	pop	r12
    2972:	bf 90       	pop	r11
    2974:	af 90       	pop	r10
    2976:	9f 90       	pop	r9
    2978:	8f 90       	pop	r8
    297a:	7f 90       	pop	r7
    297c:	6f 90       	pop	r6
    297e:	5f 90       	pop	r5
    2980:	4f 90       	pop	r4
    2982:	3f 90       	pop	r3
    2984:	2f 90       	pop	r2
    2986:	1f 90       	pop	r1
    2988:	0f 90       	pop	r0
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	0f 90       	pop	r0

        asm volatile ( "reti" );
    298e:	18 95       	reti

00002990 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
    2996:	7b d1       	rcall	.+758    	; 0x2c8e <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    2998:	ce 01       	movw	r24, r28
    299a:	0e 94 ed 1c 	call	0x39da	; 0x39da <malloc>
    299e:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    29a0:	5b d2       	rcall	.+1206   	; 0x2e58 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    29a2:	ce 01       	movw	r24, r28
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	08 95       	ret

000029aa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    29aa:	cf 93       	push	r28
    29ac:	df 93       	push	r29
    29ae:	ec 01       	movw	r28, r24
	if( pv )
    29b0:	00 97       	sbiw	r24, 0x00	; 0
    29b2:	29 f0       	breq	.+10     	; 0x29be <vPortFree+0x14>
	{
		vTaskSuspendAll();
    29b4:	6c d1       	rcall	.+728    	; 0x2c8e <vTaskSuspendAll>
		{
			free( pv );
    29b6:	ce 01       	movw	r24, r28
    29b8:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    29bc:	4d d2       	rcall	.+1178   	; 0x2e58 <xTaskResumeAll>
	}
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    29c4:	c6 eb       	ldi	r28, 0xB6	; 182
    29c6:	d3 e2       	ldi	r29, 0x23	; 35
    29c8:	88 81       	ld	r24, Y
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	08 f4       	brcc	.+2      	; 0x29d0 <prvIdleTask+0xc>
    29ce:	ff cf       	rjmp	.-2      	; 0x29ce <prvIdleTask+0xa>
    29d0:	2d df       	rcall	.-422    	; 0x282c <vPortYield>
    29d2:	fa cf       	rjmp	.-12     	; 0x29c8 <prvIdleTask+0x4>

000029d4 <prvAddCurrentTaskToDelayedList>:
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	ec 01       	movw	r28, r24
    29da:	e0 91 e3 23 	lds	r30, 0x23E3
    29de:	f0 91 e4 23 	lds	r31, 0x23E4
    29e2:	82 83       	std	Z+2, r24	; 0x02
    29e4:	93 83       	std	Z+3, r25	; 0x03
    29e6:	80 91 94 23 	lds	r24, 0x2394
    29ea:	90 91 95 23 	lds	r25, 0x2395
    29ee:	c8 17       	cp	r28, r24
    29f0:	d9 07       	cpc	r29, r25
    29f2:	60 f4       	brcc	.+24     	; 0x2a0c <prvAddCurrentTaskToDelayedList+0x38>
    29f4:	60 91 e3 23 	lds	r22, 0x23E3
    29f8:	70 91 e4 23 	lds	r23, 0x23E4
    29fc:	80 91 a0 23 	lds	r24, 0x23A0
    2a00:	90 91 a1 23 	lds	r25, 0x23A1
    2a04:	6e 5f       	subi	r22, 0xFE	; 254
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	ff dd       	rcall	.-1026   	; 0x2608 <vListInsert>
    2a0a:	16 c0       	rjmp	.+44     	; 0x2a38 <prvAddCurrentTaskToDelayedList+0x64>
    2a0c:	60 91 e3 23 	lds	r22, 0x23E3
    2a10:	70 91 e4 23 	lds	r23, 0x23E4
    2a14:	80 91 a2 23 	lds	r24, 0x23A2
    2a18:	90 91 a3 23 	lds	r25, 0x23A3
    2a1c:	6e 5f       	subi	r22, 0xFE	; 254
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	f3 dd       	rcall	.-1050   	; 0x2608 <vListInsert>
    2a22:	80 91 0e 20 	lds	r24, 0x200E
    2a26:	90 91 0f 20 	lds	r25, 0x200F
    2a2a:	c8 17       	cp	r28, r24
    2a2c:	d9 07       	cpc	r29, r25
    2a2e:	20 f4       	brcc	.+8      	; 0x2a38 <prvAddCurrentTaskToDelayedList+0x64>
    2a30:	c0 93 0e 20 	sts	0x200E, r28
    2a34:	d0 93 0f 20 	sts	0x200F, r29
    2a38:	df 91       	pop	r29
    2a3a:	cf 91       	pop	r28
    2a3c:	08 95       	ret

00002a3e <xTaskGenericCreate>:
    2a3e:	4f 92       	push	r4
    2a40:	5f 92       	push	r5
    2a42:	6f 92       	push	r6
    2a44:	7f 92       	push	r7
    2a46:	8f 92       	push	r8
    2a48:	9f 92       	push	r9
    2a4a:	af 92       	push	r10
    2a4c:	bf 92       	push	r11
    2a4e:	cf 92       	push	r12
    2a50:	df 92       	push	r13
    2a52:	ef 92       	push	r14
    2a54:	ff 92       	push	r15
    2a56:	0f 93       	push	r16
    2a58:	1f 93       	push	r17
    2a5a:	cf 93       	push	r28
    2a5c:	df 93       	push	r29
    2a5e:	4c 01       	movw	r8, r24
    2a60:	5b 01       	movw	r10, r22
    2a62:	2a 01       	movw	r4, r20
    2a64:	39 01       	movw	r6, r18
    2a66:	81 e2       	ldi	r24, 0x21	; 33
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	92 df       	rcall	.-220    	; 0x2990 <pvPortMalloc>
    2a6c:	ec 01       	movw	r28, r24
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <xTaskGenericCreate+0x36>
    2a72:	d2 c0       	rjmp	.+420    	; 0x2c18 <xTaskGenericCreate+0x1da>
    2a74:	c1 14       	cp	r12, r1
    2a76:	d1 04       	cpc	r13, r1
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <xTaskGenericCreate+0x3e>
    2a7a:	b7 c0       	rjmp	.+366    	; 0x2bea <xTaskGenericCreate+0x1ac>
    2a7c:	c2 01       	movw	r24, r4
    2a7e:	88 df       	rcall	.-240    	; 0x2990 <pvPortMalloc>
    2a80:	8f 8b       	std	Y+23, r24	; 0x17
    2a82:	98 8f       	std	Y+24, r25	; 0x18
    2a84:	89 2b       	or	r24, r25
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <xTaskGenericCreate+0x4c>
    2a88:	b2 c0       	rjmp	.+356    	; 0x2bee <xTaskGenericCreate+0x1b0>
    2a8a:	ce 01       	movw	r24, r28
    2a8c:	8e df       	rcall	.-228    	; 0x29aa <vPortFree>
    2a8e:	c4 c0       	rjmp	.+392    	; 0x2c18 <xTaskGenericCreate+0x1da>
    2a90:	cf 01       	movw	r24, r30
    2a92:	31 91       	ld	r19, Z+
    2a94:	da 01       	movw	r26, r20
    2a96:	3d 93       	st	X+, r19
    2a98:	ad 01       	movw	r20, r26
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	8c 91       	ld	r24, X
    2a9e:	88 23       	and	r24, r24
    2aa0:	11 f0       	breq	.+4      	; 0x2aa6 <xTaskGenericCreate+0x68>
    2aa2:	21 50       	subi	r18, 0x01	; 1
    2aa4:	a9 f7       	brne	.-22     	; 0x2a90 <xTaskGenericCreate+0x52>
    2aa6:	18 a2       	std	Y+32, r1	; 0x20
    2aa8:	10 2f       	mov	r17, r16
    2aaa:	05 30       	cpi	r16, 0x05	; 5
    2aac:	08 f0       	brcs	.+2      	; 0x2ab0 <xTaskGenericCreate+0x72>
    2aae:	14 e0       	ldi	r17, 0x04	; 4
    2ab0:	1e 8b       	std	Y+22, r17	; 0x16
    2ab2:	5e 01       	movw	r10, r28
    2ab4:	b2 e0       	ldi	r27, 0x02	; 2
    2ab6:	ab 0e       	add	r10, r27
    2ab8:	b1 1c       	adc	r11, r1
    2aba:	c5 01       	movw	r24, r10
    2abc:	80 dd       	rcall	.-1280   	; 0x25be <vListInitialiseItem>
    2abe:	ce 01       	movw	r24, r28
    2ac0:	0c 96       	adiw	r24, 0x0c	; 12
    2ac2:	7d dd       	rcall	.-1286   	; 0x25be <vListInitialiseItem>
    2ac4:	c8 87       	std	Y+8, r28	; 0x08
    2ac6:	d9 87       	std	Y+9, r29	; 0x09
    2ac8:	85 e0       	ldi	r24, 0x05	; 5
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	81 1b       	sub	r24, r17
    2ace:	91 09       	sbc	r25, r1
    2ad0:	8c 87       	std	Y+12, r24	; 0x0c
    2ad2:	9d 87       	std	Y+13, r25	; 0x0d
    2ad4:	ca 8b       	std	Y+18, r28	; 0x12
    2ad6:	db 8b       	std	Y+19, r29	; 0x13
    2ad8:	a3 01       	movw	r20, r6
    2ada:	b4 01       	movw	r22, r8
    2adc:	c6 01       	movw	r24, r12
    2ade:	eb dd       	rcall	.-1066   	; 0x26b6 <pxPortInitialiseStack>
    2ae0:	88 83       	st	Y, r24
    2ae2:	99 83       	std	Y+1, r25	; 0x01
    2ae4:	e1 14       	cp	r14, r1
    2ae6:	f1 04       	cpc	r15, r1
    2ae8:	19 f0       	breq	.+6      	; 0x2af0 <xTaskGenericCreate+0xb2>
    2aea:	f7 01       	movw	r30, r14
    2aec:	c0 83       	st	Z, r28
    2aee:	d1 83       	std	Z+1, r29	; 0x01
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	0f 92       	push	r0
    2af6:	80 91 96 23 	lds	r24, 0x2396
    2afa:	8f 5f       	subi	r24, 0xFF	; 255
    2afc:	80 93 96 23 	sts	0x2396, r24
    2b00:	80 91 e3 23 	lds	r24, 0x23E3
    2b04:	90 91 e4 23 	lds	r25, 0x23E4
    2b08:	89 2b       	or	r24, r25
    2b0a:	91 f5       	brne	.+100    	; 0x2b70 <xTaskGenericCreate+0x132>
    2b0c:	c0 93 e3 23 	sts	0x23E3, r28
    2b10:	d0 93 e4 23 	sts	0x23E4, r29
    2b14:	80 91 96 23 	lds	r24, 0x2396
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	c9 f5       	brne	.+114    	; 0x2b8e <xTaskGenericCreate+0x150>
    2b1c:	0f 2e       	mov	r0, r31
    2b1e:	f6 eb       	ldi	r31, 0xB6	; 182
    2b20:	ef 2e       	mov	r14, r31
    2b22:	f3 e2       	ldi	r31, 0x23	; 35
    2b24:	ff 2e       	mov	r15, r31
    2b26:	f0 2d       	mov	r31, r0
    2b28:	0f 2e       	mov	r0, r31
    2b2a:	f3 ee       	ldi	r31, 0xE3	; 227
    2b2c:	cf 2e       	mov	r12, r31
    2b2e:	f3 e2       	ldi	r31, 0x23	; 35
    2b30:	df 2e       	mov	r13, r31
    2b32:	f0 2d       	mov	r31, r0
    2b34:	c7 01       	movw	r24, r14
    2b36:	35 dd       	rcall	.-1430   	; 0x25a2 <vListInitialise>
    2b38:	f9 e0       	ldi	r31, 0x09	; 9
    2b3a:	ef 0e       	add	r14, r31
    2b3c:	f1 1c       	adc	r15, r1
    2b3e:	ec 14       	cp	r14, r12
    2b40:	fd 04       	cpc	r15, r13
    2b42:	c1 f7       	brne	.-16     	; 0x2b34 <xTaskGenericCreate+0xf6>
    2b44:	8d ea       	ldi	r24, 0xAD	; 173
    2b46:	93 e2       	ldi	r25, 0x23	; 35
    2b48:	2c dd       	rcall	.-1448   	; 0x25a2 <vListInitialise>
    2b4a:	84 ea       	ldi	r24, 0xA4	; 164
    2b4c:	93 e2       	ldi	r25, 0x23	; 35
    2b4e:	29 dd       	rcall	.-1454   	; 0x25a2 <vListInitialise>
    2b50:	87 e9       	ldi	r24, 0x97	; 151
    2b52:	93 e2       	ldi	r25, 0x23	; 35
    2b54:	26 dd       	rcall	.-1460   	; 0x25a2 <vListInitialise>
    2b56:	8d ea       	ldi	r24, 0xAD	; 173
    2b58:	93 e2       	ldi	r25, 0x23	; 35
    2b5a:	80 93 a2 23 	sts	0x23A2, r24
    2b5e:	90 93 a3 23 	sts	0x23A3, r25
    2b62:	84 ea       	ldi	r24, 0xA4	; 164
    2b64:	93 e2       	ldi	r25, 0x23	; 35
    2b66:	80 93 a0 23 	sts	0x23A0, r24
    2b6a:	90 93 a1 23 	sts	0x23A1, r25
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <xTaskGenericCreate+0x150>
    2b70:	80 91 92 23 	lds	r24, 0x2392
    2b74:	81 11       	cpse	r24, r1
    2b76:	0b c0       	rjmp	.+22     	; 0x2b8e <xTaskGenericCreate+0x150>
    2b78:	e0 91 e3 23 	lds	r30, 0x23E3
    2b7c:	f0 91 e4 23 	lds	r31, 0x23E4
    2b80:	86 89       	ldd	r24, Z+22	; 0x16
    2b82:	08 17       	cp	r16, r24
    2b84:	20 f0       	brcs	.+8      	; 0x2b8e <xTaskGenericCreate+0x150>
    2b86:	c0 93 e3 23 	sts	0x23E3, r28
    2b8a:	d0 93 e4 23 	sts	0x23E4, r29
    2b8e:	80 91 8e 23 	lds	r24, 0x238E
    2b92:	8f 5f       	subi	r24, 0xFF	; 255
    2b94:	80 93 8e 23 	sts	0x238E, r24
    2b98:	8e 89       	ldd	r24, Y+22	; 0x16
    2b9a:	90 91 93 23 	lds	r25, 0x2393
    2b9e:	98 17       	cp	r25, r24
    2ba0:	10 f4       	brcc	.+4      	; 0x2ba6 <xTaskGenericCreate+0x168>
    2ba2:	80 93 93 23 	sts	0x2393, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9c 01       	movw	r18, r24
    2baa:	22 0f       	add	r18, r18
    2bac:	33 1f       	adc	r19, r19
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	22 0f       	add	r18, r18
    2bb4:	33 1f       	adc	r19, r19
    2bb6:	82 0f       	add	r24, r18
    2bb8:	93 1f       	adc	r25, r19
    2bba:	b5 01       	movw	r22, r10
    2bbc:	8a 54       	subi	r24, 0x4A	; 74
    2bbe:	9c 4d       	sbci	r25, 0xDC	; 220
    2bc0:	02 dd       	rcall	.-1532   	; 0x25c6 <vListInsertEnd>
    2bc2:	0f 90       	pop	r0
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	80 91 92 23 	lds	r24, 0x2392
    2bca:	88 23       	and	r24, r24
    2bcc:	51 f0       	breq	.+20     	; 0x2be2 <xTaskGenericCreate+0x1a4>
    2bce:	e0 91 e3 23 	lds	r30, 0x23E3
    2bd2:	f0 91 e4 23 	lds	r31, 0x23E4
    2bd6:	86 89       	ldd	r24, Z+22	; 0x16
    2bd8:	80 17       	cp	r24, r16
    2bda:	28 f4       	brcc	.+10     	; 0x2be6 <xTaskGenericCreate+0x1a8>
    2bdc:	27 de       	rcall	.-946    	; 0x282c <vPortYield>
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	1c c0       	rjmp	.+56     	; 0x2c1a <xTaskGenericCreate+0x1dc>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	1a c0       	rjmp	.+52     	; 0x2c1a <xTaskGenericCreate+0x1dc>
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	18 c0       	rjmp	.+48     	; 0x2c1a <xTaskGenericCreate+0x1dc>
    2bea:	cf 8a       	std	Y+23, r12	; 0x17
    2bec:	d8 8e       	std	Y+24, r13	; 0x18
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	48 1a       	sub	r4, r24
    2bf2:	51 08       	sbc	r5, r1
    2bf4:	cf 88       	ldd	r12, Y+23	; 0x17
    2bf6:	d8 8c       	ldd	r13, Y+24	; 0x18
    2bf8:	c4 0c       	add	r12, r4
    2bfa:	d5 1c       	adc	r13, r5
    2bfc:	d5 01       	movw	r26, r10
    2bfe:	8c 91       	ld	r24, X
    2c00:	89 8f       	std	Y+25, r24	; 0x19
    2c02:	8c 91       	ld	r24, X
    2c04:	88 23       	and	r24, r24
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <xTaskGenericCreate+0x1cc>
    2c08:	4e cf       	rjmp	.-356    	; 0x2aa6 <xTaskGenericCreate+0x68>
    2c0a:	ae 01       	movw	r20, r28
    2c0c:	46 5e       	subi	r20, 0xE6	; 230
    2c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c10:	f5 01       	movw	r30, r10
    2c12:	31 96       	adiw	r30, 0x01	; 1
    2c14:	27 e0       	ldi	r18, 0x07	; 7
    2c16:	3c cf       	rjmp	.-392    	; 0x2a90 <xTaskGenericCreate+0x52>
    2c18:	8f ef       	ldi	r24, 0xFF	; 255
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	4f 90       	pop	r4
    2c3a:	08 95       	ret

00002c3c <vTaskStartScheduler>:
    2c3c:	af 92       	push	r10
    2c3e:	bf 92       	push	r11
    2c40:	cf 92       	push	r12
    2c42:	df 92       	push	r13
    2c44:	ef 92       	push	r14
    2c46:	ff 92       	push	r15
    2c48:	0f 93       	push	r16
    2c4a:	a1 2c       	mov	r10, r1
    2c4c:	b1 2c       	mov	r11, r1
    2c4e:	c1 2c       	mov	r12, r1
    2c50:	d1 2c       	mov	r13, r1
    2c52:	e1 2c       	mov	r14, r1
    2c54:	f1 2c       	mov	r15, r1
    2c56:	00 e0       	ldi	r16, 0x00	; 0
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	45 e5       	ldi	r20, 0x55	; 85
    2c5e:	50 e0       	ldi	r21, 0x00	; 0
    2c60:	6d e1       	ldi	r22, 0x1D	; 29
    2c62:	70 e2       	ldi	r23, 0x20	; 32
    2c64:	82 ee       	ldi	r24, 0xE2	; 226
    2c66:	94 e1       	ldi	r25, 0x14	; 20
    2c68:	ea de       	rcall	.-556    	; 0x2a3e <xTaskGenericCreate>
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	41 f4       	brne	.+16     	; 0x2c7e <vTaskStartScheduler+0x42>
    2c6e:	f8 94       	cli
    2c70:	80 93 92 23 	sts	0x2392, r24
    2c74:	10 92 94 23 	sts	0x2394, r1
    2c78:	10 92 95 23 	sts	0x2395, r1
    2c7c:	93 dd       	rcall	.-1242   	; 0x27a4 <xPortStartScheduler>
    2c7e:	0f 91       	pop	r16
    2c80:	ff 90       	pop	r15
    2c82:	ef 90       	pop	r14
    2c84:	df 90       	pop	r13
    2c86:	cf 90       	pop	r12
    2c88:	bf 90       	pop	r11
    2c8a:	af 90       	pop	r10
    2c8c:	08 95       	ret

00002c8e <vTaskSuspendAll>:
    2c8e:	80 91 8d 23 	lds	r24, 0x238D
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	80 93 8d 23 	sts	0x238D, r24
    2c98:	08 95       	ret

00002c9a <xTaskGetTickCount>:
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	0f 92       	push	r0
    2ca0:	80 91 94 23 	lds	r24, 0x2394
    2ca4:	90 91 95 23 	lds	r25, 0x2395
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	08 95       	ret

00002cae <xTaskIncrementTick>:
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	80 91 8d 23 	lds	r24, 0x238D
    2cc0:	81 11       	cpse	r24, r1
    2cc2:	b2 c0       	rjmp	.+356    	; 0x2e28 <xTaskIncrementTick+0x17a>
    2cc4:	80 91 94 23 	lds	r24, 0x2394
    2cc8:	90 91 95 23 	lds	r25, 0x2395
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	80 93 94 23 	sts	0x2394, r24
    2cd2:	90 93 95 23 	sts	0x2395, r25
    2cd6:	e0 90 94 23 	lds	r14, 0x2394
    2cda:	f0 90 95 23 	lds	r15, 0x2395
    2cde:	e1 14       	cp	r14, r1
    2ce0:	f1 04       	cpc	r15, r1
    2ce2:	99 f5       	brne	.+102    	; 0x2d4a <xTaskIncrementTick+0x9c>
    2ce4:	80 91 a2 23 	lds	r24, 0x23A2
    2ce8:	90 91 a3 23 	lds	r25, 0x23A3
    2cec:	20 91 a0 23 	lds	r18, 0x23A0
    2cf0:	30 91 a1 23 	lds	r19, 0x23A1
    2cf4:	20 93 a2 23 	sts	0x23A2, r18
    2cf8:	30 93 a3 23 	sts	0x23A3, r19
    2cfc:	80 93 a0 23 	sts	0x23A0, r24
    2d00:	90 93 a1 23 	sts	0x23A1, r25
    2d04:	80 91 8f 23 	lds	r24, 0x238F
    2d08:	8f 5f       	subi	r24, 0xFF	; 255
    2d0a:	80 93 8f 23 	sts	0x238F, r24
    2d0e:	e0 91 a2 23 	lds	r30, 0x23A2
    2d12:	f0 91 a3 23 	lds	r31, 0x23A3
    2d16:	80 81       	ld	r24, Z
    2d18:	81 11       	cpse	r24, r1
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <xTaskIncrementTick+0x7c>
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	9f ef       	ldi	r25, 0xFF	; 255
    2d20:	80 93 0e 20 	sts	0x200E, r24
    2d24:	90 93 0f 20 	sts	0x200F, r25
    2d28:	10 c0       	rjmp	.+32     	; 0x2d4a <xTaskIncrementTick+0x9c>
    2d2a:	e0 91 a2 23 	lds	r30, 0x23A2
    2d2e:	f0 91 a3 23 	lds	r31, 0x23A3
    2d32:	05 80       	ldd	r0, Z+5	; 0x05
    2d34:	f6 81       	ldd	r31, Z+6	; 0x06
    2d36:	e0 2d       	mov	r30, r0
    2d38:	06 80       	ldd	r0, Z+6	; 0x06
    2d3a:	f7 81       	ldd	r31, Z+7	; 0x07
    2d3c:	e0 2d       	mov	r30, r0
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	80 93 0e 20 	sts	0x200E, r24
    2d46:	90 93 0f 20 	sts	0x200F, r25
    2d4a:	80 91 0e 20 	lds	r24, 0x200E
    2d4e:	90 91 0f 20 	lds	r25, 0x200F
    2d52:	e8 16       	cp	r14, r24
    2d54:	f9 06       	cpc	r15, r25
    2d56:	08 f4       	brcc	.+2      	; 0x2d5a <xTaskIncrementTick+0xac>
    2d58:	50 c0       	rjmp	.+160    	; 0x2dfa <xTaskIncrementTick+0x14c>
    2d5a:	d1 2c       	mov	r13, r1
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <xTaskIncrementTick+0xb4>
    2d5e:	dd 24       	eor	r13, r13
    2d60:	d3 94       	inc	r13
    2d62:	e0 91 a2 23 	lds	r30, 0x23A2
    2d66:	f0 91 a3 23 	lds	r31, 0x23A3
    2d6a:	80 81       	ld	r24, Z
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	07 c0       	rjmp	.+14     	; 0x2d7e <xTaskIncrementTick+0xd0>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	9f ef       	ldi	r25, 0xFF	; 255
    2d74:	80 93 0e 20 	sts	0x200E, r24
    2d78:	90 93 0f 20 	sts	0x200F, r25
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <xTaskIncrementTick+0x14e>
    2d7e:	e0 91 a2 23 	lds	r30, 0x23A2
    2d82:	f0 91 a3 23 	lds	r31, 0x23A3
    2d86:	05 80       	ldd	r0, Z+5	; 0x05
    2d88:	f6 81       	ldd	r31, Z+6	; 0x06
    2d8a:	e0 2d       	mov	r30, r0
    2d8c:	c6 81       	ldd	r28, Z+6	; 0x06
    2d8e:	d7 81       	ldd	r29, Z+7	; 0x07
    2d90:	2a 81       	ldd	r18, Y+2	; 0x02
    2d92:	3b 81       	ldd	r19, Y+3	; 0x03
    2d94:	e2 16       	cp	r14, r18
    2d96:	f3 06       	cpc	r15, r19
    2d98:	28 f4       	brcc	.+10     	; 0x2da4 <xTaskIncrementTick+0xf6>
    2d9a:	20 93 0e 20 	sts	0x200E, r18
    2d9e:	30 93 0f 20 	sts	0x200F, r19
    2da2:	2c c0       	rjmp	.+88     	; 0x2dfc <xTaskIncrementTick+0x14e>
    2da4:	8e 01       	movw	r16, r28
    2da6:	0e 5f       	subi	r16, 0xFE	; 254
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	c8 01       	movw	r24, r16
    2dac:	5e dc       	rcall	.-1860   	; 0x266a <uxListRemove>
    2dae:	8c 89       	ldd	r24, Y+20	; 0x14
    2db0:	9d 89       	ldd	r25, Y+21	; 0x15
    2db2:	89 2b       	or	r24, r25
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <xTaskIncrementTick+0x10e>
    2db6:	ce 01       	movw	r24, r28
    2db8:	0c 96       	adiw	r24, 0x0c	; 12
    2dba:	57 dc       	rcall	.-1874   	; 0x266a <uxListRemove>
    2dbc:	2e 89       	ldd	r18, Y+22	; 0x16
    2dbe:	80 91 93 23 	lds	r24, 0x2393
    2dc2:	82 17       	cp	r24, r18
    2dc4:	10 f4       	brcc	.+4      	; 0x2dca <xTaskIncrementTick+0x11c>
    2dc6:	20 93 93 23 	sts	0x2393, r18
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	c9 01       	movw	r24, r18
    2dce:	88 0f       	add	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	88 0f       	add	r24, r24
    2dd4:	99 1f       	adc	r25, r25
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	82 0f       	add	r24, r18
    2ddc:	93 1f       	adc	r25, r19
    2dde:	b8 01       	movw	r22, r16
    2de0:	8a 54       	subi	r24, 0x4A	; 74
    2de2:	9c 4d       	sbci	r25, 0xDC	; 220
    2de4:	f0 db       	rcall	.-2080   	; 0x25c6 <vListInsertEnd>
    2de6:	e0 91 e3 23 	lds	r30, 0x23E3
    2dea:	f0 91 e4 23 	lds	r31, 0x23E4
    2dee:	9e 89       	ldd	r25, Y+22	; 0x16
    2df0:	86 89       	ldd	r24, Z+22	; 0x16
    2df2:	98 17       	cp	r25, r24
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <xTaskIncrementTick+0x14a>
    2df6:	b3 cf       	rjmp	.-154    	; 0x2d5e <xTaskIncrementTick+0xb0>
    2df8:	b4 cf       	rjmp	.-152    	; 0x2d62 <xTaskIncrementTick+0xb4>
    2dfa:	d1 2c       	mov	r13, r1
    2dfc:	e0 91 e3 23 	lds	r30, 0x23E3
    2e00:	f0 91 e4 23 	lds	r31, 0x23E4
    2e04:	86 89       	ldd	r24, Z+22	; 0x16
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	fc 01       	movw	r30, r24
    2e0a:	ee 0f       	add	r30, r30
    2e0c:	ff 1f       	adc	r31, r31
    2e0e:	ee 0f       	add	r30, r30
    2e10:	ff 1f       	adc	r31, r31
    2e12:	ee 0f       	add	r30, r30
    2e14:	ff 1f       	adc	r31, r31
    2e16:	8e 0f       	add	r24, r30
    2e18:	9f 1f       	adc	r25, r31
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	ea 54       	subi	r30, 0x4A	; 74
    2e1e:	fc 4d       	sbci	r31, 0xDC	; 220
    2e20:	80 81       	ld	r24, Z
    2e22:	82 30       	cpi	r24, 0x02	; 2
    2e24:	40 f4       	brcc	.+16     	; 0x2e36 <xTaskIncrementTick+0x188>
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <xTaskIncrementTick+0x18c>
    2e28:	80 91 91 23 	lds	r24, 0x2391
    2e2c:	8f 5f       	subi	r24, 0xFF	; 255
    2e2e:	80 93 91 23 	sts	0x2391, r24
    2e32:	d1 2c       	mov	r13, r1
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <xTaskIncrementTick+0x18c>
    2e36:	dd 24       	eor	r13, r13
    2e38:	d3 94       	inc	r13
    2e3a:	80 91 90 23 	lds	r24, 0x2390
    2e3e:	88 23       	and	r24, r24
    2e40:	11 f0       	breq	.+4      	; 0x2e46 <xTaskIncrementTick+0x198>
    2e42:	dd 24       	eor	r13, r13
    2e44:	d3 94       	inc	r13
    2e46:	8d 2d       	mov	r24, r13
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	08 95       	ret

00002e58 <xTaskResumeAll>:
    2e58:	df 92       	push	r13
    2e5a:	ef 92       	push	r14
    2e5c:	ff 92       	push	r15
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	0f 92       	push	r0
    2e6c:	80 91 8d 23 	lds	r24, 0x238D
    2e70:	81 50       	subi	r24, 0x01	; 1
    2e72:	80 93 8d 23 	sts	0x238D, r24
    2e76:	80 91 8d 23 	lds	r24, 0x238D
    2e7a:	81 11       	cpse	r24, r1
    2e7c:	5c c0       	rjmp	.+184    	; 0x2f36 <xTaskResumeAll+0xde>
    2e7e:	80 91 96 23 	lds	r24, 0x2396
    2e82:	88 23       	and	r24, r24
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <xTaskResumeAll+0x30>
    2e86:	59 c0       	rjmp	.+178    	; 0x2f3a <xTaskResumeAll+0xe2>
    2e88:	0f 2e       	mov	r0, r31
    2e8a:	f7 e9       	ldi	r31, 0x97	; 151
    2e8c:	ef 2e       	mov	r14, r31
    2e8e:	f3 e2       	ldi	r31, 0x23	; 35
    2e90:	ff 2e       	mov	r15, r31
    2e92:	f0 2d       	mov	r31, r0
    2e94:	dd 24       	eor	r13, r13
    2e96:	d3 94       	inc	r13
    2e98:	2d c0       	rjmp	.+90     	; 0x2ef4 <xTaskResumeAll+0x9c>
    2e9a:	e0 91 9c 23 	lds	r30, 0x239C
    2e9e:	f0 91 9d 23 	lds	r31, 0x239D
    2ea2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ea4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	0c 96       	adiw	r24, 0x0c	; 12
    2eaa:	df db       	rcall	.-2114   	; 0x266a <uxListRemove>
    2eac:	8e 01       	movw	r16, r28
    2eae:	0e 5f       	subi	r16, 0xFE	; 254
    2eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb2:	c8 01       	movw	r24, r16
    2eb4:	da db       	rcall	.-2124   	; 0x266a <uxListRemove>
    2eb6:	8e 89       	ldd	r24, Y+22	; 0x16
    2eb8:	90 91 93 23 	lds	r25, 0x2393
    2ebc:	98 17       	cp	r25, r24
    2ebe:	10 f4       	brcc	.+4      	; 0x2ec4 <xTaskResumeAll+0x6c>
    2ec0:	80 93 93 23 	sts	0x2393, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9c 01       	movw	r18, r24
    2ec8:	22 0f       	add	r18, r18
    2eca:	33 1f       	adc	r19, r19
    2ecc:	22 0f       	add	r18, r18
    2ece:	33 1f       	adc	r19, r19
    2ed0:	22 0f       	add	r18, r18
    2ed2:	33 1f       	adc	r19, r19
    2ed4:	82 0f       	add	r24, r18
    2ed6:	93 1f       	adc	r25, r19
    2ed8:	b8 01       	movw	r22, r16
    2eda:	8a 54       	subi	r24, 0x4A	; 74
    2edc:	9c 4d       	sbci	r25, 0xDC	; 220
    2ede:	73 db       	rcall	.-2330   	; 0x25c6 <vListInsertEnd>
    2ee0:	e0 91 e3 23 	lds	r30, 0x23E3
    2ee4:	f0 91 e4 23 	lds	r31, 0x23E4
    2ee8:	9e 89       	ldd	r25, Y+22	; 0x16
    2eea:	86 89       	ldd	r24, Z+22	; 0x16
    2eec:	98 17       	cp	r25, r24
    2eee:	10 f0       	brcs	.+4      	; 0x2ef4 <xTaskResumeAll+0x9c>
    2ef0:	d0 92 90 23 	sts	0x2390, r13
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	80 81       	ld	r24, Z
    2ef8:	81 11       	cpse	r24, r1
    2efa:	cf cf       	rjmp	.-98     	; 0x2e9a <xTaskResumeAll+0x42>
    2efc:	80 91 91 23 	lds	r24, 0x2391
    2f00:	88 23       	and	r24, r24
    2f02:	91 f0       	breq	.+36     	; 0x2f28 <xTaskResumeAll+0xd0>
    2f04:	80 91 91 23 	lds	r24, 0x2391
    2f08:	88 23       	and	r24, r24
    2f0a:	71 f0       	breq	.+28     	; 0x2f28 <xTaskResumeAll+0xd0>
    2f0c:	c1 e0       	ldi	r28, 0x01	; 1
    2f0e:	cf de       	rcall	.-610    	; 0x2cae <xTaskIncrementTick>
    2f10:	81 11       	cpse	r24, r1
    2f12:	c0 93 90 23 	sts	0x2390, r28
    2f16:	80 91 91 23 	lds	r24, 0x2391
    2f1a:	81 50       	subi	r24, 0x01	; 1
    2f1c:	80 93 91 23 	sts	0x2391, r24
    2f20:	80 91 91 23 	lds	r24, 0x2391
    2f24:	81 11       	cpse	r24, r1
    2f26:	f3 cf       	rjmp	.-26     	; 0x2f0e <xTaskResumeAll+0xb6>
    2f28:	80 91 90 23 	lds	r24, 0x2390
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	39 f4       	brne	.+14     	; 0x2f3e <xTaskResumeAll+0xe6>
    2f30:	7d dc       	rcall	.-1798   	; 0x282c <vPortYield>
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	05 c0       	rjmp	.+10     	; 0x2f40 <xTaskResumeAll+0xe8>
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <xTaskResumeAll+0xe8>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <xTaskResumeAll+0xe8>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	0f 90       	pop	r0
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	08 95       	ret

00002f54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	91 f0       	breq	.+36     	; 0x2f82 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    2f5e:	97 de       	rcall	.-722    	; 0x2c8e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2f60:	80 91 94 23 	lds	r24, 0x2394
    2f64:	90 91 95 23 	lds	r25, 0x2395
    2f68:	c8 0f       	add	r28, r24
    2f6a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    2f6c:	80 91 e3 23 	lds	r24, 0x23E3
    2f70:	90 91 e4 23 	lds	r25, 0x23E4
    2f74:	02 96       	adiw	r24, 0x02	; 2
    2f76:	79 db       	rcall	.-2318   	; 0x266a <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2f78:	ce 01       	movw	r24, r28
    2f7a:	2c dd       	rcall	.-1448   	; 0x29d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2f7c:	6d df       	rcall	.-294    	; 0x2e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2f7e:	81 11       	cpse	r24, r1
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    2f82:	54 dc       	rcall	.-1880   	; 0x282c <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2f84:	df 91       	pop	r29
    2f86:	cf 91       	pop	r28
    2f88:	08 95       	ret

00002f8a <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2f8a:	80 91 8d 23 	lds	r24, 0x238D
    2f8e:	88 23       	and	r24, r24
    2f90:	21 f0       	breq	.+8      	; 0x2f9a <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	80 93 90 23 	sts	0x2390, r24
    2f98:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    2f9a:	10 92 90 23 	sts	0x2390, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2f9e:	80 91 93 23 	lds	r24, 0x2393
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	ee 0f       	add	r30, r30
    2fa8:	ff 1f       	adc	r31, r31
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	ee 0f       	add	r30, r30
    2fb0:	ff 1f       	adc	r31, r31
    2fb2:	8e 0f       	add	r24, r30
    2fb4:	9f 1f       	adc	r25, r31
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	ea 54       	subi	r30, 0x4A	; 74
    2fba:	fc 4d       	sbci	r31, 0xDC	; 220
    2fbc:	80 81       	ld	r24, Z
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	17 c0       	rjmp	.+46     	; 0x2ff0 <vTaskSwitchContext+0x66>
    2fc2:	80 91 93 23 	lds	r24, 0x2393
    2fc6:	81 50       	subi	r24, 0x01	; 1
    2fc8:	80 93 93 23 	sts	0x2393, r24
    2fcc:	80 91 93 23 	lds	r24, 0x2393
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	fc 01       	movw	r30, r24
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	ee 0f       	add	r30, r30
    2fda:	ff 1f       	adc	r31, r31
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	8e 0f       	add	r24, r30
    2fe2:	9f 1f       	adc	r25, r31
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	ea 54       	subi	r30, 0x4A	; 74
    2fe8:	fc 4d       	sbci	r31, 0xDC	; 220
    2fea:	80 81       	ld	r24, Z
    2fec:	88 23       	and	r24, r24
    2fee:	49 f3       	breq	.-46     	; 0x2fc2 <vTaskSwitchContext+0x38>
    2ff0:	e0 91 93 23 	lds	r30, 0x2393
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	cf 01       	movw	r24, r30
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25
    3004:	e8 0f       	add	r30, r24
    3006:	f9 1f       	adc	r31, r25
    3008:	ea 54       	subi	r30, 0x4A	; 74
    300a:	fc 4d       	sbci	r31, 0xDC	; 220
    300c:	a1 81       	ldd	r26, Z+1	; 0x01
    300e:	b2 81       	ldd	r27, Z+2	; 0x02
    3010:	12 96       	adiw	r26, 0x02	; 2
    3012:	0d 90       	ld	r0, X+
    3014:	bc 91       	ld	r27, X
    3016:	a0 2d       	mov	r26, r0
    3018:	a1 83       	std	Z+1, r26	; 0x01
    301a:	b2 83       	std	Z+2, r27	; 0x02
    301c:	cf 01       	movw	r24, r30
    301e:	03 96       	adiw	r24, 0x03	; 3
    3020:	a8 17       	cp	r26, r24
    3022:	b9 07       	cpc	r27, r25
    3024:	31 f4       	brne	.+12     	; 0x3032 <vTaskSwitchContext+0xa8>
    3026:	12 96       	adiw	r26, 0x02	; 2
    3028:	8d 91       	ld	r24, X+
    302a:	9c 91       	ld	r25, X
    302c:	13 97       	sbiw	r26, 0x03	; 3
    302e:	81 83       	std	Z+1, r24	; 0x01
    3030:	92 83       	std	Z+2, r25	; 0x02
    3032:	01 80       	ldd	r0, Z+1	; 0x01
    3034:	f2 81       	ldd	r31, Z+2	; 0x02
    3036:	e0 2d       	mov	r30, r0
    3038:	86 81       	ldd	r24, Z+6	; 0x06
    303a:	97 81       	ldd	r25, Z+7	; 0x07
    303c:	80 93 e3 23 	sts	0x23E3, r24
    3040:	90 93 e4 23 	sts	0x23E4, r25
    3044:	08 95       	ret

00003046 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    3046:	8f ef       	ldi	r24, 0xFF	; 255
    3048:	80 93 70 00 	sts	0x0070, r24
    304c:	80 93 71 00 	sts	0x0071, r24
    3050:	80 93 72 00 	sts	0x0072, r24
    3054:	80 93 73 00 	sts	0x0073, r24
    3058:	80 93 74 00 	sts	0x0074, r24
    305c:	80 93 75 00 	sts	0x0075, r24
    3060:	80 93 76 00 	sts	0x0076, r24
    3064:	08 95       	ret

00003066 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3066:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3068:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    306a:	e8 2f       	mov	r30, r24
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	e0 59       	subi	r30, 0x90	; 144
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	60 95       	com	r22
    3074:	80 81       	ld	r24, Z
    3076:	68 23       	and	r22, r24
    3078:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    307a:	9f bf       	out	0x3f, r25	; 63
    307c:	08 95       	ret

0000307e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	fc 01       	movw	r30, r24
    3084:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    308a:	c6 2f       	mov	r28, r22
    308c:	d0 e0       	ldi	r29, 0x00	; 0
    308e:	de 01       	movw	r26, r28
    3090:	02 2e       	mov	r0, r18
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <ioport_configure_port_pin+0x1a>
    3094:	b5 95       	asr	r27
    3096:	a7 95       	ror	r26
    3098:	0a 94       	dec	r0
    309a:	e2 f7       	brpl	.-8      	; 0x3094 <ioport_configure_port_pin+0x16>
    309c:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    309e:	50 83       	st	Z, r21
    30a0:	2f 5f       	subi	r18, 0xFF	; 255
    30a2:	3f 4f       	sbci	r19, 0xFF	; 255
    30a4:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    30a6:	28 30       	cpi	r18, 0x08	; 8
    30a8:	31 05       	cpc	r19, r1
    30aa:	89 f7       	brne	.-30     	; 0x308e <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    30ac:	40 ff       	sbrs	r20, 0
    30ae:	0a c0       	rjmp	.+20     	; 0x30c4 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    30b0:	41 ff       	sbrs	r20, 1
    30b2:	03 c0       	rjmp	.+6      	; 0x30ba <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    30b4:	fc 01       	movw	r30, r24
    30b6:	65 83       	std	Z+5, r22	; 0x05
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    30ba:	fc 01       	movw	r30, r24
    30bc:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    30be:	fc 01       	movw	r30, r24
    30c0:	61 83       	std	Z+1, r22	; 0x01
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    30c4:	fc 01       	movw	r30, r24
    30c6:	62 83       	std	Z+2, r22	; 0x02
	}
}
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	08 95       	ret

000030ce <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    30ce:	43 e0       	ldi	r20, 0x03	; 3
    30d0:	50 e0       	ldi	r21, 0x00	; 0
    30d2:	61 e0       	ldi	r22, 0x01	; 1
    30d4:	80 ee       	ldi	r24, 0xE0	; 224
    30d6:	97 e0       	ldi	r25, 0x07	; 7
    30d8:	d2 df       	rcall	.-92     	; 0x307e <ioport_configure_port_pin>
    30da:	43 e0       	ldi	r20, 0x03	; 3
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	62 e0       	ldi	r22, 0x02	; 2
    30e0:	80 ee       	ldi	r24, 0xE0	; 224
    30e2:	97 e0       	ldi	r25, 0x07	; 7
    30e4:	cc df       	rcall	.-104    	; 0x307e <ioport_configure_port_pin>
    30e6:	43 e0       	ldi	r20, 0x03	; 3
    30e8:	50 e0       	ldi	r21, 0x00	; 0
    30ea:	60 e1       	ldi	r22, 0x10	; 16
    30ec:	80 e6       	ldi	r24, 0x60	; 96
    30ee:	96 e0       	ldi	r25, 0x06	; 6
    30f0:	c6 df       	rcall	.-116    	; 0x307e <ioport_configure_port_pin>
    30f2:	41 e0       	ldi	r20, 0x01	; 1
    30f4:	50 e4       	ldi	r21, 0x40	; 64
    30f6:	60 e2       	ldi	r22, 0x20	; 32
    30f8:	80 e6       	ldi	r24, 0x60	; 96
    30fa:	96 e0       	ldi	r25, 0x06	; 6
    30fc:	c0 df       	rcall	.-128    	; 0x307e <ioport_configure_port_pin>
    30fe:	40 e0       	ldi	r20, 0x00	; 0
    3100:	5b e1       	ldi	r21, 0x1B	; 27
    3102:	60 e2       	ldi	r22, 0x20	; 32
    3104:	80 e8       	ldi	r24, 0x80	; 128
    3106:	96 e0       	ldi	r25, 0x06	; 6
    3108:	ba df       	rcall	.-140    	; 0x307e <ioport_configure_port_pin>
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	5b e1       	ldi	r21, 0x1B	; 27
    310e:	62 e0       	ldi	r22, 0x02	; 2
    3110:	80 ea       	ldi	r24, 0xA0	; 160
    3112:	96 e0       	ldi	r25, 0x06	; 6
    3114:	b4 df       	rcall	.-152    	; 0x307e <ioport_configure_port_pin>
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	5b e1       	ldi	r21, 0x1B	; 27
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	80 ea       	ldi	r24, 0xA0	; 160
    311e:	96 e0       	ldi	r25, 0x06	; 6
    3120:	ae df       	rcall	.-164    	; 0x307e <ioport_configure_port_pin>
    3122:	43 e0       	ldi	r20, 0x03	; 3
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	62 e0       	ldi	r22, 0x02	; 2
    3128:	80 e6       	ldi	r24, 0x60	; 96
    312a:	96 e0       	ldi	r25, 0x06	; 6
    312c:	a8 df       	rcall	.-176    	; 0x307e <ioport_configure_port_pin>
    312e:	43 e0       	ldi	r20, 0x03	; 3
    3130:	50 e0       	ldi	r21, 0x00	; 0
    3132:	68 e0       	ldi	r22, 0x08	; 8
    3134:	80 e6       	ldi	r24, 0x60	; 96
    3136:	96 e0       	ldi	r25, 0x06	; 6
    3138:	a2 df       	rcall	.-188    	; 0x307e <ioport_configure_port_pin>
    313a:	43 e0       	ldi	r20, 0x03	; 3
    313c:	50 e0       	ldi	r21, 0x00	; 0
    313e:	68 e0       	ldi	r22, 0x08	; 8
    3140:	80 ea       	ldi	r24, 0xA0	; 160
    3142:	96 e0       	ldi	r25, 0x06	; 6
    3144:	9c df       	rcall	.-200    	; 0x307e <ioport_configure_port_pin>
    3146:	43 e0       	ldi	r20, 0x03	; 3
    3148:	50 e0       	ldi	r21, 0x00	; 0
    314a:	61 e0       	ldi	r22, 0x01	; 1
    314c:	80 e6       	ldi	r24, 0x60	; 96
    314e:	96 e0       	ldi	r25, 0x06	; 6
    3150:	96 df       	rcall	.-212    	; 0x307e <ioport_configure_port_pin>
    3152:	43 e0       	ldi	r20, 0x03	; 3
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	68 e0       	ldi	r22, 0x08	; 8
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	96 e0       	ldi	r25, 0x06	; 6
    315c:	90 df       	rcall	.-224    	; 0x307e <ioport_configure_port_pin>
    315e:	41 e0       	ldi	r20, 0x01	; 1
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	60 e1       	ldi	r22, 0x10	; 16
    3164:	80 e8       	ldi	r24, 0x80	; 128
    3166:	96 e0       	ldi	r25, 0x06	; 6
    3168:	8a cf       	rjmp	.-236    	; 0x307e <ioport_configure_port_pin>
    316a:	08 95       	ret

0000316c <commGate_OUT>:
	}*/
}

void switchDisplay(int dest){
	menuSelected = dest;
	switchDisp = true;
    316c:	ff cf       	rjmp	.-2      	; 0x316c <commGate_OUT>

0000316e <commGate_SIG>:
    316e:	60 91 eb 23 	lds	r22, 0x23EB
    3172:	45 e5       	ldi	r20, 0x55	; 85
    3174:	56 e0       	ldi	r21, 0x06	; 6
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	c4 e5       	ldi	r28, 0x54	; 84
    317c:	d6 e0       	ldi	r29, 0x06	; 6
    317e:	e0 ee       	ldi	r30, 0xE0	; 224
    3180:	f7 e0       	ldi	r31, 0x07	; 7
    3182:	12 e0       	ldi	r17, 0x02	; 2
    3184:	da 01       	movw	r26, r20
    3186:	2c 91       	ld	r18, X
    3188:	a2 2f       	mov	r26, r18
    318a:	a6 95       	lsr	r26
    318c:	a6 95       	lsr	r26
    318e:	a6 95       	lsr	r26
    3190:	30 e2       	ldi	r19, 0x20	; 32
    3192:	a3 9f       	mul	r26, r19
    3194:	d0 01       	movw	r26, r0
    3196:	11 24       	eor	r1, r1
    3198:	ba 5f       	subi	r27, 0xFA	; 250
    319a:	66 23       	and	r22, r22
    319c:	51 f0       	breq	.+20     	; 0x31b2 <commGate_SIG+0x44>
    319e:	27 70       	andi	r18, 0x07	; 7
    31a0:	7c 01       	movw	r14, r24
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <commGate_SIG+0x3a>
    31a4:	ee 0c       	add	r14, r14
    31a6:	ff 1c       	adc	r15, r15
    31a8:	2a 95       	dec	r18
    31aa:	e2 f7       	brpl	.-8      	; 0x31a4 <commGate_SIG+0x36>
    31ac:	15 96       	adiw	r26, 0x05	; 5
    31ae:	ec 92       	st	X, r14
    31b0:	09 c0       	rjmp	.+18     	; 0x31c4 <commGate_SIG+0x56>
    31b2:	27 70       	andi	r18, 0x07	; 7
    31b4:	7c 01       	movw	r14, r24
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <commGate_SIG+0x4e>
    31b8:	ee 0c       	add	r14, r14
    31ba:	ff 1c       	adc	r15, r15
    31bc:	2a 95       	dec	r18
    31be:	e2 f7       	brpl	.-8      	; 0x31b8 <commGate_SIG+0x4a>
    31c0:	16 96       	adiw	r26, 0x06	; 6
    31c2:	ec 92       	st	X, r14
    31c4:	38 81       	ld	r19, Y
    31c6:	a3 2f       	mov	r26, r19
    31c8:	a6 95       	lsr	r26
    31ca:	a6 95       	lsr	r26
    31cc:	a6 95       	lsr	r26
    31ce:	20 e2       	ldi	r18, 0x20	; 32
    31d0:	a2 9f       	mul	r26, r18
    31d2:	d0 01       	movw	r26, r0
    31d4:	11 24       	eor	r1, r1
    31d6:	ba 5f       	subi	r27, 0xFA	; 250
    31d8:	18 96       	adiw	r26, 0x08	; 8
    31da:	7c 91       	ld	r23, X
    31dc:	37 70       	andi	r19, 0x07	; 7
    31de:	dc 01       	movw	r26, r24
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <commGate_SIG+0x78>
    31e2:	aa 0f       	add	r26, r26
    31e4:	bb 1f       	adc	r27, r27
    31e6:	3a 95       	dec	r19
    31e8:	e2 f7       	brpl	.-8      	; 0x31e2 <commGate_SIG+0x74>
    31ea:	9d 01       	movw	r18, r26
    31ec:	27 23       	and	r18, r23
    31ee:	31 e0       	ldi	r19, 0x01	; 1
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <commGate_SIG+0x86>
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	30 93 ea 23 	sts	0x23EA, r19
    31f8:	66 23       	and	r22, r22
    31fa:	19 f0       	breq	.+6      	; 0x3202 <commGate_SIG+0x94>
    31fc:	21 e0       	ldi	r18, 0x01	; 1
    31fe:	25 83       	std	Z+5, r18	; 0x05
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <commGate_SIG+0x98>
    3202:	21 e0       	ldi	r18, 0x01	; 1
    3204:	26 83       	std	Z+6, r18	; 0x06
    3206:	33 23       	and	r19, r19
    3208:	11 f0       	breq	.+4      	; 0x320e <commGate_SIG+0xa0>
    320a:	15 83       	std	Z+5, r17	; 0x05
    320c:	bb cf       	rjmp	.-138    	; 0x3184 <commGate_SIG+0x16>
    320e:	16 83       	std	Z+6, r17	; 0x06
    3210:	b9 cf       	rjmp	.-142    	; 0x3184 <commGate_SIG+0x16>

00003212 <button>:
    3212:	c0 e8       	ldi	r28, 0x80	; 128
    3214:	d6 e0       	ldi	r29, 0x06	; 6
    3216:	00 ea       	ldi	r16, 0xA0	; 160
    3218:	16 e0       	ldi	r17, 0x06	; 6
    321a:	0f 2e       	mov	r0, r31
    321c:	f0 e6       	ldi	r31, 0x60	; 96
    321e:	cf 2e       	mov	r12, r31
    3220:	f6 e0       	ldi	r31, 0x06	; 6
    3222:	df 2e       	mov	r13, r31
    3224:	f0 2d       	mov	r31, r0
    3226:	68 94       	set
    3228:	33 24       	eor	r3, r3
    322a:	35 f8       	bld	r3, 5
    322c:	68 94       	set
    322e:	44 24       	eor	r4, r4
    3230:	44 f8       	bld	r4, 4
    3232:	0f 2e       	mov	r0, r31
    3234:	f0 ee       	ldi	r31, 0xE0	; 224
    3236:	ef 2e       	mov	r14, r31
    3238:	f7 e0       	ldi	r31, 0x07	; 7
    323a:	ff 2e       	mov	r15, r31
    323c:	f0 2d       	mov	r31, r0
    323e:	55 24       	eor	r5, r5
    3240:	53 94       	inc	r5
    3242:	0f 2e       	mov	r0, r31
    3244:	f3 e0       	ldi	r31, 0x03	; 3
    3246:	6f 2e       	mov	r6, r31
    3248:	71 2c       	mov	r7, r1
    324a:	f0 2d       	mov	r31, r0
    324c:	68 94       	set
    324e:	88 24       	eor	r8, r8
    3250:	81 f8       	bld	r8, 1
    3252:	91 2c       	mov	r9, r1
    3254:	aa 24       	eor	r10, r10
    3256:	a3 94       	inc	r10
    3258:	b1 2c       	mov	r11, r1
    325a:	82 e3       	ldi	r24, 0x32	; 50
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	7a de       	rcall	.-780    	; 0x2f54 <vTaskDelay>
    3260:	88 85       	ldd	r24, Y+8	; 0x08
    3262:	85 fd       	sbrc	r24, 5
    3264:	07 c0       	rjmp	.+14     	; 0x3274 <button+0x62>
    3266:	f7 01       	movw	r30, r14
    3268:	56 82       	std	Z+6, r5	; 0x06
    326a:	10 92 b1 24 	sts	0x24B1, r1
    326e:	10 92 b2 24 	sts	0x24B2, r1
    3272:	f3 cf       	rjmp	.-26     	; 0x325a <button+0x48>
    3274:	f8 01       	movw	r30, r16
    3276:	80 85       	ldd	r24, Z+8	; 0x08
    3278:	81 fd       	sbrc	r24, 1
    327a:	07 c0       	rjmp	.+14     	; 0x328a <button+0x78>
    327c:	f6 01       	movw	r30, r12
    327e:	46 82       	std	Z+6, r4	; 0x06
    3280:	a0 92 b1 24 	sts	0x24B1, r10
    3284:	b0 92 b2 24 	sts	0x24B2, r11
    3288:	e8 cf       	rjmp	.-48     	; 0x325a <button+0x48>
    328a:	f8 01       	movw	r30, r16
    328c:	80 85       	ldd	r24, Z+8	; 0x08
    328e:	82 fd       	sbrc	r24, 2
    3290:	07 c0       	rjmp	.+14     	; 0x32a0 <button+0x8e>
    3292:	f6 01       	movw	r30, r12
    3294:	36 82       	std	Z+6, r3	; 0x06
    3296:	80 92 b1 24 	sts	0x24B1, r8
    329a:	90 92 b2 24 	sts	0x24B2, r9
    329e:	dd cf       	rjmp	.-70     	; 0x325a <button+0x48>
    32a0:	f8 01       	movw	r30, r16
    32a2:	80 85       	ldd	r24, Z+8	; 0x08
    32a4:	81 ff       	sbrs	r24, 1
    32a6:	d9 cf       	rjmp	.-78     	; 0x325a <button+0x48>
    32a8:	80 85       	ldd	r24, Z+8	; 0x08
    32aa:	82 ff       	sbrs	r24, 2
    32ac:	d6 cf       	rjmp	.-84     	; 0x325a <button+0x48>
    32ae:	88 85       	ldd	r24, Y+8	; 0x08
    32b0:	85 ff       	sbrs	r24, 5
    32b2:	d3 cf       	rjmp	.-90     	; 0x325a <button+0x48>
    32b4:	f6 01       	movw	r30, r12
    32b6:	35 82       	std	Z+5, r3	; 0x05
    32b8:	45 82       	std	Z+5, r4	; 0x05
    32ba:	f7 01       	movw	r30, r14
    32bc:	55 82       	std	Z+5, r5	; 0x05
    32be:	60 92 b1 24 	sts	0x24B1, r6
    32c2:	70 92 b2 24 	sts	0x24B2, r7
    32c6:	c9 cf       	rjmp	.-110    	; 0x325a <button+0x48>

000032c8 <Touch>:
    32c8:	01 e0       	ldi	r16, 0x01	; 1
    32ca:	c0 ee       	ldi	r28, 0xE0	; 224
    32cc:	d7 e0       	ldi	r29, 0x07	; 7
    32ce:	12 e0       	ldi	r17, 0x02	; 2
    32d0:	0e 94 26 0b 	call	0x164c	; 0x164c <tb_is_touched>
    32d4:	80 27       	eor	r24, r16
    32d6:	80 93 b3 24 	sts	0x24B3, r24
    32da:	82 e3       	ldi	r24, 0x32	; 50
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	3a de       	rcall	.-908    	; 0x2f54 <vTaskDelay>
    32e0:	80 91 b3 24 	lds	r24, 0x24B3
    32e4:	88 23       	and	r24, r24
    32e6:	11 f0       	breq	.+4      	; 0x32ec <Touch+0x24>
    32e8:	1e 83       	std	Y+6, r17	; 0x06
    32ea:	f2 cf       	rjmp	.-28     	; 0x32d0 <Touch+0x8>
    32ec:	1d 83       	std	Y+5, r17	; 0x05
    32ee:	f0 cf       	rjmp	.-32     	; 0x32d0 <Touch+0x8>

000032f0 <menuNav>:
    32f0:	bb 24       	eor	r11, r11
    32f2:	b3 94       	inc	r11
    32f4:	0f 2e       	mov	r0, r31
    32f6:	f4 e1       	ldi	r31, 0x14	; 20
    32f8:	af 2e       	mov	r10, r31
    32fa:	f0 2d       	mov	r31, r0
    32fc:	0f 2e       	mov	r0, r31
    32fe:	f5 e1       	ldi	r31, 0x15	; 21
    3300:	9f 2e       	mov	r9, r31
    3302:	f0 2d       	mov	r31, r0
    3304:	02 e0       	ldi	r16, 0x02	; 2
    3306:	10 e0       	ldi	r17, 0x00	; 0
    3308:	68 94       	set
    330a:	cc 24       	eor	r12, r12
    330c:	c2 f8       	bld	r12, 2
    330e:	d1 2c       	mov	r13, r1
    3310:	0f 2e       	mov	r0, r31
    3312:	f3 e0       	ldi	r31, 0x03	; 3
    3314:	ef 2e       	mov	r14, r31
    3316:	f1 2c       	mov	r15, r1
    3318:	f0 2d       	mov	r31, r0
    331a:	c1 e0       	ldi	r28, 0x01	; 1
    331c:	d0 e0       	ldi	r29, 0x00	; 0
    331e:	82 e3       	ldi	r24, 0x32	; 50
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	18 de       	rcall	.-976    	; 0x2f54 <vTaskDelay>
    3324:	80 91 1b 20 	lds	r24, 0x201B
    3328:	90 91 1c 20 	lds	r25, 0x201C
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	89 f5       	brne	.+98     	; 0x3392 <menuNav+0xa2>
    3330:	80 91 b1 24 	lds	r24, 0x24B1
    3334:	90 91 b2 24 	lds	r25, 0x24B2
    3338:	89 2b       	or	r24, r25
    333a:	39 f4       	brne	.+14     	; 0x334a <menuNav+0x5a>
    333c:	c0 93 1b 20 	sts	0x201B, r28
    3340:	d0 93 1c 20 	sts	0x201C, r29
    3344:	b0 92 e9 23 	sts	0x23E9, r11
    3348:	19 c0       	rjmp	.+50     	; 0x337c <menuNav+0x8c>
    334a:	80 91 b1 24 	lds	r24, 0x24B1
    334e:	90 91 b2 24 	lds	r25, 0x24B2
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	39 f4       	brne	.+14     	; 0x3364 <menuNav+0x74>
    3356:	e0 92 1b 20 	sts	0x201B, r14
    335a:	f0 92 1c 20 	sts	0x201C, r15
    335e:	b0 92 e9 23 	sts	0x23E9, r11
    3362:	0c c0       	rjmp	.+24     	; 0x337c <menuNav+0x8c>
    3364:	80 91 b1 24 	lds	r24, 0x24B1
    3368:	90 91 b2 24 	lds	r25, 0x24B2
    336c:	02 97       	sbiw	r24, 0x02	; 2
    336e:	31 f4       	brne	.+12     	; 0x337c <menuNav+0x8c>
    3370:	c0 92 1b 20 	sts	0x201B, r12
    3374:	d0 92 1c 20 	sts	0x201C, r13
    3378:	b0 92 e9 23 	sts	0x23E9, r11
    337c:	80 91 b3 24 	lds	r24, 0x24B3
    3380:	88 23       	and	r24, r24
    3382:	69 f2       	breq	.-102    	; 0x331e <menuNav+0x2e>
    3384:	00 93 1b 20 	sts	0x201B, r16
    3388:	10 93 1c 20 	sts	0x201C, r17
    338c:	b0 92 e9 23 	sts	0x23E9, r11
    3390:	c6 cf       	rjmp	.-116    	; 0x331e <menuNav+0x2e>
    3392:	81 30       	cpi	r24, 0x01	; 1
    3394:	91 05       	cpc	r25, r1
    3396:	09 f0       	breq	.+2      	; 0x339a <menuNav+0xaa>
    3398:	3f c0       	rjmp	.+126    	; 0x3418 <menuNav+0x128>
    339a:	80 91 b1 24 	lds	r24, 0x24B1
    339e:	90 91 b2 24 	lds	r25, 0x24B2
    33a2:	89 2b       	or	r24, r25
    33a4:	39 f4       	brne	.+14     	; 0x33b4 <menuNav+0xc4>
    33a6:	10 92 1b 20 	sts	0x201B, r1
    33aa:	10 92 1c 20 	sts	0x201C, r1
    33ae:	b0 92 e9 23 	sts	0x23E9, r11
    33b2:	2f c0       	rjmp	.+94     	; 0x3412 <menuNav+0x122>
    33b4:	80 91 b1 24 	lds	r24, 0x24B1
    33b8:	90 91 b2 24 	lds	r25, 0x24B2
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	51 f4       	brne	.+20     	; 0x33d4 <menuNav+0xe4>
    33c0:	e2 e2       	ldi	r30, 0x22	; 34
    33c2:	f0 e2       	ldi	r31, 0x20	; 32
    33c4:	a7 e5       	ldi	r26, 0x57	; 87
    33c6:	b4 e2       	ldi	r27, 0x24	; 36
    33c8:	8a 2d       	mov	r24, r10
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	8a 95       	dec	r24
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <menuNav+0xda>
    33d2:	1f c0       	rjmp	.+62     	; 0x3412 <menuNav+0x122>
    33d4:	80 91 b1 24 	lds	r24, 0x24B1
    33d8:	90 91 b2 24 	lds	r25, 0x24B2
    33dc:	02 97       	sbiw	r24, 0x02	; 2
    33de:	51 f4       	brne	.+20     	; 0x33f4 <menuNav+0x104>
    33e0:	e6 e3       	ldi	r30, 0x36	; 54
    33e2:	f0 e2       	ldi	r31, 0x20	; 32
    33e4:	a7 e5       	ldi	r26, 0x57	; 87
    33e6:	b4 e2       	ldi	r27, 0x24	; 36
    33e8:	89 2d       	mov	r24, r9
    33ea:	01 90       	ld	r0, Z+
    33ec:	0d 92       	st	X+, r0
    33ee:	8a 95       	dec	r24
    33f0:	e1 f7       	brne	.-8      	; 0x33ea <menuNav+0xfa>
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <menuNav+0x122>
    33f4:	80 91 b1 24 	lds	r24, 0x24B1
    33f8:	90 91 b2 24 	lds	r25, 0x24B2
    33fc:	03 97       	sbiw	r24, 0x03	; 3
    33fe:	49 f4       	brne	.+18     	; 0x3412 <menuNav+0x122>
    3400:	eb e4       	ldi	r30, 0x4B	; 75
    3402:	f0 e2       	ldi	r31, 0x20	; 32
    3404:	a7 e5       	ldi	r26, 0x57	; 87
    3406:	b4 e2       	ldi	r27, 0x24	; 36
    3408:	8a 2d       	mov	r24, r10
    340a:	01 90       	ld	r0, Z+
    340c:	0d 92       	st	X+, r0
    340e:	8a 95       	dec	r24
    3410:	e1 f7       	brne	.-8      	; 0x340a <menuNav+0x11a>
    3412:	80 91 b3 24 	lds	r24, 0x24B3
    3416:	83 cf       	rjmp	.-250    	; 0x331e <menuNav+0x2e>
    3418:	82 30       	cpi	r24, 0x02	; 2
    341a:	91 05       	cpc	r25, r1
    341c:	d1 f4       	brne	.+52     	; 0x3452 <menuNav+0x162>
    341e:	80 91 b1 24 	lds	r24, 0x24B1
    3422:	90 91 b2 24 	lds	r25, 0x24B2
    3426:	89 2b       	or	r24, r25
    3428:	39 f4       	brne	.+14     	; 0x3438 <menuNav+0x148>
    342a:	10 92 1b 20 	sts	0x201B, r1
    342e:	10 92 1c 20 	sts	0x201C, r1
    3432:	b0 92 e9 23 	sts	0x23E9, r11
    3436:	0a c0       	rjmp	.+20     	; 0x344c <menuNav+0x15c>
    3438:	80 91 b1 24 	lds	r24, 0x24B1
    343c:	90 91 b2 24 	lds	r25, 0x24B2
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	21 f0       	breq	.+8      	; 0x344c <menuNav+0x15c>
    3444:	80 91 b1 24 	lds	r24, 0x24B1
    3448:	90 91 b2 24 	lds	r25, 0x24B2
    344c:	80 91 b3 24 	lds	r24, 0x24B3
    3450:	66 cf       	rjmp	.-308    	; 0x331e <menuNav+0x2e>
    3452:	83 30       	cpi	r24, 0x03	; 3
    3454:	91 05       	cpc	r25, r1
    3456:	09 f0       	breq	.+2      	; 0x345a <menuNav+0x16a>
    3458:	45 c0       	rjmp	.+138    	; 0x34e4 <menuNav+0x1f4>
    345a:	80 91 e7 23 	lds	r24, 0x23E7
    345e:	90 91 e8 23 	lds	r25, 0x23E8
    3462:	fc 01       	movw	r30, r24
    3464:	e8 50       	subi	r30, 0x08	; 8
    3466:	fc 4d       	sbci	r31, 0xDC	; 220
    3468:	40 81       	ld	r20, Z
    346a:	20 91 b1 24 	lds	r18, 0x24B1
    346e:	30 91 b2 24 	lds	r19, 0x24B2
    3472:	23 2b       	or	r18, r19
    3474:	39 f4       	brne	.+14     	; 0x3484 <menuNav+0x194>
    3476:	10 92 1b 20 	sts	0x201B, r1
    347a:	10 92 1c 20 	sts	0x201C, r1
    347e:	b0 92 e9 23 	sts	0x23E9, r11
    3482:	19 c0       	rjmp	.+50     	; 0x34b6 <menuNav+0x1c6>
    3484:	20 91 b1 24 	lds	r18, 0x24B1
    3488:	30 91 b2 24 	lds	r19, 0x24B2
    348c:	21 30       	cpi	r18, 0x01	; 1
    348e:	31 05       	cpc	r19, r1
    3490:	31 f4       	brne	.+12     	; 0x349e <menuNav+0x1ae>
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	80 93 e7 23 	sts	0x23E7, r24
    3498:	90 93 e8 23 	sts	0x23E8, r25
    349c:	0c c0       	rjmp	.+24     	; 0x34b6 <menuNav+0x1c6>
    349e:	20 91 b1 24 	lds	r18, 0x24B1
    34a2:	30 91 b2 24 	lds	r19, 0x24B2
    34a6:	22 30       	cpi	r18, 0x02	; 2
    34a8:	31 05       	cpc	r19, r1
    34aa:	29 f4       	brne	.+10     	; 0x34b6 <menuNav+0x1c6>
    34ac:	01 96       	adiw	r24, 0x01	; 1
    34ae:	80 93 e7 23 	sts	0x23E7, r24
    34b2:	90 93 e8 23 	sts	0x23E8, r25
    34b6:	80 91 b3 24 	lds	r24, 0x24B3
    34ba:	88 23       	and	r24, r24
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <menuNav+0x1d0>
    34be:	2f cf       	rjmp	.-418    	; 0x331e <menuNav+0x2e>
    34c0:	44 23       	and	r20, r20
    34c2:	41 f0       	breq	.+16     	; 0x34d4 <menuNav+0x1e4>
    34c4:	e0 91 e7 23 	lds	r30, 0x23E7
    34c8:	f0 91 e8 23 	lds	r31, 0x23E8
    34cc:	e8 50       	subi	r30, 0x08	; 8
    34ce:	fc 4d       	sbci	r31, 0xDC	; 220
    34d0:	10 82       	st	Z, r1
    34d2:	25 cf       	rjmp	.-438    	; 0x331e <menuNav+0x2e>
    34d4:	e0 91 e7 23 	lds	r30, 0x23E7
    34d8:	f0 91 e8 23 	lds	r31, 0x23E8
    34dc:	e8 50       	subi	r30, 0x08	; 8
    34de:	fc 4d       	sbci	r31, 0xDC	; 220
    34e0:	b0 82       	st	Z, r11
    34e2:	1d cf       	rjmp	.-454    	; 0x331e <menuNav+0x2e>
    34e4:	04 97       	sbiw	r24, 0x04	; 4
    34e6:	09 f0       	breq	.+2      	; 0x34ea <menuNav+0x1fa>
    34e8:	1a cf       	rjmp	.-460    	; 0x331e <menuNav+0x2e>
    34ea:	80 91 b1 24 	lds	r24, 0x24B1
    34ee:	90 91 b2 24 	lds	r25, 0x24B2
    34f2:	89 2b       	or	r24, r25
    34f4:	39 f4       	brne	.+14     	; 0x3504 <menuNav+0x214>
    34f6:	10 92 1b 20 	sts	0x201B, r1
    34fa:	10 92 1c 20 	sts	0x201C, r1
    34fe:	b0 92 e9 23 	sts	0x23E9, r11
    3502:	0a c0       	rjmp	.+20     	; 0x3518 <menuNav+0x228>
    3504:	80 91 b1 24 	lds	r24, 0x24B1
    3508:	90 91 b2 24 	lds	r25, 0x24B2
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	21 f0       	breq	.+8      	; 0x3518 <menuNav+0x228>
    3510:	80 91 b1 24 	lds	r24, 0x24B1
    3514:	90 91 b2 24 	lds	r25, 0x24B2
    3518:	80 91 b3 24 	lds	r24, 0x24B3
    351c:	00 cf       	rjmp	.-512    	; 0x331e <menuNav+0x2e>

0000351e <receiveString>:
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	c5 e2       	ldi	r28, 0x25	; 37
    3524:	d4 e2       	ldi	r29, 0x24	; 36
    3526:	80 ea       	ldi	r24, 0xA0	; 160
    3528:	98 e0       	ldi	r25, 0x08	; 8
    352a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <usart_getchar>
    352e:	8a 30       	cpi	r24, 0x0A	; 10
    3530:	11 f0       	breq	.+4      	; 0x3536 <receiveString+0x18>
    3532:	89 93       	st	Y+, r24
    3534:	f8 cf       	rjmp	.-16     	; 0x3526 <receiveString+0x8>
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	08 95       	ret

0000353c <commGate_IN>:
    353c:	80 e0       	ldi	r24, 0x00	; 0
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	09 dd       	rcall	.-1518   	; 0x2f54 <vTaskDelay>
    3542:	ed df       	rcall	.-38     	; 0x351e <receiveString>
    3544:	fb cf       	rjmp	.-10     	; 0x353c <commGate_IN>

00003546 <initMenu>:
}

void initMenu(void){
    3546:	9f 92       	push	r9
    3548:	af 92       	push	r10
    354a:	bf 92       	push	r11
    354c:	cf 92       	push	r12
    354e:	df 92       	push	r13
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
	
	int nn;
	for(nn=0; nn<=maxFeature; nn++){
    355c:	80 91 19 20 	lds	r24, 0x2019
    3560:	90 91 1a 20 	lds	r25, 0x201A
    3564:	99 23       	and	r25, r25
    3566:	bc f1       	brlt	.+110    	; 0x35d6 <initMenu+0x90>
    3568:	0f 2e       	mov	r0, r31
    356a:	f7 e0       	ldi	r31, 0x07	; 7
    356c:	af 2e       	mov	r10, r31
    356e:	f4 e2       	ldi	r31, 0x24	; 36
    3570:	bf 2e       	mov	r11, r31
    3572:	f0 2d       	mov	r31, r0
    3574:	0f 2e       	mov	r0, r31
    3576:	f8 ef       	ldi	r31, 0xF8	; 248
    3578:	cf 2e       	mov	r12, r31
    357a:	f3 e2       	ldi	r31, 0x23	; 35
    357c:	df 2e       	mov	r13, r31
    357e:	f0 2d       	mov	r31, r0
    3580:	c0 e0       	ldi	r28, 0x00	; 0
    3582:	d0 e0       	ldi	r29, 0x00	; 0
		//inisialisasi fitur, awalnya empty
		snprintf(strbuf_in, sizeof(strbuf_in),"empty", nn);
    3584:	0f 2e       	mov	r0, r31
    3586:	ff e5       	ldi	r31, 0x5F	; 95
    3588:	ef 2e       	mov	r14, r31
    358a:	f0 e2       	ldi	r31, 0x20	; 32
    358c:	ff 2e       	mov	r15, r31
    358e:	f0 2d       	mov	r31, r0
    3590:	0f 2e       	mov	r0, r31
    3592:	f4 e1       	ldi	r31, 0x14	; 20
    3594:	9f 2e       	mov	r9, r31
    3596:	f0 2d       	mov	r31, r0
    3598:	09 e8       	ldi	r16, 0x89	; 137
    359a:	14 e2       	ldi	r17, 0x24	; 36
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	ff 92       	push	r15
    35a2:	ef 92       	push	r14
    35a4:	1f 92       	push	r1
    35a6:	9f 92       	push	r9
    35a8:	1f 93       	push	r17
    35aa:	0f 93       	push	r16
    35ac:	3d d3       	rcall	.+1658   	; 0x3c28 <snprintf>
		featureList[nn] = strbuf_in;
    35ae:	f5 01       	movw	r30, r10
    35b0:	01 93       	st	Z+, r16
    35b2:	11 93       	st	Z+, r17
    35b4:	5f 01       	movw	r10, r30
		featureStat[nn] = false;
    35b6:	f6 01       	movw	r30, r12
    35b8:	11 92       	st	Z+, r1
    35ba:	6f 01       	movw	r12, r30
}

void initMenu(void){
	
	int nn;
	for(nn=0; nn<=maxFeature; nn++){
    35bc:	21 96       	adiw	r28, 0x01	; 1
    35be:	8d b7       	in	r24, 0x3d	; 61
    35c0:	9e b7       	in	r25, 0x3e	; 62
    35c2:	08 96       	adiw	r24, 0x08	; 8
    35c4:	8d bf       	out	0x3d, r24	; 61
    35c6:	9e bf       	out	0x3e, r25	; 62
    35c8:	80 91 19 20 	lds	r24, 0x2019
    35cc:	90 91 1a 20 	lds	r25, 0x201A
    35d0:	8c 17       	cp	r24, r28
    35d2:	9d 07       	cpc	r25, r29
    35d4:	1c f7       	brge	.-58     	; 0x359c <initMenu+0x56>
		//inisialisasi fitur, awalnya empty
		snprintf(strbuf_in, sizeof(strbuf_in),"empty", nn);
		featureList[nn] = strbuf_in;
		featureStat[nn] = false;
	}
	for(nn=0; nn<=maxStatus; nn++){
    35d6:	20 91 17 20 	lds	r18, 0x2017
    35da:	30 91 18 20 	lds	r19, 0x2018
    35de:	33 23       	and	r19, r19
    35e0:	64 f0       	brlt	.+24     	; 0x35fa <initMenu+0xb4>
    35e2:	ec ee       	ldi	r30, 0xEC	; 236
    35e4:	f3 e2       	ldi	r31, 0x23	; 35
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
		statusList[nn]="...";
    35ea:	45 e6       	ldi	r20, 0x65	; 101
    35ec:	50 e2       	ldi	r21, 0x20	; 32
    35ee:	41 93       	st	Z+, r20
    35f0:	51 93       	st	Z+, r21
		//inisialisasi fitur, awalnya empty
		snprintf(strbuf_in, sizeof(strbuf_in),"empty", nn);
		featureList[nn] = strbuf_in;
		featureStat[nn] = false;
	}
	for(nn=0; nn<=maxStatus; nn++){
    35f2:	01 96       	adiw	r24, 0x01	; 1
    35f4:	28 17       	cp	r18, r24
    35f6:	39 07       	cpc	r19, r25
    35f8:	d4 f7       	brge	.-12     	; 0x35ee <initMenu+0xa8>
		statusList[nn]="...";
	}
}
    35fa:	df 91       	pop	r29
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	df 90       	pop	r13
    3608:	cf 90       	pop	r12
    360a:	bf 90       	pop	r11
    360c:	af 90       	pop	r10
    360e:	9f 90       	pop	r9
    3610:	08 95       	ret

00003612 <printLCD>:
    3612:	80 e1       	ldi	r24, 0x10	; 16
    3614:	e0 e8       	ldi	r30, 0x80	; 128
    3616:	f6 e0       	ldi	r31, 0x06	; 6
    3618:	85 83       	std	Z+5, r24	; 0x05
	vTaskStartScheduler();
}

static portTASK_FUNCTION(printLCD, p_){
	ioport_set_pin_level(LCD_BACKLIGHT_ENABLE_PIN, 1);
	initMenu();
    361a:	95 df       	rcall	.-214    	; 0x3546 <initMenu>
			if(feature_selected<0) feature_selected=maxFeature;
			else if (feature_selected>maxFeature) feature_selected=0;
			
			gfx_mono_draw_string("==  Features Menu  ==",0,0,&sysfont);
			
			snprintf(strbuf_menu, sizeof(strbuf_menu), "Feature No.%2d", feature_selected+1);
    361c:	0f 2e       	mov	r0, r31
    361e:	f3 e0       	ldi	r31, 0x03	; 3
    3620:	ef 2e       	mov	r14, r31
    3622:	f1 e2       	ldi	r31, 0x21	; 33
    3624:	ff 2e       	mov	r15, r31
    3626:	f0 2d       	mov	r31, r0
    3628:	14 e1       	ldi	r17, 0x14	; 20
    362a:	cd e9       	ldi	r28, 0x9D	; 157
    362c:	d4 e2       	ldi	r29, 0x24	; 36
static portTASK_FUNCTION(printLCD, p_){
	ioport_set_pin_level(LCD_BACKLIGHT_ENABLE_PIN, 1);
	initMenu();
	while(1){
		
		if(switchDisp){
    362e:	80 91 e9 23 	lds	r24, 0x23E9
    3632:	88 23       	and	r24, r24
    3634:	89 f0       	breq	.+34     	; 0x3658 <printLCD+0x46>
			portENTER_CRITICAL();
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	0f 92       	push	r0
			gfx_mono_generic_draw_filled_rect(0,0,128,32,GFX_PIXEL_CLR);
    363c:	00 e0       	ldi	r16, 0x00	; 0
    363e:	20 e2       	ldi	r18, 0x20	; 32
    3640:	40 e8       	ldi	r20, 0x80	; 128
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	0e 94 30 12 	call	0x2460	; 0x2460 <gfx_mono_generic_draw_filled_rect>
			vTaskDelay(200/portTICK_PERIOD_MS);
    364a:	84 e6       	ldi	r24, 0x64	; 100
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	82 dc       	rcall	.-1788   	; 0x2f54 <vTaskDelay>
			portEXIT_CRITICAL();
    3650:	0f 90       	pop	r0
    3652:	0f be       	out	0x3f, r0	; 63
			switchDisp = false;
    3654:	10 92 e9 23 	sts	0x23E9, r1
		}
		
		//main menu
		if(menuSelected==0){
    3658:	20 91 1b 20 	lds	r18, 0x201B
    365c:	30 91 1c 20 	lds	r19, 0x201C
    3660:	21 15       	cp	r18, r1
    3662:	31 05       	cpc	r19, r1
    3664:	09 f5       	brne	.+66     	; 0x36a8 <printLCD+0x96>
			
			//snprintf(strbuf_menu, sizeof(strbuf_menu), "Menu %d", menuSelected);
			//gfx_mono_draw_string(strbuf_menu,0, 0, &sysfont);
			gfx_mono_draw_string("==GH Control Center==",0,0,&sysfont);
    3666:	27 e0       	ldi	r18, 0x07	; 7
    3668:	30 e2       	ldi	r19, 0x20	; 32
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	89 e6       	ldi	r24, 0x69	; 105
    3670:	90 e2       	ldi	r25, 0x20	; 32
    3672:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string("---------------------",0,(SYSFONT_HEIGHT*1)+1,&sysfont);
    3676:	27 e0       	ldi	r18, 0x07	; 7
    3678:	30 e2       	ldi	r19, 0x20	; 32
    367a:	48 e0       	ldi	r20, 0x08	; 8
    367c:	60 e0       	ldi	r22, 0x00	; 0
    367e:	8f e7       	ldi	r24, 0x7F	; 127
    3680:	90 e2       	ldi	r25, 0x20	; 32
    3682:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string("Ping         Features",0,(SYSFONT_HEIGHT*2)+1,&sysfont);
    3686:	27 e0       	ldi	r18, 0x07	; 7
    3688:	30 e2       	ldi	r19, 0x20	; 32
    368a:	4f e0       	ldi	r20, 0x0F	; 15
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	85 e9       	ldi	r24, 0x95	; 149
    3690:	90 e2       	ldi	r25, 0x20	; 32
    3692:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string("PingBrst    StatsDisp",0,(SYSFONT_HEIGHT*3)+2,&sysfont);	
    3696:	27 e0       	ldi	r18, 0x07	; 7
    3698:	30 e2       	ldi	r19, 0x20	; 32
    369a:	47 e1       	ldi	r20, 0x17	; 23
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	8b ea       	ldi	r24, 0xAB	; 171
    36a0:	90 e2       	ldi	r25, 0x20	; 32
    36a2:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
    36a6:	c2 c0       	rjmp	.+388    	; 0x382c <printLCD+0x21a>
		}
		//ping
		else if(menuSelected==1){
    36a8:	21 30       	cpi	r18, 0x01	; 1
    36aa:	31 05       	cpc	r19, r1
    36ac:	c9 f4       	brne	.+50     	; 0x36e0 <printLCD+0xce>
			gfx_mono_draw_string("==    Ping Menu    ==",0,0,&sysfont);
    36ae:	27 e0       	ldi	r18, 0x07	; 7
    36b0:	30 e2       	ldi	r19, 0x20	; 32
    36b2:	40 e0       	ldi	r20, 0x00	; 0
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	81 ec       	ldi	r24, 0xC1	; 193
    36b8:	90 e2       	ldi	r25, 0x20	; 32
    36ba:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			//if(still==still) gfx_mono_draw_string("still",0,(SYSFONT_HEIGHT*1)+1,&sysfont);
			gfx_mono_draw_string(strbuf_read,0,(SYSFONT_HEIGHT*1)+1,&sysfont);
    36be:	27 e0       	ldi	r18, 0x07	; 7
    36c0:	30 e2       	ldi	r19, 0x20	; 32
    36c2:	48 e0       	ldi	r20, 0x08	; 8
    36c4:	60 e0       	ldi	r22, 0x00	; 0
    36c6:	85 e2       	ldi	r24, 0x25	; 37
    36c8:	94 e2       	ldi	r25, 0x24	; 36
    36ca:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string(strbuf_send,0,(SYSFONT_HEIGHT*2)+1,&sysfont);
    36ce:	27 e0       	ldi	r18, 0x07	; 7
    36d0:	30 e2       	ldi	r19, 0x20	; 32
    36d2:	4f e0       	ldi	r20, 0x0F	; 15
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	87 e5       	ldi	r24, 0x57	; 87
    36d8:	94 e2       	ldi	r25, 0x24	; 36
    36da:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
    36de:	a6 c0       	rjmp	.+332    	; 0x382c <printLCD+0x21a>
		}
		//ping burst
		else if(menuSelected==2){
    36e0:	22 30       	cpi	r18, 0x02	; 2
    36e2:	31 05       	cpc	r19, r1
    36e4:	49 f4       	brne	.+18     	; 0x36f8 <printLCD+0xe6>
			gfx_mono_draw_string("==  PingBrst Menu  ==",0,0,&sysfont);
    36e6:	27 e0       	ldi	r18, 0x07	; 7
    36e8:	30 e2       	ldi	r19, 0x20	; 32
    36ea:	40 e0       	ldi	r20, 0x00	; 0
    36ec:	60 e0       	ldi	r22, 0x00	; 0
    36ee:	87 ed       	ldi	r24, 0xD7	; 215
    36f0:	90 e2       	ldi	r25, 0x20	; 32
    36f2:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
    36f6:	9a c0       	rjmp	.+308    	; 0x382c <printLCD+0x21a>
		}
		//features
		else if(menuSelected==3){
    36f8:	23 30       	cpi	r18, 0x03	; 3
    36fa:	31 05       	cpc	r19, r1
    36fc:	09 f0       	breq	.+2      	; 0x3700 <printLCD+0xee>
    36fe:	6d c0       	rjmp	.+218    	; 0x37da <printLCD+0x1c8>
			
			if(feature_selected<0) feature_selected=maxFeature;
    3700:	80 91 e7 23 	lds	r24, 0x23E7
    3704:	90 91 e8 23 	lds	r25, 0x23E8
    3708:	99 23       	and	r25, r25
    370a:	4c f4       	brge	.+18     	; 0x371e <printLCD+0x10c>
    370c:	80 91 19 20 	lds	r24, 0x2019
    3710:	90 91 1a 20 	lds	r25, 0x201A
    3714:	80 93 e7 23 	sts	0x23E7, r24
    3718:	90 93 e8 23 	sts	0x23E8, r25
    371c:	0b c0       	rjmp	.+22     	; 0x3734 <printLCD+0x122>
			else if (feature_selected>maxFeature) feature_selected=0;
    371e:	20 91 19 20 	lds	r18, 0x2019
    3722:	30 91 1a 20 	lds	r19, 0x201A
    3726:	28 17       	cp	r18, r24
    3728:	39 07       	cpc	r19, r25
    372a:	24 f4       	brge	.+8      	; 0x3734 <printLCD+0x122>
    372c:	10 92 e7 23 	sts	0x23E7, r1
    3730:	10 92 e8 23 	sts	0x23E8, r1
			
			gfx_mono_draw_string("==  Features Menu  ==",0,0,&sysfont);
    3734:	27 e0       	ldi	r18, 0x07	; 7
    3736:	30 e2       	ldi	r19, 0x20	; 32
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	60 e0       	ldi	r22, 0x00	; 0
    373c:	8d ee       	ldi	r24, 0xED	; 237
    373e:	90 e2       	ldi	r25, 0x20	; 32
    3740:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			
			snprintf(strbuf_menu, sizeof(strbuf_menu), "Feature No.%2d", feature_selected+1);
    3744:	80 91 e7 23 	lds	r24, 0x23E7
    3748:	90 91 e8 23 	lds	r25, 0x23E8
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	9f 93       	push	r25
    3750:	8f 93       	push	r24
    3752:	ff 92       	push	r15
    3754:	ef 92       	push	r14
    3756:	1f 92       	push	r1
    3758:	1f 93       	push	r17
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	64 d2       	rcall	.+1224   	; 0x3c28 <snprintf>
			gfx_mono_draw_string(strbuf_menu,0, (SYSFONT_HEIGHT)+1, &sysfont);
    3760:	27 e0       	ldi	r18, 0x07	; 7
    3762:	30 e2       	ldi	r19, 0x20	; 32
    3764:	48 e0       	ldi	r20, 0x08	; 8
    3766:	60 e0       	ldi	r22, 0x00	; 0
    3768:	ce 01       	movw	r24, r28
    376a:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string(featureList[feature_selected],0, (SYSFONT_HEIGHT*2)+1, &sysfont);
    376e:	e0 91 e7 23 	lds	r30, 0x23E7
    3772:	f0 91 e8 23 	lds	r31, 0x23E8
    3776:	ee 0f       	add	r30, r30
    3778:	ff 1f       	adc	r31, r31
    377a:	e9 5f       	subi	r30, 0xF9	; 249
    377c:	fb 4d       	sbci	r31, 0xDB	; 219
    377e:	27 e0       	ldi	r18, 0x07	; 7
    3780:	30 e2       	ldi	r19, 0x20	; 32
    3782:	4f e0       	ldi	r20, 0x0F	; 15
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			gfx_mono_draw_string("   A             B   ",0, (SYSFONT_HEIGHT*3)+3, &sysfont);
    378e:	27 e0       	ldi	r18, 0x07	; 7
    3790:	30 e2       	ldi	r19, 0x20	; 32
    3792:	48 e1       	ldi	r20, 0x18	; 24
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	82 e1       	ldi	r24, 0x12	; 18
    3798:	91 e2       	ldi	r25, 0x21	; 33
    379a:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			if(!featureStat[feature_selected]){
    379e:	e0 91 e7 23 	lds	r30, 0x23E7
    37a2:	f0 91 e8 23 	lds	r31, 0x23E8
    37a6:	e8 50       	subi	r30, 0x08	; 8
    37a8:	fc 4d       	sbci	r31, 0xDC	; 220
    37aa:	8d b7       	in	r24, 0x3d	; 61
    37ac:	9e b7       	in	r25, 0x3e	; 62
    37ae:	08 96       	adiw	r24, 0x08	; 8
    37b0:	8d bf       	out	0x3d, r24	; 61
    37b2:	9e bf       	out	0x3e, r25	; 62
    37b4:	80 81       	ld	r24, Z
    37b6:	81 11       	cpse	r24, r1
    37b8:	08 c0       	rjmp	.+16     	; 0x37ca <printLCD+0x1b8>
				gfx_mono_generic_draw_filled_rect((SYSFONT_WIDTH*2)-1,(SYSFONT_HEIGHT*3)+2,SYSFONT_WIDTH*3,SYSFONT_HEIGHT+2,GFX_PIXEL_XOR);
    37ba:	02 e0       	ldi	r16, 0x02	; 2
    37bc:	29 e0       	ldi	r18, 0x09	; 9
    37be:	42 e1       	ldi	r20, 0x12	; 18
    37c0:	67 e1       	ldi	r22, 0x17	; 23
    37c2:	8b e0       	ldi	r24, 0x0B	; 11
    37c4:	0e 94 30 12 	call	0x2460	; 0x2460 <gfx_mono_generic_draw_filled_rect>
    37c8:	31 c0       	rjmp	.+98     	; 0x382c <printLCD+0x21a>
			}else{
				gfx_mono_generic_draw_filled_rect((SYSFONT_WIDTH*16)-1,(SYSFONT_HEIGHT*3)+2,SYSFONT_WIDTH*3,SYSFONT_HEIGHT+2,GFX_PIXEL_XOR);
    37ca:	02 e0       	ldi	r16, 0x02	; 2
    37cc:	29 e0       	ldi	r18, 0x09	; 9
    37ce:	42 e1       	ldi	r20, 0x12	; 18
    37d0:	67 e1       	ldi	r22, 0x17	; 23
    37d2:	8f e5       	ldi	r24, 0x5F	; 95
    37d4:	0e 94 30 12 	call	0x2460	; 0x2460 <gfx_mono_generic_draw_filled_rect>
    37d8:	29 c0       	rjmp	.+82     	; 0x382c <printLCD+0x21a>
			}
		}
		//status display
		else if(menuSelected==4){
    37da:	24 30       	cpi	r18, 0x04	; 4
    37dc:	31 05       	cpc	r19, r1
    37de:	31 f5       	brne	.+76     	; 0x382c <printLCD+0x21a>
			gfx_mono_draw_string("==   SD's Status   ==",0,0,&sysfont);
    37e0:	27 e0       	ldi	r18, 0x07	; 7
    37e2:	30 e2       	ldi	r19, 0x20	; 32
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	88 e2       	ldi	r24, 0x28	; 40
    37ea:	91 e2       	ldi	r25, 0x21	; 33
    37ec:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
			int jj;
			for(jj=0; jj<maxStatus; jj++){
    37f0:	40 91 17 20 	lds	r20, 0x2017
    37f4:	50 91 18 20 	lds	r21, 0x2018
    37f8:	14 16       	cp	r1, r20
    37fa:	15 06       	cpc	r1, r21
    37fc:	3c f4       	brge	.+14     	; 0x380c <printLCD+0x1fa>
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	2f 5f       	subi	r18, 0xFF	; 255
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    3806:	24 17       	cp	r18, r20
    3808:	35 07       	cpc	r19, r21
    380a:	d9 f7       	brne	.-10     	; 0x3802 <printLCD+0x1f0>
				
			}
			gfx_mono_draw_string(statusList[status_displayed],0, (SYSFONT_HEIGHT)+1, &sysfont);
    380c:	e0 91 e5 23 	lds	r30, 0x23E5
    3810:	f0 91 e6 23 	lds	r31, 0x23E6
    3814:	ee 0f       	add	r30, r30
    3816:	ff 1f       	adc	r31, r31
    3818:	e4 51       	subi	r30, 0x14	; 20
    381a:	fc 4d       	sbci	r31, 0xDC	; 220
    381c:	27 e0       	ldi	r18, 0x07	; 7
    381e:	30 e2       	ldi	r19, 0x20	; 32
    3820:	48 e0       	ldi	r20, 0x08	; 8
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	80 81       	ld	r24, Z
    3826:	91 81       	ldd	r25, Z+1	; 0x01
    3828:	0e 94 a8 12 	call	0x2550	; 0x2550 <gfx_mono_draw_string>
		//snprintf(strbuf_menu, sizeof(strbuf_menu), "%d",selected_menu);
		//gfx_mono_draw_string(strbuf_menu,0, 0, &sysfont);
		//vTaskDelay(10/portTICK_PERIOD_MS);
		//gfx_mono_generic_draw_filled_rect(0,selected_menu*10,128,32,GFX_PIXEL_XOR);
		//vTaskDelay(1000/portTICK_PERIOD_MS);
		vTaskDelay(50/portTICK_PERIOD_MS);
    382c:	89 e1       	ldi	r24, 0x19	; 25
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	91 db       	rcall	.-2270   	; 0x2f54 <vTaskDelay>
		//gfx_mono_generic_draw_filled_rect(111,0,8,32,GFX_PIXEL_CLR);

	}
    3832:	fd ce       	rjmp	.-518    	; 0x362e <printLCD+0x1c>

00003834 <main>:

/************************************************************************/
/* Main                                                                     */
/************************************************************************/
int main (void)
{
    3834:	af 92       	push	r10
    3836:	bf 92       	push	r11
    3838:	cf 92       	push	r12
    383a:	df 92       	push	r13
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
	sysclk_init();
    3846:	ff db       	rcall	.-2050   	; 0x3046 <sysclk_init>
	board_init();
    3848:	42 dc       	rcall	.-1916   	; 0x30ce <board_init>

	gfx_mono_init();
    384a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <gfx_mono_st7565r_init>
	tb_init();
    384e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <tb_init>
	//adc_sensors_init();
	
	usart_init_rs232(USART_SERIAL_EXAMPLE, &USART_SERIAL_OPTIONS);
    3852:	60 e1       	ldi	r22, 0x10	; 16
    3854:	70 e2       	ldi	r23, 0x20	; 32
    3856:	80 ea       	ldi	r24, 0xA0	; 160
    3858:	98 e0       	ldi	r25, 0x08	; 8
    385a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <usart_init_rs232>
	//usart_set_mode(USART_SERIAL_EXAMPLE,USART_CMODE_SYNCHRONOUS_gc);
	
	PORTC_OUTCLR = PIN2_bm; //PC2 as RX
    385e:	86 e4       	ldi	r24, 0x46	; 70
    3860:	96 e0       	ldi	r25, 0x06	; 6
    3862:	24 e0       	ldi	r18, 0x04	; 4
    3864:	fc 01       	movw	r30, r24
    3866:	20 83       	st	Z, r18
	PORTC_DIRCLR = PIN2_bm; //RX pin as input
    3868:	c2 e4       	ldi	r28, 0x42	; 66
    386a:	d6 e0       	ldi	r29, 0x06	; 6
    386c:	28 83       	st	Y, r18
	
	PORTC_OUTSET = PIN3_bm; //PC3 as TX
    386e:	a5 e4       	ldi	r26, 0x45	; 69
    3870:	b6 e0       	ldi	r27, 0x06	; 6
    3872:	28 e0       	ldi	r18, 0x08	; 8
    3874:	2c 93       	st	X, r18
	PORTC_DIRSET = PIN3_bm; //TX pin as output
    3876:	41 e4       	ldi	r20, 0x41	; 65
    3878:	56 e0       	ldi	r21, 0x06	; 6
    387a:	fa 01       	movw	r30, r20
    387c:	20 83       	st	Z, r18
	
	PORTC_OUTCLR = PIN4_bm; //PC4 as sig-in
    387e:	30 e1       	ldi	r19, 0x10	; 16
    3880:	fc 01       	movw	r30, r24
    3882:	30 83       	st	Z, r19
	PORTC_DIRCLR = PIN4_bm; //PC4 pin as input
    3884:	38 83       	st	Y, r19
	
	PORTC_OUTSET = PIN3_bm; //PC5 as sig-out
    3886:	2c 93       	st	X, r18
	PORTC_DIRSET = PIN3_bm; //PC5 pin as output
    3888:	fa 01       	movw	r30, r20
    388a:	20 83       	st	Z, r18

	//setUpSerial();
	
	xTaskCreate(printLCD,"",500,NULL,1,NULL);
    388c:	a1 2c       	mov	r10, r1
    388e:	b1 2c       	mov	r11, r1
    3890:	c1 2c       	mov	r12, r1
    3892:	d1 2c       	mov	r13, r1
    3894:	e1 2c       	mov	r14, r1
    3896:	f1 2c       	mov	r15, r1
    3898:	01 e0       	ldi	r16, 0x01	; 1
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	44 ef       	ldi	r20, 0xF4	; 244
    38a0:	51 e0       	ldi	r21, 0x01	; 1
    38a2:	6a e4       	ldi	r22, 0x4A	; 74
    38a4:	70 e2       	ldi	r23, 0x20	; 32
    38a6:	89 e0       	ldi	r24, 0x09	; 9
    38a8:	9b e1       	ldi	r25, 0x1B	; 27
    38aa:	c9 d8       	rcall	.-3694   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(button,"",500,NULL,1,NULL);
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	44 ef       	ldi	r20, 0xF4	; 244
    38b2:	51 e0       	ldi	r21, 0x01	; 1
    38b4:	6a e4       	ldi	r22, 0x4A	; 74
    38b6:	70 e2       	ldi	r23, 0x20	; 32
    38b8:	89 e0       	ldi	r24, 0x09	; 9
    38ba:	99 e1       	ldi	r25, 0x19	; 25
    38bc:	c0 d8       	rcall	.-3712   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(menuNav,"",500,NULL,1,NULL);
    38be:	20 e0       	ldi	r18, 0x00	; 0
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	44 ef       	ldi	r20, 0xF4	; 244
    38c4:	51 e0       	ldi	r21, 0x01	; 1
    38c6:	6a e4       	ldi	r22, 0x4A	; 74
    38c8:	70 e2       	ldi	r23, 0x20	; 32
    38ca:	88 e7       	ldi	r24, 0x78	; 120
    38cc:	99 e1       	ldi	r25, 0x19	; 25
    38ce:	b7 d8       	rcall	.-3730   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(Touch, "", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	45 e5       	ldi	r20, 0x55	; 85
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	6a e4       	ldi	r22, 0x4A	; 74
    38da:	70 e2       	ldi	r23, 0x20	; 32
    38dc:	84 e6       	ldi	r24, 0x64	; 100
    38de:	99 e1       	ldi	r25, 0x19	; 25
    38e0:	ae d8       	rcall	.-3748   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(commGate_IN, "",500, NULL, 0, NULL);
    38e2:	00 e0       	ldi	r16, 0x00	; 0
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	44 ef       	ldi	r20, 0xF4	; 244
    38ea:	51 e0       	ldi	r21, 0x01	; 1
    38ec:	6a e4       	ldi	r22, 0x4A	; 74
    38ee:	70 e2       	ldi	r23, 0x20	; 32
    38f0:	8e e9       	ldi	r24, 0x9E	; 158
    38f2:	9a e1       	ldi	r25, 0x1A	; 26
    38f4:	a4 d8       	rcall	.-3768   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(commGate_OUT, "", 500, NULL, 0, NULL);
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	44 ef       	ldi	r20, 0xF4	; 244
    38fc:	51 e0       	ldi	r21, 0x01	; 1
    38fe:	6a e4       	ldi	r22, 0x4A	; 74
    3900:	70 e2       	ldi	r23, 0x20	; 32
    3902:	86 eb       	ldi	r24, 0xB6	; 182
    3904:	98 e1       	ldi	r25, 0x18	; 24
    3906:	9b d8       	rcall	.-3786   	; 0x2a3e <xTaskGenericCreate>
	xTaskCreate(commGate_SIG, "", 500, NULL, 0, NULL);
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	44 ef       	ldi	r20, 0xF4	; 244
    390e:	51 e0       	ldi	r21, 0x01	; 1
    3910:	6a e4       	ldi	r22, 0x4A	; 74
    3912:	70 e2       	ldi	r23, 0x20	; 32
    3914:	87 eb       	ldi	r24, 0xB7	; 183
    3916:	98 e1       	ldi	r25, 0x18	; 24
    3918:	92 d8       	rcall	.-3804   	; 0x2a3e <xTaskGenericCreate>

	
	vTaskStartScheduler();
    391a:	90 d9       	rcall	.-3296   	; 0x2c3c <vTaskStartScheduler>
}
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	df 91       	pop	r29
    3922:	cf 91       	pop	r28
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	cf 90       	pop	r12
    392e:	bf 90       	pop	r11
    3930:	af 90       	pop	r10
    3932:	08 95       	ret

00003934 <__udivmodsi4>:
    3934:	a1 e2       	ldi	r26, 0x21	; 33
    3936:	1a 2e       	mov	r1, r26
    3938:	aa 1b       	sub	r26, r26
    393a:	bb 1b       	sub	r27, r27
    393c:	fd 01       	movw	r30, r26
    393e:	0d c0       	rjmp	.+26     	; 0x395a <__udivmodsi4_ep>

00003940 <__udivmodsi4_loop>:
    3940:	aa 1f       	adc	r26, r26
    3942:	bb 1f       	adc	r27, r27
    3944:	ee 1f       	adc	r30, r30
    3946:	ff 1f       	adc	r31, r31
    3948:	a2 17       	cp	r26, r18
    394a:	b3 07       	cpc	r27, r19
    394c:	e4 07       	cpc	r30, r20
    394e:	f5 07       	cpc	r31, r21
    3950:	20 f0       	brcs	.+8      	; 0x395a <__udivmodsi4_ep>
    3952:	a2 1b       	sub	r26, r18
    3954:	b3 0b       	sbc	r27, r19
    3956:	e4 0b       	sbc	r30, r20
    3958:	f5 0b       	sbc	r31, r21

0000395a <__udivmodsi4_ep>:
    395a:	66 1f       	adc	r22, r22
    395c:	77 1f       	adc	r23, r23
    395e:	88 1f       	adc	r24, r24
    3960:	99 1f       	adc	r25, r25
    3962:	1a 94       	dec	r1
    3964:	69 f7       	brne	.-38     	; 0x3940 <__udivmodsi4_loop>
    3966:	60 95       	com	r22
    3968:	70 95       	com	r23
    396a:	80 95       	com	r24
    396c:	90 95       	com	r25
    396e:	9b 01       	movw	r18, r22
    3970:	ac 01       	movw	r20, r24
    3972:	bd 01       	movw	r22, r26
    3974:	cf 01       	movw	r24, r30
    3976:	08 95       	ret

00003978 <__prologue_saves__>:
    3978:	2f 92       	push	r2
    397a:	3f 92       	push	r3
    397c:	4f 92       	push	r4
    397e:	5f 92       	push	r5
    3980:	6f 92       	push	r6
    3982:	7f 92       	push	r7
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	ca 1b       	sub	r28, r26
    39a2:	db 0b       	sbc	r29, r27
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	19 94       	eijmp

000039aa <__epilogue_restores__>:
    39aa:	2a 88       	ldd	r2, Y+18	; 0x12
    39ac:	39 88       	ldd	r3, Y+17	; 0x11
    39ae:	48 88       	ldd	r4, Y+16	; 0x10
    39b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    39b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    39b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    39b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    39b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    39bc:	b9 84       	ldd	r11, Y+9	; 0x09
    39be:	c8 84       	ldd	r12, Y+8	; 0x08
    39c0:	df 80       	ldd	r13, Y+7	; 0x07
    39c2:	ee 80       	ldd	r14, Y+6	; 0x06
    39c4:	fd 80       	ldd	r15, Y+5	; 0x05
    39c6:	0c 81       	ldd	r16, Y+4	; 0x04
    39c8:	1b 81       	ldd	r17, Y+3	; 0x03
    39ca:	aa 81       	ldd	r26, Y+2	; 0x02
    39cc:	b9 81       	ldd	r27, Y+1	; 0x01
    39ce:	ce 0f       	add	r28, r30
    39d0:	d1 1d       	adc	r29, r1
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	ed 01       	movw	r28, r26
    39d8:	08 95       	ret

000039da <malloc>:
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	82 30       	cpi	r24, 0x02	; 2
    39e0:	91 05       	cpc	r25, r1
    39e2:	10 f4       	brcc	.+4      	; 0x39e8 <malloc+0xe>
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	e0 91 ba 24 	lds	r30, 0x24BA
    39ec:	f0 91 bb 24 	lds	r31, 0x24BB
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	a0 e0       	ldi	r26, 0x00	; 0
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	30 97       	sbiw	r30, 0x00	; 0
    39fa:	39 f1       	breq	.+78     	; 0x3a4a <malloc+0x70>
    39fc:	40 81       	ld	r20, Z
    39fe:	51 81       	ldd	r21, Z+1	; 0x01
    3a00:	48 17       	cp	r20, r24
    3a02:	59 07       	cpc	r21, r25
    3a04:	b8 f0       	brcs	.+46     	; 0x3a34 <malloc+0x5a>
    3a06:	48 17       	cp	r20, r24
    3a08:	59 07       	cpc	r21, r25
    3a0a:	71 f4       	brne	.+28     	; 0x3a28 <malloc+0x4e>
    3a0c:	82 81       	ldd	r24, Z+2	; 0x02
    3a0e:	93 81       	ldd	r25, Z+3	; 0x03
    3a10:	10 97       	sbiw	r26, 0x00	; 0
    3a12:	29 f0       	breq	.+10     	; 0x3a1e <malloc+0x44>
    3a14:	12 96       	adiw	r26, 0x02	; 2
    3a16:	8d 93       	st	X+, r24
    3a18:	9c 93       	st	X, r25
    3a1a:	13 97       	sbiw	r26, 0x03	; 3
    3a1c:	2c c0       	rjmp	.+88     	; 0x3a76 <malloc+0x9c>
    3a1e:	80 93 ba 24 	sts	0x24BA, r24
    3a22:	90 93 bb 24 	sts	0x24BB, r25
    3a26:	27 c0       	rjmp	.+78     	; 0x3a76 <malloc+0x9c>
    3a28:	21 15       	cp	r18, r1
    3a2a:	31 05       	cpc	r19, r1
    3a2c:	31 f0       	breq	.+12     	; 0x3a3a <malloc+0x60>
    3a2e:	42 17       	cp	r20, r18
    3a30:	53 07       	cpc	r21, r19
    3a32:	18 f0       	brcs	.+6      	; 0x3a3a <malloc+0x60>
    3a34:	a9 01       	movw	r20, r18
    3a36:	db 01       	movw	r26, r22
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <malloc+0x62>
    3a3a:	ef 01       	movw	r28, r30
    3a3c:	9a 01       	movw	r18, r20
    3a3e:	bd 01       	movw	r22, r26
    3a40:	df 01       	movw	r26, r30
    3a42:	02 80       	ldd	r0, Z+2	; 0x02
    3a44:	f3 81       	ldd	r31, Z+3	; 0x03
    3a46:	e0 2d       	mov	r30, r0
    3a48:	d7 cf       	rjmp	.-82     	; 0x39f8 <malloc+0x1e>
    3a4a:	21 15       	cp	r18, r1
    3a4c:	31 05       	cpc	r19, r1
    3a4e:	f9 f0       	breq	.+62     	; 0x3a8e <malloc+0xb4>
    3a50:	28 1b       	sub	r18, r24
    3a52:	39 0b       	sbc	r19, r25
    3a54:	24 30       	cpi	r18, 0x04	; 4
    3a56:	31 05       	cpc	r19, r1
    3a58:	80 f4       	brcc	.+32     	; 0x3a7a <malloc+0xa0>
    3a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a5e:	61 15       	cp	r22, r1
    3a60:	71 05       	cpc	r23, r1
    3a62:	21 f0       	breq	.+8      	; 0x3a6c <malloc+0x92>
    3a64:	fb 01       	movw	r30, r22
    3a66:	82 83       	std	Z+2, r24	; 0x02
    3a68:	93 83       	std	Z+3, r25	; 0x03
    3a6a:	04 c0       	rjmp	.+8      	; 0x3a74 <malloc+0x9a>
    3a6c:	80 93 ba 24 	sts	0x24BA, r24
    3a70:	90 93 bb 24 	sts	0x24BB, r25
    3a74:	fe 01       	movw	r30, r28
    3a76:	32 96       	adiw	r30, 0x02	; 2
    3a78:	44 c0       	rjmp	.+136    	; 0x3b02 <malloc+0x128>
    3a7a:	fe 01       	movw	r30, r28
    3a7c:	e2 0f       	add	r30, r18
    3a7e:	f3 1f       	adc	r31, r19
    3a80:	81 93       	st	Z+, r24
    3a82:	91 93       	st	Z+, r25
    3a84:	22 50       	subi	r18, 0x02	; 2
    3a86:	31 09       	sbc	r19, r1
    3a88:	28 83       	st	Y, r18
    3a8a:	39 83       	std	Y+1, r19	; 0x01
    3a8c:	3a c0       	rjmp	.+116    	; 0x3b02 <malloc+0x128>
    3a8e:	20 91 b8 24 	lds	r18, 0x24B8
    3a92:	30 91 b9 24 	lds	r19, 0x24B9
    3a96:	23 2b       	or	r18, r19
    3a98:	41 f4       	brne	.+16     	; 0x3aaa <malloc+0xd0>
    3a9a:	20 91 03 20 	lds	r18, 0x2003
    3a9e:	30 91 04 20 	lds	r19, 0x2004
    3aa2:	20 93 b8 24 	sts	0x24B8, r18
    3aa6:	30 93 b9 24 	sts	0x24B9, r19
    3aaa:	20 91 01 20 	lds	r18, 0x2001
    3aae:	30 91 02 20 	lds	r19, 0x2002
    3ab2:	21 15       	cp	r18, r1
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	41 f4       	brne	.+16     	; 0x3ac8 <malloc+0xee>
    3ab8:	2d b7       	in	r18, 0x3d	; 61
    3aba:	3e b7       	in	r19, 0x3e	; 62
    3abc:	40 91 05 20 	lds	r20, 0x2005
    3ac0:	50 91 06 20 	lds	r21, 0x2006
    3ac4:	24 1b       	sub	r18, r20
    3ac6:	35 0b       	sbc	r19, r21
    3ac8:	e0 91 b8 24 	lds	r30, 0x24B8
    3acc:	f0 91 b9 24 	lds	r31, 0x24B9
    3ad0:	e2 17       	cp	r30, r18
    3ad2:	f3 07       	cpc	r31, r19
    3ad4:	a0 f4       	brcc	.+40     	; 0x3afe <malloc+0x124>
    3ad6:	2e 1b       	sub	r18, r30
    3ad8:	3f 0b       	sbc	r19, r31
    3ada:	28 17       	cp	r18, r24
    3adc:	39 07       	cpc	r19, r25
    3ade:	78 f0       	brcs	.+30     	; 0x3afe <malloc+0x124>
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	4e 5f       	subi	r20, 0xFE	; 254
    3ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae6:	24 17       	cp	r18, r20
    3ae8:	35 07       	cpc	r19, r21
    3aea:	48 f0       	brcs	.+18     	; 0x3afe <malloc+0x124>
    3aec:	4e 0f       	add	r20, r30
    3aee:	5f 1f       	adc	r21, r31
    3af0:	40 93 b8 24 	sts	0x24B8, r20
    3af4:	50 93 b9 24 	sts	0x24B9, r21
    3af8:	81 93       	st	Z+, r24
    3afa:	91 93       	st	Z+, r25
    3afc:	02 c0       	rjmp	.+4      	; 0x3b02 <malloc+0x128>
    3afe:	e0 e0       	ldi	r30, 0x00	; 0
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	cf 01       	movw	r24, r30
    3b04:	df 91       	pop	r29
    3b06:	cf 91       	pop	r28
    3b08:	08 95       	ret

00003b0a <free>:
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <free+0xa>
    3b12:	87 c0       	rjmp	.+270    	; 0x3c22 <free+0x118>
    3b14:	fc 01       	movw	r30, r24
    3b16:	32 97       	sbiw	r30, 0x02	; 2
    3b18:	12 82       	std	Z+2, r1	; 0x02
    3b1a:	13 82       	std	Z+3, r1	; 0x03
    3b1c:	c0 91 ba 24 	lds	r28, 0x24BA
    3b20:	d0 91 bb 24 	lds	r29, 0x24BB
    3b24:	20 97       	sbiw	r28, 0x00	; 0
    3b26:	81 f4       	brne	.+32     	; 0x3b48 <free+0x3e>
    3b28:	20 81       	ld	r18, Z
    3b2a:	31 81       	ldd	r19, Z+1	; 0x01
    3b2c:	28 0f       	add	r18, r24
    3b2e:	39 1f       	adc	r19, r25
    3b30:	80 91 b8 24 	lds	r24, 0x24B8
    3b34:	90 91 b9 24 	lds	r25, 0x24B9
    3b38:	82 17       	cp	r24, r18
    3b3a:	93 07       	cpc	r25, r19
    3b3c:	79 f5       	brne	.+94     	; 0x3b9c <free+0x92>
    3b3e:	e0 93 b8 24 	sts	0x24B8, r30
    3b42:	f0 93 b9 24 	sts	0x24B9, r31
    3b46:	6d c0       	rjmp	.+218    	; 0x3c22 <free+0x118>
    3b48:	de 01       	movw	r26, r28
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	ae 17       	cp	r26, r30
    3b50:	bf 07       	cpc	r27, r31
    3b52:	50 f4       	brcc	.+20     	; 0x3b68 <free+0x5e>
    3b54:	12 96       	adiw	r26, 0x02	; 2
    3b56:	4d 91       	ld	r20, X+
    3b58:	5c 91       	ld	r21, X
    3b5a:	13 97       	sbiw	r26, 0x03	; 3
    3b5c:	9d 01       	movw	r18, r26
    3b5e:	41 15       	cp	r20, r1
    3b60:	51 05       	cpc	r21, r1
    3b62:	09 f1       	breq	.+66     	; 0x3ba6 <free+0x9c>
    3b64:	da 01       	movw	r26, r20
    3b66:	f3 cf       	rjmp	.-26     	; 0x3b4e <free+0x44>
    3b68:	a2 83       	std	Z+2, r26	; 0x02
    3b6a:	b3 83       	std	Z+3, r27	; 0x03
    3b6c:	40 81       	ld	r20, Z
    3b6e:	51 81       	ldd	r21, Z+1	; 0x01
    3b70:	84 0f       	add	r24, r20
    3b72:	95 1f       	adc	r25, r21
    3b74:	8a 17       	cp	r24, r26
    3b76:	9b 07       	cpc	r25, r27
    3b78:	71 f4       	brne	.+28     	; 0x3b96 <free+0x8c>
    3b7a:	8d 91       	ld	r24, X+
    3b7c:	9c 91       	ld	r25, X
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
    3b80:	84 0f       	add	r24, r20
    3b82:	95 1f       	adc	r25, r21
    3b84:	02 96       	adiw	r24, 0x02	; 2
    3b86:	80 83       	st	Z, r24
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	12 96       	adiw	r26, 0x02	; 2
    3b8c:	8d 91       	ld	r24, X+
    3b8e:	9c 91       	ld	r25, X
    3b90:	13 97       	sbiw	r26, 0x03	; 3
    3b92:	82 83       	std	Z+2, r24	; 0x02
    3b94:	93 83       	std	Z+3, r25	; 0x03
    3b96:	21 15       	cp	r18, r1
    3b98:	31 05       	cpc	r19, r1
    3b9a:	29 f4       	brne	.+10     	; 0x3ba6 <free+0x9c>
    3b9c:	e0 93 ba 24 	sts	0x24BA, r30
    3ba0:	f0 93 bb 24 	sts	0x24BB, r31
    3ba4:	3e c0       	rjmp	.+124    	; 0x3c22 <free+0x118>
    3ba6:	d9 01       	movw	r26, r18
    3ba8:	12 96       	adiw	r26, 0x02	; 2
    3baa:	ed 93       	st	X+, r30
    3bac:	fc 93       	st	X, r31
    3bae:	13 97       	sbiw	r26, 0x03	; 3
    3bb0:	4d 91       	ld	r20, X+
    3bb2:	5d 91       	ld	r21, X+
    3bb4:	a4 0f       	add	r26, r20
    3bb6:	b5 1f       	adc	r27, r21
    3bb8:	ea 17       	cp	r30, r26
    3bba:	fb 07       	cpc	r31, r27
    3bbc:	79 f4       	brne	.+30     	; 0x3bdc <free+0xd2>
    3bbe:	80 81       	ld	r24, Z
    3bc0:	91 81       	ldd	r25, Z+1	; 0x01
    3bc2:	84 0f       	add	r24, r20
    3bc4:	95 1f       	adc	r25, r21
    3bc6:	02 96       	adiw	r24, 0x02	; 2
    3bc8:	d9 01       	movw	r26, r18
    3bca:	8d 93       	st	X+, r24
    3bcc:	9c 93       	st	X, r25
    3bce:	11 97       	sbiw	r26, 0x01	; 1
    3bd0:	82 81       	ldd	r24, Z+2	; 0x02
    3bd2:	93 81       	ldd	r25, Z+3	; 0x03
    3bd4:	12 96       	adiw	r26, 0x02	; 2
    3bd6:	8d 93       	st	X+, r24
    3bd8:	9c 93       	st	X, r25
    3bda:	13 97       	sbiw	r26, 0x03	; 3
    3bdc:	e0 e0       	ldi	r30, 0x00	; 0
    3bde:	f0 e0       	ldi	r31, 0x00	; 0
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	9b 81       	ldd	r25, Y+3	; 0x03
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	19 f0       	breq	.+6      	; 0x3bee <free+0xe4>
    3be8:	fe 01       	movw	r30, r28
    3bea:	ec 01       	movw	r28, r24
    3bec:	f9 cf       	rjmp	.-14     	; 0x3be0 <free+0xd6>
    3bee:	ce 01       	movw	r24, r28
    3bf0:	02 96       	adiw	r24, 0x02	; 2
    3bf2:	28 81       	ld	r18, Y
    3bf4:	39 81       	ldd	r19, Y+1	; 0x01
    3bf6:	82 0f       	add	r24, r18
    3bf8:	93 1f       	adc	r25, r19
    3bfa:	20 91 b8 24 	lds	r18, 0x24B8
    3bfe:	30 91 b9 24 	lds	r19, 0x24B9
    3c02:	28 17       	cp	r18, r24
    3c04:	39 07       	cpc	r19, r25
    3c06:	69 f4       	brne	.+26     	; 0x3c22 <free+0x118>
    3c08:	30 97       	sbiw	r30, 0x00	; 0
    3c0a:	29 f4       	brne	.+10     	; 0x3c16 <free+0x10c>
    3c0c:	10 92 ba 24 	sts	0x24BA, r1
    3c10:	10 92 bb 24 	sts	0x24BB, r1
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <free+0x110>
    3c16:	12 82       	std	Z+2, r1	; 0x02
    3c18:	13 82       	std	Z+3, r1	; 0x03
    3c1a:	c0 93 b8 24 	sts	0x24B8, r28
    3c1e:	d0 93 b9 24 	sts	0x24B9, r29
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	08 95       	ret

00003c28 <snprintf>:
    3c28:	0f 93       	push	r16
    3c2a:	1f 93       	push	r17
    3c2c:	cf 93       	push	r28
    3c2e:	df 93       	push	r29
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	2e 97       	sbiw	r28, 0x0e	; 14
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0e 89       	ldd	r16, Y+22	; 0x16
    3c3c:	1f 89       	ldd	r17, Y+23	; 0x17
    3c3e:	88 8d       	ldd	r24, Y+24	; 0x18
    3c40:	99 8d       	ldd	r25, Y+25	; 0x19
    3c42:	26 e0       	ldi	r18, 0x06	; 6
    3c44:	2c 83       	std	Y+4, r18	; 0x04
    3c46:	09 83       	std	Y+1, r16	; 0x01
    3c48:	1a 83       	std	Y+2, r17	; 0x02
    3c4a:	97 ff       	sbrs	r25, 7
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <snprintf+0x2a>
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	90 e8       	ldi	r25, 0x80	; 128
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	8d 83       	std	Y+5, r24	; 0x05
    3c56:	9e 83       	std	Y+6, r25	; 0x06
    3c58:	ae 01       	movw	r20, r28
    3c5a:	44 5e       	subi	r20, 0xE4	; 228
    3c5c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c5e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c60:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3c62:	ce 01       	movw	r24, r28
    3c64:	01 96       	adiw	r24, 0x01	; 1
    3c66:	16 d0       	rcall	.+44     	; 0x3c94 <vfprintf>
    3c68:	4d 81       	ldd	r20, Y+5	; 0x05
    3c6a:	5e 81       	ldd	r21, Y+6	; 0x06
    3c6c:	57 fd       	sbrc	r21, 7
    3c6e:	0a c0       	rjmp	.+20     	; 0x3c84 <snprintf+0x5c>
    3c70:	2f 81       	ldd	r18, Y+7	; 0x07
    3c72:	38 85       	ldd	r19, Y+8	; 0x08
    3c74:	42 17       	cp	r20, r18
    3c76:	53 07       	cpc	r21, r19
    3c78:	0c f4       	brge	.+2      	; 0x3c7c <snprintf+0x54>
    3c7a:	9a 01       	movw	r18, r20
    3c7c:	f8 01       	movw	r30, r16
    3c7e:	e2 0f       	add	r30, r18
    3c80:	f3 1f       	adc	r31, r19
    3c82:	10 82       	st	Z, r1
    3c84:	2e 96       	adiw	r28, 0x0e	; 14
    3c86:	cd bf       	out	0x3d, r28	; 61
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	08 95       	ret

00003c94 <vfprintf>:
    3c94:	2f 92       	push	r2
    3c96:	3f 92       	push	r3
    3c98:	4f 92       	push	r4
    3c9a:	5f 92       	push	r5
    3c9c:	6f 92       	push	r6
    3c9e:	7f 92       	push	r7
    3ca0:	8f 92       	push	r8
    3ca2:	9f 92       	push	r9
    3ca4:	af 92       	push	r10
    3ca6:	bf 92       	push	r11
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	2c 97       	sbiw	r28, 0x0c	; 12
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	7c 01       	movw	r14, r24
    3cc4:	6b 01       	movw	r12, r22
    3cc6:	8a 01       	movw	r16, r20
    3cc8:	fc 01       	movw	r30, r24
    3cca:	16 82       	std	Z+6, r1	; 0x06
    3ccc:	17 82       	std	Z+7, r1	; 0x07
    3cce:	83 81       	ldd	r24, Z+3	; 0x03
    3cd0:	81 ff       	sbrs	r24, 1
    3cd2:	b0 c1       	rjmp	.+864    	; 0x4034 <vfprintf+0x3a0>
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	01 96       	adiw	r24, 0x01	; 1
    3cd8:	4c 01       	movw	r8, r24
    3cda:	f7 01       	movw	r30, r14
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	f6 01       	movw	r30, r12
    3ce0:	93 fd       	sbrc	r25, 3
    3ce2:	85 91       	lpm	r24, Z+
    3ce4:	93 ff       	sbrs	r25, 3
    3ce6:	81 91       	ld	r24, Z+
    3ce8:	6f 01       	movw	r12, r30
    3cea:	88 23       	and	r24, r24
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <vfprintf+0x5c>
    3cee:	9e c1       	rjmp	.+828    	; 0x402c <vfprintf+0x398>
    3cf0:	85 32       	cpi	r24, 0x25	; 37
    3cf2:	39 f4       	brne	.+14     	; 0x3d02 <vfprintf+0x6e>
    3cf4:	93 fd       	sbrc	r25, 3
    3cf6:	85 91       	lpm	r24, Z+
    3cf8:	93 ff       	sbrs	r25, 3
    3cfa:	81 91       	ld	r24, Z+
    3cfc:	6f 01       	movw	r12, r30
    3cfe:	85 32       	cpi	r24, 0x25	; 37
    3d00:	21 f4       	brne	.+8      	; 0x3d0a <vfprintf+0x76>
    3d02:	b7 01       	movw	r22, r14
    3d04:	90 e0       	ldi	r25, 0x00	; 0
    3d06:	c4 d1       	rcall	.+904    	; 0x4090 <fputc>
    3d08:	e8 cf       	rjmp	.-48     	; 0x3cda <vfprintf+0x46>
    3d0a:	51 2c       	mov	r5, r1
    3d0c:	31 2c       	mov	r3, r1
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	20 32       	cpi	r18, 0x20	; 32
    3d12:	a0 f4       	brcc	.+40     	; 0x3d3c <vfprintf+0xa8>
    3d14:	8b 32       	cpi	r24, 0x2B	; 43
    3d16:	69 f0       	breq	.+26     	; 0x3d32 <vfprintf+0x9e>
    3d18:	30 f4       	brcc	.+12     	; 0x3d26 <vfprintf+0x92>
    3d1a:	80 32       	cpi	r24, 0x20	; 32
    3d1c:	59 f0       	breq	.+22     	; 0x3d34 <vfprintf+0xa0>
    3d1e:	83 32       	cpi	r24, 0x23	; 35
    3d20:	69 f4       	brne	.+26     	; 0x3d3c <vfprintf+0xa8>
    3d22:	20 61       	ori	r18, 0x10	; 16
    3d24:	2c c0       	rjmp	.+88     	; 0x3d7e <vfprintf+0xea>
    3d26:	8d 32       	cpi	r24, 0x2D	; 45
    3d28:	39 f0       	breq	.+14     	; 0x3d38 <vfprintf+0xa4>
    3d2a:	80 33       	cpi	r24, 0x30	; 48
    3d2c:	39 f4       	brne	.+14     	; 0x3d3c <vfprintf+0xa8>
    3d2e:	21 60       	ori	r18, 0x01	; 1
    3d30:	26 c0       	rjmp	.+76     	; 0x3d7e <vfprintf+0xea>
    3d32:	22 60       	ori	r18, 0x02	; 2
    3d34:	24 60       	ori	r18, 0x04	; 4
    3d36:	23 c0       	rjmp	.+70     	; 0x3d7e <vfprintf+0xea>
    3d38:	28 60       	ori	r18, 0x08	; 8
    3d3a:	21 c0       	rjmp	.+66     	; 0x3d7e <vfprintf+0xea>
    3d3c:	27 fd       	sbrc	r18, 7
    3d3e:	27 c0       	rjmp	.+78     	; 0x3d8e <vfprintf+0xfa>
    3d40:	30 ed       	ldi	r19, 0xD0	; 208
    3d42:	38 0f       	add	r19, r24
    3d44:	3a 30       	cpi	r19, 0x0A	; 10
    3d46:	78 f4       	brcc	.+30     	; 0x3d66 <vfprintf+0xd2>
    3d48:	26 ff       	sbrs	r18, 6
    3d4a:	06 c0       	rjmp	.+12     	; 0x3d58 <vfprintf+0xc4>
    3d4c:	fa e0       	ldi	r31, 0x0A	; 10
    3d4e:	5f 9e       	mul	r5, r31
    3d50:	30 0d       	add	r19, r0
    3d52:	11 24       	eor	r1, r1
    3d54:	53 2e       	mov	r5, r19
    3d56:	13 c0       	rjmp	.+38     	; 0x3d7e <vfprintf+0xea>
    3d58:	8a e0       	ldi	r24, 0x0A	; 10
    3d5a:	38 9e       	mul	r3, r24
    3d5c:	30 0d       	add	r19, r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	33 2e       	mov	r3, r19
    3d62:	20 62       	ori	r18, 0x20	; 32
    3d64:	0c c0       	rjmp	.+24     	; 0x3d7e <vfprintf+0xea>
    3d66:	8e 32       	cpi	r24, 0x2E	; 46
    3d68:	21 f4       	brne	.+8      	; 0x3d72 <vfprintf+0xde>
    3d6a:	26 fd       	sbrc	r18, 6
    3d6c:	5f c1       	rjmp	.+702    	; 0x402c <vfprintf+0x398>
    3d6e:	20 64       	ori	r18, 0x40	; 64
    3d70:	06 c0       	rjmp	.+12     	; 0x3d7e <vfprintf+0xea>
    3d72:	8c 36       	cpi	r24, 0x6C	; 108
    3d74:	11 f4       	brne	.+4      	; 0x3d7a <vfprintf+0xe6>
    3d76:	20 68       	ori	r18, 0x80	; 128
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <vfprintf+0xea>
    3d7a:	88 36       	cpi	r24, 0x68	; 104
    3d7c:	41 f4       	brne	.+16     	; 0x3d8e <vfprintf+0xfa>
    3d7e:	f6 01       	movw	r30, r12
    3d80:	93 fd       	sbrc	r25, 3
    3d82:	85 91       	lpm	r24, Z+
    3d84:	93 ff       	sbrs	r25, 3
    3d86:	81 91       	ld	r24, Z+
    3d88:	6f 01       	movw	r12, r30
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	c1 cf       	rjmp	.-126    	; 0x3d10 <vfprintf+0x7c>
    3d8e:	98 2f       	mov	r25, r24
    3d90:	9f 7d       	andi	r25, 0xDF	; 223
    3d92:	95 54       	subi	r25, 0x45	; 69
    3d94:	93 30       	cpi	r25, 0x03	; 3
    3d96:	28 f4       	brcc	.+10     	; 0x3da2 <vfprintf+0x10e>
    3d98:	0c 5f       	subi	r16, 0xFC	; 252
    3d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9c:	ff e3       	ldi	r31, 0x3F	; 63
    3d9e:	f9 83       	std	Y+1, r31	; 0x01
    3da0:	0d c0       	rjmp	.+26     	; 0x3dbc <vfprintf+0x128>
    3da2:	83 36       	cpi	r24, 0x63	; 99
    3da4:	31 f0       	breq	.+12     	; 0x3db2 <vfprintf+0x11e>
    3da6:	83 37       	cpi	r24, 0x73	; 115
    3da8:	71 f0       	breq	.+28     	; 0x3dc6 <vfprintf+0x132>
    3daa:	83 35       	cpi	r24, 0x53	; 83
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <vfprintf+0x11c>
    3dae:	57 c0       	rjmp	.+174    	; 0x3e5e <vfprintf+0x1ca>
    3db0:	21 c0       	rjmp	.+66     	; 0x3df4 <vfprintf+0x160>
    3db2:	f8 01       	movw	r30, r16
    3db4:	80 81       	ld	r24, Z
    3db6:	89 83       	std	Y+1, r24	; 0x01
    3db8:	0e 5f       	subi	r16, 0xFE	; 254
    3dba:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbc:	44 24       	eor	r4, r4
    3dbe:	43 94       	inc	r4
    3dc0:	51 2c       	mov	r5, r1
    3dc2:	54 01       	movw	r10, r8
    3dc4:	14 c0       	rjmp	.+40     	; 0x3dee <vfprintf+0x15a>
    3dc6:	38 01       	movw	r6, r16
    3dc8:	f2 e0       	ldi	r31, 0x02	; 2
    3dca:	6f 0e       	add	r6, r31
    3dcc:	71 1c       	adc	r7, r1
    3dce:	f8 01       	movw	r30, r16
    3dd0:	a0 80       	ld	r10, Z
    3dd2:	b1 80       	ldd	r11, Z+1	; 0x01
    3dd4:	26 ff       	sbrs	r18, 6
    3dd6:	03 c0       	rjmp	.+6      	; 0x3dde <vfprintf+0x14a>
    3dd8:	65 2d       	mov	r22, r5
    3dda:	70 e0       	ldi	r23, 0x00	; 0
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <vfprintf+0x14e>
    3dde:	6f ef       	ldi	r22, 0xFF	; 255
    3de0:	7f ef       	ldi	r23, 0xFF	; 255
    3de2:	c5 01       	movw	r24, r10
    3de4:	2c 87       	std	Y+12, r18	; 0x0c
    3de6:	49 d1       	rcall	.+658    	; 0x407a <strnlen>
    3de8:	2c 01       	movw	r4, r24
    3dea:	83 01       	movw	r16, r6
    3dec:	2c 85       	ldd	r18, Y+12	; 0x0c
    3dee:	2f 77       	andi	r18, 0x7F	; 127
    3df0:	22 2e       	mov	r2, r18
    3df2:	16 c0       	rjmp	.+44     	; 0x3e20 <vfprintf+0x18c>
    3df4:	38 01       	movw	r6, r16
    3df6:	f2 e0       	ldi	r31, 0x02	; 2
    3df8:	6f 0e       	add	r6, r31
    3dfa:	71 1c       	adc	r7, r1
    3dfc:	f8 01       	movw	r30, r16
    3dfe:	a0 80       	ld	r10, Z
    3e00:	b1 80       	ldd	r11, Z+1	; 0x01
    3e02:	26 ff       	sbrs	r18, 6
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <vfprintf+0x178>
    3e06:	65 2d       	mov	r22, r5
    3e08:	70 e0       	ldi	r23, 0x00	; 0
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <vfprintf+0x17c>
    3e0c:	6f ef       	ldi	r22, 0xFF	; 255
    3e0e:	7f ef       	ldi	r23, 0xFF	; 255
    3e10:	c5 01       	movw	r24, r10
    3e12:	2c 87       	std	Y+12, r18	; 0x0c
    3e14:	27 d1       	rcall	.+590    	; 0x4064 <strnlen_P>
    3e16:	2c 01       	movw	r4, r24
    3e18:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e1a:	20 68       	ori	r18, 0x80	; 128
    3e1c:	22 2e       	mov	r2, r18
    3e1e:	83 01       	movw	r16, r6
    3e20:	23 fc       	sbrc	r2, 3
    3e22:	19 c0       	rjmp	.+50     	; 0x3e56 <vfprintf+0x1c2>
    3e24:	83 2d       	mov	r24, r3
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	48 16       	cp	r4, r24
    3e2a:	59 06       	cpc	r5, r25
    3e2c:	a0 f4       	brcc	.+40     	; 0x3e56 <vfprintf+0x1c2>
    3e2e:	b7 01       	movw	r22, r14
    3e30:	80 e2       	ldi	r24, 0x20	; 32
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	2d d1       	rcall	.+602    	; 0x4090 <fputc>
    3e36:	3a 94       	dec	r3
    3e38:	f5 cf       	rjmp	.-22     	; 0x3e24 <vfprintf+0x190>
    3e3a:	f5 01       	movw	r30, r10
    3e3c:	27 fc       	sbrc	r2, 7
    3e3e:	85 91       	lpm	r24, Z+
    3e40:	27 fe       	sbrs	r2, 7
    3e42:	81 91       	ld	r24, Z+
    3e44:	5f 01       	movw	r10, r30
    3e46:	b7 01       	movw	r22, r14
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	22 d1       	rcall	.+580    	; 0x4090 <fputc>
    3e4c:	31 10       	cpse	r3, r1
    3e4e:	3a 94       	dec	r3
    3e50:	f1 e0       	ldi	r31, 0x01	; 1
    3e52:	4f 1a       	sub	r4, r31
    3e54:	51 08       	sbc	r5, r1
    3e56:	41 14       	cp	r4, r1
    3e58:	51 04       	cpc	r5, r1
    3e5a:	79 f7       	brne	.-34     	; 0x3e3a <vfprintf+0x1a6>
    3e5c:	de c0       	rjmp	.+444    	; 0x401a <vfprintf+0x386>
    3e5e:	84 36       	cpi	r24, 0x64	; 100
    3e60:	11 f0       	breq	.+4      	; 0x3e66 <vfprintf+0x1d2>
    3e62:	89 36       	cpi	r24, 0x69	; 105
    3e64:	31 f5       	brne	.+76     	; 0x3eb2 <vfprintf+0x21e>
    3e66:	f8 01       	movw	r30, r16
    3e68:	27 ff       	sbrs	r18, 7
    3e6a:	07 c0       	rjmp	.+14     	; 0x3e7a <vfprintf+0x1e6>
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	0c 5f       	subi	r16, 0xFC	; 252
    3e76:	1f 4f       	sbci	r17, 0xFF	; 255
    3e78:	08 c0       	rjmp	.+16     	; 0x3e8a <vfprintf+0x1f6>
    3e7a:	60 81       	ld	r22, Z
    3e7c:	71 81       	ldd	r23, Z+1	; 0x01
    3e7e:	88 27       	eor	r24, r24
    3e80:	77 fd       	sbrc	r23, 7
    3e82:	80 95       	com	r24
    3e84:	98 2f       	mov	r25, r24
    3e86:	0e 5f       	subi	r16, 0xFE	; 254
    3e88:	1f 4f       	sbci	r17, 0xFF	; 255
    3e8a:	2f 76       	andi	r18, 0x6F	; 111
    3e8c:	b2 2e       	mov	r11, r18
    3e8e:	97 ff       	sbrs	r25, 7
    3e90:	09 c0       	rjmp	.+18     	; 0x3ea4 <vfprintf+0x210>
    3e92:	90 95       	com	r25
    3e94:	80 95       	com	r24
    3e96:	70 95       	com	r23
    3e98:	61 95       	neg	r22
    3e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea0:	20 68       	ori	r18, 0x80	; 128
    3ea2:	b2 2e       	mov	r11, r18
    3ea4:	2a e0       	ldi	r18, 0x0A	; 10
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	a4 01       	movw	r20, r8
    3eaa:	24 d1       	rcall	.+584    	; 0x40f4 <__ultoa_invert>
    3eac:	a8 2e       	mov	r10, r24
    3eae:	a8 18       	sub	r10, r8
    3eb0:	43 c0       	rjmp	.+134    	; 0x3f38 <vfprintf+0x2a4>
    3eb2:	85 37       	cpi	r24, 0x75	; 117
    3eb4:	29 f4       	brne	.+10     	; 0x3ec0 <vfprintf+0x22c>
    3eb6:	2f 7e       	andi	r18, 0xEF	; 239
    3eb8:	b2 2e       	mov	r11, r18
    3eba:	2a e0       	ldi	r18, 0x0A	; 10
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	25 c0       	rjmp	.+74     	; 0x3f0a <vfprintf+0x276>
    3ec0:	f2 2f       	mov	r31, r18
    3ec2:	f9 7f       	andi	r31, 0xF9	; 249
    3ec4:	bf 2e       	mov	r11, r31
    3ec6:	8f 36       	cpi	r24, 0x6F	; 111
    3ec8:	c1 f0       	breq	.+48     	; 0x3efa <vfprintf+0x266>
    3eca:	18 f4       	brcc	.+6      	; 0x3ed2 <vfprintf+0x23e>
    3ecc:	88 35       	cpi	r24, 0x58	; 88
    3ece:	79 f0       	breq	.+30     	; 0x3eee <vfprintf+0x25a>
    3ed0:	ad c0       	rjmp	.+346    	; 0x402c <vfprintf+0x398>
    3ed2:	80 37       	cpi	r24, 0x70	; 112
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <vfprintf+0x248>
    3ed6:	88 37       	cpi	r24, 0x78	; 120
    3ed8:	21 f0       	breq	.+8      	; 0x3ee2 <vfprintf+0x24e>
    3eda:	a8 c0       	rjmp	.+336    	; 0x402c <vfprintf+0x398>
    3edc:	2f 2f       	mov	r18, r31
    3ede:	20 61       	ori	r18, 0x10	; 16
    3ee0:	b2 2e       	mov	r11, r18
    3ee2:	b4 fe       	sbrs	r11, 4
    3ee4:	0d c0       	rjmp	.+26     	; 0x3f00 <vfprintf+0x26c>
    3ee6:	8b 2d       	mov	r24, r11
    3ee8:	84 60       	ori	r24, 0x04	; 4
    3eea:	b8 2e       	mov	r11, r24
    3eec:	09 c0       	rjmp	.+18     	; 0x3f00 <vfprintf+0x26c>
    3eee:	24 ff       	sbrs	r18, 4
    3ef0:	0a c0       	rjmp	.+20     	; 0x3f06 <vfprintf+0x272>
    3ef2:	9f 2f       	mov	r25, r31
    3ef4:	96 60       	ori	r25, 0x06	; 6
    3ef6:	b9 2e       	mov	r11, r25
    3ef8:	06 c0       	rjmp	.+12     	; 0x3f06 <vfprintf+0x272>
    3efa:	28 e0       	ldi	r18, 0x08	; 8
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	05 c0       	rjmp	.+10     	; 0x3f0a <vfprintf+0x276>
    3f00:	20 e1       	ldi	r18, 0x10	; 16
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	02 c0       	rjmp	.+4      	; 0x3f0a <vfprintf+0x276>
    3f06:	20 e1       	ldi	r18, 0x10	; 16
    3f08:	32 e0       	ldi	r19, 0x02	; 2
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	b7 fe       	sbrs	r11, 7
    3f0e:	07 c0       	rjmp	.+14     	; 0x3f1e <vfprintf+0x28a>
    3f10:	60 81       	ld	r22, Z
    3f12:	71 81       	ldd	r23, Z+1	; 0x01
    3f14:	82 81       	ldd	r24, Z+2	; 0x02
    3f16:	93 81       	ldd	r25, Z+3	; 0x03
    3f18:	0c 5f       	subi	r16, 0xFC	; 252
    3f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1c:	06 c0       	rjmp	.+12     	; 0x3f2a <vfprintf+0x296>
    3f1e:	60 81       	ld	r22, Z
    3f20:	71 81       	ldd	r23, Z+1	; 0x01
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	0e 5f       	subi	r16, 0xFE	; 254
    3f28:	1f 4f       	sbci	r17, 0xFF	; 255
    3f2a:	a4 01       	movw	r20, r8
    3f2c:	e3 d0       	rcall	.+454    	; 0x40f4 <__ultoa_invert>
    3f2e:	a8 2e       	mov	r10, r24
    3f30:	a8 18       	sub	r10, r8
    3f32:	fb 2d       	mov	r31, r11
    3f34:	ff 77       	andi	r31, 0x7F	; 127
    3f36:	bf 2e       	mov	r11, r31
    3f38:	b6 fe       	sbrs	r11, 6
    3f3a:	0b c0       	rjmp	.+22     	; 0x3f52 <vfprintf+0x2be>
    3f3c:	2b 2d       	mov	r18, r11
    3f3e:	2e 7f       	andi	r18, 0xFE	; 254
    3f40:	a5 14       	cp	r10, r5
    3f42:	50 f4       	brcc	.+20     	; 0x3f58 <vfprintf+0x2c4>
    3f44:	b4 fe       	sbrs	r11, 4
    3f46:	0a c0       	rjmp	.+20     	; 0x3f5c <vfprintf+0x2c8>
    3f48:	b2 fc       	sbrc	r11, 2
    3f4a:	08 c0       	rjmp	.+16     	; 0x3f5c <vfprintf+0x2c8>
    3f4c:	2b 2d       	mov	r18, r11
    3f4e:	2e 7e       	andi	r18, 0xEE	; 238
    3f50:	05 c0       	rjmp	.+10     	; 0x3f5c <vfprintf+0x2c8>
    3f52:	7a 2c       	mov	r7, r10
    3f54:	2b 2d       	mov	r18, r11
    3f56:	03 c0       	rjmp	.+6      	; 0x3f5e <vfprintf+0x2ca>
    3f58:	7a 2c       	mov	r7, r10
    3f5a:	01 c0       	rjmp	.+2      	; 0x3f5e <vfprintf+0x2ca>
    3f5c:	75 2c       	mov	r7, r5
    3f5e:	24 ff       	sbrs	r18, 4
    3f60:	0d c0       	rjmp	.+26     	; 0x3f7c <vfprintf+0x2e8>
    3f62:	fe 01       	movw	r30, r28
    3f64:	ea 0d       	add	r30, r10
    3f66:	f1 1d       	adc	r31, r1
    3f68:	80 81       	ld	r24, Z
    3f6a:	80 33       	cpi	r24, 0x30	; 48
    3f6c:	11 f4       	brne	.+4      	; 0x3f72 <vfprintf+0x2de>
    3f6e:	29 7e       	andi	r18, 0xE9	; 233
    3f70:	09 c0       	rjmp	.+18     	; 0x3f84 <vfprintf+0x2f0>
    3f72:	22 ff       	sbrs	r18, 2
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <vfprintf+0x2ee>
    3f76:	73 94       	inc	r7
    3f78:	73 94       	inc	r7
    3f7a:	04 c0       	rjmp	.+8      	; 0x3f84 <vfprintf+0x2f0>
    3f7c:	82 2f       	mov	r24, r18
    3f7e:	86 78       	andi	r24, 0x86	; 134
    3f80:	09 f0       	breq	.+2      	; 0x3f84 <vfprintf+0x2f0>
    3f82:	73 94       	inc	r7
    3f84:	23 fd       	sbrc	r18, 3
    3f86:	12 c0       	rjmp	.+36     	; 0x3fac <vfprintf+0x318>
    3f88:	20 ff       	sbrs	r18, 0
    3f8a:	06 c0       	rjmp	.+12     	; 0x3f98 <vfprintf+0x304>
    3f8c:	5a 2c       	mov	r5, r10
    3f8e:	73 14       	cp	r7, r3
    3f90:	18 f4       	brcc	.+6      	; 0x3f98 <vfprintf+0x304>
    3f92:	53 0c       	add	r5, r3
    3f94:	57 18       	sub	r5, r7
    3f96:	73 2c       	mov	r7, r3
    3f98:	73 14       	cp	r7, r3
    3f9a:	60 f4       	brcc	.+24     	; 0x3fb4 <vfprintf+0x320>
    3f9c:	b7 01       	movw	r22, r14
    3f9e:	80 e2       	ldi	r24, 0x20	; 32
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	2c 87       	std	Y+12, r18	; 0x0c
    3fa4:	75 d0       	rcall	.+234    	; 0x4090 <fputc>
    3fa6:	73 94       	inc	r7
    3fa8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3faa:	f6 cf       	rjmp	.-20     	; 0x3f98 <vfprintf+0x304>
    3fac:	73 14       	cp	r7, r3
    3fae:	10 f4       	brcc	.+4      	; 0x3fb4 <vfprintf+0x320>
    3fb0:	37 18       	sub	r3, r7
    3fb2:	01 c0       	rjmp	.+2      	; 0x3fb6 <vfprintf+0x322>
    3fb4:	31 2c       	mov	r3, r1
    3fb6:	24 ff       	sbrs	r18, 4
    3fb8:	11 c0       	rjmp	.+34     	; 0x3fdc <vfprintf+0x348>
    3fba:	b7 01       	movw	r22, r14
    3fbc:	80 e3       	ldi	r24, 0x30	; 48
    3fbe:	90 e0       	ldi	r25, 0x00	; 0
    3fc0:	2c 87       	std	Y+12, r18	; 0x0c
    3fc2:	66 d0       	rcall	.+204    	; 0x4090 <fputc>
    3fc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3fc6:	22 ff       	sbrs	r18, 2
    3fc8:	16 c0       	rjmp	.+44     	; 0x3ff6 <vfprintf+0x362>
    3fca:	21 ff       	sbrs	r18, 1
    3fcc:	03 c0       	rjmp	.+6      	; 0x3fd4 <vfprintf+0x340>
    3fce:	88 e5       	ldi	r24, 0x58	; 88
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	02 c0       	rjmp	.+4      	; 0x3fd8 <vfprintf+0x344>
    3fd4:	88 e7       	ldi	r24, 0x78	; 120
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	b7 01       	movw	r22, r14
    3fda:	0c c0       	rjmp	.+24     	; 0x3ff4 <vfprintf+0x360>
    3fdc:	82 2f       	mov	r24, r18
    3fde:	86 78       	andi	r24, 0x86	; 134
    3fe0:	51 f0       	breq	.+20     	; 0x3ff6 <vfprintf+0x362>
    3fe2:	21 fd       	sbrc	r18, 1
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <vfprintf+0x356>
    3fe6:	80 e2       	ldi	r24, 0x20	; 32
    3fe8:	01 c0       	rjmp	.+2      	; 0x3fec <vfprintf+0x358>
    3fea:	8b e2       	ldi	r24, 0x2B	; 43
    3fec:	27 fd       	sbrc	r18, 7
    3fee:	8d e2       	ldi	r24, 0x2D	; 45
    3ff0:	b7 01       	movw	r22, r14
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	4d d0       	rcall	.+154    	; 0x4090 <fputc>
    3ff6:	a5 14       	cp	r10, r5
    3ff8:	30 f4       	brcc	.+12     	; 0x4006 <vfprintf+0x372>
    3ffa:	b7 01       	movw	r22, r14
    3ffc:	80 e3       	ldi	r24, 0x30	; 48
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	47 d0       	rcall	.+142    	; 0x4090 <fputc>
    4002:	5a 94       	dec	r5
    4004:	f8 cf       	rjmp	.-16     	; 0x3ff6 <vfprintf+0x362>
    4006:	aa 94       	dec	r10
    4008:	f4 01       	movw	r30, r8
    400a:	ea 0d       	add	r30, r10
    400c:	f1 1d       	adc	r31, r1
    400e:	80 81       	ld	r24, Z
    4010:	b7 01       	movw	r22, r14
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	3d d0       	rcall	.+122    	; 0x4090 <fputc>
    4016:	a1 10       	cpse	r10, r1
    4018:	f6 cf       	rjmp	.-20     	; 0x4006 <vfprintf+0x372>
    401a:	33 20       	and	r3, r3
    401c:	09 f4       	brne	.+2      	; 0x4020 <vfprintf+0x38c>
    401e:	5d ce       	rjmp	.-838    	; 0x3cda <vfprintf+0x46>
    4020:	b7 01       	movw	r22, r14
    4022:	80 e2       	ldi	r24, 0x20	; 32
    4024:	90 e0       	ldi	r25, 0x00	; 0
    4026:	34 d0       	rcall	.+104    	; 0x4090 <fputc>
    4028:	3a 94       	dec	r3
    402a:	f7 cf       	rjmp	.-18     	; 0x401a <vfprintf+0x386>
    402c:	f7 01       	movw	r30, r14
    402e:	86 81       	ldd	r24, Z+6	; 0x06
    4030:	97 81       	ldd	r25, Z+7	; 0x07
    4032:	02 c0       	rjmp	.+4      	; 0x4038 <vfprintf+0x3a4>
    4034:	8f ef       	ldi	r24, 0xFF	; 255
    4036:	9f ef       	ldi	r25, 0xFF	; 255
    4038:	2c 96       	adiw	r28, 0x0c	; 12
    403a:	cd bf       	out	0x3d, r28	; 61
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	ff 90       	pop	r15
    4048:	ef 90       	pop	r14
    404a:	df 90       	pop	r13
    404c:	cf 90       	pop	r12
    404e:	bf 90       	pop	r11
    4050:	af 90       	pop	r10
    4052:	9f 90       	pop	r9
    4054:	8f 90       	pop	r8
    4056:	7f 90       	pop	r7
    4058:	6f 90       	pop	r6
    405a:	5f 90       	pop	r5
    405c:	4f 90       	pop	r4
    405e:	3f 90       	pop	r3
    4060:	2f 90       	pop	r2
    4062:	08 95       	ret

00004064 <strnlen_P>:
    4064:	fc 01       	movw	r30, r24
    4066:	05 90       	lpm	r0, Z+
    4068:	61 50       	subi	r22, 0x01	; 1
    406a:	70 40       	sbci	r23, 0x00	; 0
    406c:	01 10       	cpse	r0, r1
    406e:	d8 f7       	brcc	.-10     	; 0x4066 <strnlen_P+0x2>
    4070:	80 95       	com	r24
    4072:	90 95       	com	r25
    4074:	8e 0f       	add	r24, r30
    4076:	9f 1f       	adc	r25, r31
    4078:	08 95       	ret

0000407a <strnlen>:
    407a:	fc 01       	movw	r30, r24
    407c:	61 50       	subi	r22, 0x01	; 1
    407e:	70 40       	sbci	r23, 0x00	; 0
    4080:	01 90       	ld	r0, Z+
    4082:	01 10       	cpse	r0, r1
    4084:	d8 f7       	brcc	.-10     	; 0x407c <strnlen+0x2>
    4086:	80 95       	com	r24
    4088:	90 95       	com	r25
    408a:	8e 0f       	add	r24, r30
    408c:	9f 1f       	adc	r25, r31
    408e:	08 95       	ret

00004090 <fputc>:
    4090:	0f 93       	push	r16
    4092:	1f 93       	push	r17
    4094:	cf 93       	push	r28
    4096:	df 93       	push	r29
    4098:	18 2f       	mov	r17, r24
    409a:	09 2f       	mov	r16, r25
    409c:	eb 01       	movw	r28, r22
    409e:	8b 81       	ldd	r24, Y+3	; 0x03
    40a0:	81 fd       	sbrc	r24, 1
    40a2:	03 c0       	rjmp	.+6      	; 0x40aa <fputc+0x1a>
    40a4:	8f ef       	ldi	r24, 0xFF	; 255
    40a6:	9f ef       	ldi	r25, 0xFF	; 255
    40a8:	20 c0       	rjmp	.+64     	; 0x40ea <fputc+0x5a>
    40aa:	82 ff       	sbrs	r24, 2
    40ac:	10 c0       	rjmp	.+32     	; 0x40ce <fputc+0x3e>
    40ae:	4e 81       	ldd	r20, Y+6	; 0x06
    40b0:	5f 81       	ldd	r21, Y+7	; 0x07
    40b2:	2c 81       	ldd	r18, Y+4	; 0x04
    40b4:	3d 81       	ldd	r19, Y+5	; 0x05
    40b6:	42 17       	cp	r20, r18
    40b8:	53 07       	cpc	r21, r19
    40ba:	7c f4       	brge	.+30     	; 0x40da <fputc+0x4a>
    40bc:	e8 81       	ld	r30, Y
    40be:	f9 81       	ldd	r31, Y+1	; 0x01
    40c0:	9f 01       	movw	r18, r30
    40c2:	2f 5f       	subi	r18, 0xFF	; 255
    40c4:	3f 4f       	sbci	r19, 0xFF	; 255
    40c6:	28 83       	st	Y, r18
    40c8:	39 83       	std	Y+1, r19	; 0x01
    40ca:	10 83       	st	Z, r17
    40cc:	06 c0       	rjmp	.+12     	; 0x40da <fputc+0x4a>
    40ce:	e8 85       	ldd	r30, Y+8	; 0x08
    40d0:	f9 85       	ldd	r31, Y+9	; 0x09
    40d2:	81 2f       	mov	r24, r17
    40d4:	19 95       	eicall
    40d6:	89 2b       	or	r24, r25
    40d8:	29 f7       	brne	.-54     	; 0x40a4 <fputc+0x14>
    40da:	2e 81       	ldd	r18, Y+6	; 0x06
    40dc:	3f 81       	ldd	r19, Y+7	; 0x07
    40de:	2f 5f       	subi	r18, 0xFF	; 255
    40e0:	3f 4f       	sbci	r19, 0xFF	; 255
    40e2:	2e 83       	std	Y+6, r18	; 0x06
    40e4:	3f 83       	std	Y+7, r19	; 0x07
    40e6:	81 2f       	mov	r24, r17
    40e8:	90 2f       	mov	r25, r16
    40ea:	df 91       	pop	r29
    40ec:	cf 91       	pop	r28
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	08 95       	ret

000040f4 <__ultoa_invert>:
    40f4:	fa 01       	movw	r30, r20
    40f6:	aa 27       	eor	r26, r26
    40f8:	28 30       	cpi	r18, 0x08	; 8
    40fa:	51 f1       	breq	.+84     	; 0x4150 <__ultoa_invert+0x5c>
    40fc:	20 31       	cpi	r18, 0x10	; 16
    40fe:	81 f1       	breq	.+96     	; 0x4160 <__ultoa_invert+0x6c>
    4100:	e8 94       	clt
    4102:	6f 93       	push	r22
    4104:	6e 7f       	andi	r22, 0xFE	; 254
    4106:	6e 5f       	subi	r22, 0xFE	; 254
    4108:	7f 4f       	sbci	r23, 0xFF	; 255
    410a:	8f 4f       	sbci	r24, 0xFF	; 255
    410c:	9f 4f       	sbci	r25, 0xFF	; 255
    410e:	af 4f       	sbci	r26, 0xFF	; 255
    4110:	b1 e0       	ldi	r27, 0x01	; 1
    4112:	3e d0       	rcall	.+124    	; 0x4190 <__ultoa_invert+0x9c>
    4114:	b4 e0       	ldi	r27, 0x04	; 4
    4116:	3c d0       	rcall	.+120    	; 0x4190 <__ultoa_invert+0x9c>
    4118:	67 0f       	add	r22, r23
    411a:	78 1f       	adc	r23, r24
    411c:	89 1f       	adc	r24, r25
    411e:	9a 1f       	adc	r25, r26
    4120:	a1 1d       	adc	r26, r1
    4122:	68 0f       	add	r22, r24
    4124:	79 1f       	adc	r23, r25
    4126:	8a 1f       	adc	r24, r26
    4128:	91 1d       	adc	r25, r1
    412a:	a1 1d       	adc	r26, r1
    412c:	6a 0f       	add	r22, r26
    412e:	71 1d       	adc	r23, r1
    4130:	81 1d       	adc	r24, r1
    4132:	91 1d       	adc	r25, r1
    4134:	a1 1d       	adc	r26, r1
    4136:	20 d0       	rcall	.+64     	; 0x4178 <__ultoa_invert+0x84>
    4138:	09 f4       	brne	.+2      	; 0x413c <__ultoa_invert+0x48>
    413a:	68 94       	set
    413c:	3f 91       	pop	r19
    413e:	2a e0       	ldi	r18, 0x0A	; 10
    4140:	26 9f       	mul	r18, r22
    4142:	11 24       	eor	r1, r1
    4144:	30 19       	sub	r19, r0
    4146:	30 5d       	subi	r19, 0xD0	; 208
    4148:	31 93       	st	Z+, r19
    414a:	de f6       	brtc	.-74     	; 0x4102 <__ultoa_invert+0xe>
    414c:	cf 01       	movw	r24, r30
    414e:	08 95       	ret
    4150:	46 2f       	mov	r20, r22
    4152:	47 70       	andi	r20, 0x07	; 7
    4154:	40 5d       	subi	r20, 0xD0	; 208
    4156:	41 93       	st	Z+, r20
    4158:	b3 e0       	ldi	r27, 0x03	; 3
    415a:	0f d0       	rcall	.+30     	; 0x417a <__ultoa_invert+0x86>
    415c:	c9 f7       	brne	.-14     	; 0x4150 <__ultoa_invert+0x5c>
    415e:	f6 cf       	rjmp	.-20     	; 0x414c <__ultoa_invert+0x58>
    4160:	46 2f       	mov	r20, r22
    4162:	4f 70       	andi	r20, 0x0F	; 15
    4164:	40 5d       	subi	r20, 0xD0	; 208
    4166:	4a 33       	cpi	r20, 0x3A	; 58
    4168:	18 f0       	brcs	.+6      	; 0x4170 <__ultoa_invert+0x7c>
    416a:	49 5d       	subi	r20, 0xD9	; 217
    416c:	31 fd       	sbrc	r19, 1
    416e:	40 52       	subi	r20, 0x20	; 32
    4170:	41 93       	st	Z+, r20
    4172:	02 d0       	rcall	.+4      	; 0x4178 <__ultoa_invert+0x84>
    4174:	a9 f7       	brne	.-22     	; 0x4160 <__ultoa_invert+0x6c>
    4176:	ea cf       	rjmp	.-44     	; 0x414c <__ultoa_invert+0x58>
    4178:	b4 e0       	ldi	r27, 0x04	; 4
    417a:	a6 95       	lsr	r26
    417c:	97 95       	ror	r25
    417e:	87 95       	ror	r24
    4180:	77 95       	ror	r23
    4182:	67 95       	ror	r22
    4184:	ba 95       	dec	r27
    4186:	c9 f7       	brne	.-14     	; 0x417a <__ultoa_invert+0x86>
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	61 05       	cpc	r22, r1
    418c:	71 05       	cpc	r23, r1
    418e:	08 95       	ret
    4190:	9b 01       	movw	r18, r22
    4192:	ac 01       	movw	r20, r24
    4194:	0a 2e       	mov	r0, r26
    4196:	06 94       	lsr	r0
    4198:	57 95       	ror	r21
    419a:	47 95       	ror	r20
    419c:	37 95       	ror	r19
    419e:	27 95       	ror	r18
    41a0:	ba 95       	dec	r27
    41a2:	c9 f7       	brne	.-14     	; 0x4196 <__ultoa_invert+0xa2>
    41a4:	62 0f       	add	r22, r18
    41a6:	73 1f       	adc	r23, r19
    41a8:	84 1f       	adc	r24, r20
    41aa:	95 1f       	adc	r25, r21
    41ac:	a0 1d       	adc	r26, r0
    41ae:	08 95       	ret

000041b0 <_exit>:
    41b0:	f8 94       	cli

000041b2 <__stop_program>:
    41b2:	ff cf       	rjmp	.-2      	; 0x41b2 <__stop_program>
