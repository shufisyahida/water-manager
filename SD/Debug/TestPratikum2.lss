
TestPratikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000430e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000182  00802000  0000430e  000043a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e3  00802182  00802182  00004524  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004524  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a0  00000000  00000000  00004598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000139d9  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000378a  00000000  00000000  00018711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000cc19  00000000  00000000  0001be9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000017ec  00000000  00000000  00028ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034548  00000000  00000000  0002a2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008cad  00000000  00000000  0005e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  00067498  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d4c7  00000000  00000000  00067d78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 8a 0f 	jmp	0x1f14	; 0x1f14 <__vector_13>
      38:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <__vector_14>
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__vector_39>
      a0:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_40>
      a4:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_41>
      a8:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_42>
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_46>
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	01 c2       	rjmp	.+1026   	; 0x4d0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	ff c1       	rjmp	.+1022   	; 0x4d0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fb c1       	rjmp	.+1014   	; 0x4d0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f9 c1       	rjmp	.+1010   	; 0x4d0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__vector_71>
     120:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__vector_72>
     124:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_73>
     128:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__vector_74>
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	cd c1       	rjmp	.+922    	; 0x4d0 <__bad_interrupt>
     136:	00 00       	nop
     138:	cb c1       	rjmp	.+918    	; 0x4d0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c9 c1       	rjmp	.+914    	; 0x4d0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	c7 c1       	rjmp	.+910    	; 0x4d0 <__bad_interrupt>
     142:	00 00       	nop
     144:	c5 c1       	rjmp	.+906    	; 0x4d0 <__bad_interrupt>
     146:	00 00       	nop
     148:	c3 c1       	rjmp	.+902    	; 0x4d0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c1 c1       	rjmp	.+898    	; 0x4d0 <__bad_interrupt>
     14e:	00 00       	nop
     150:	bf c1       	rjmp	.+894    	; 0x4d0 <__bad_interrupt>
     152:	00 00       	nop
     154:	bd c1       	rjmp	.+890    	; 0x4d0 <__bad_interrupt>
     156:	00 00       	nop
     158:	bb c1       	rjmp	.+886    	; 0x4d0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8f c1       	rjmp	.+798    	; 0x4d0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8d c1       	rjmp	.+794    	; 0x4d0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8b c1       	rjmp	.+790    	; 0x4d0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	89 c1       	rjmp	.+786    	; 0x4d0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	87 c1       	rjmp	.+782    	; 0x4d0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	85 c1       	rjmp	.+778    	; 0x4d0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__trampolines_end+0x21e>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__trampolines_end+0x24e>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	11 e2       	ldi	r17, 0x21	; 33
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ee e0       	ldi	r30, 0x0E	; 14
     4a6:	f3 e4       	ldi	r31, 0x43	; 67
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a2 38       	cpi	r26, 0x82	; 130
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	24 e2       	ldi	r18, 0x24	; 36
     4ba:	a2 e8       	ldi	r26, 0x82	; 130
     4bc:	b1 e2       	ldi	r27, 0x21	; 33
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a5 36       	cpi	r26, 0x65	; 101
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <main>
     4cc:	0c 94 85 21 	jmp	0x430a	; 0x430a <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     4d2:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     4d6:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     4da:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2    
     4de:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2   
     4e2:	60 93 a1 06 	sts	0x06A1, r22
    ret
     4e6:	08 95       	ret

000004e8 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     4e8:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     4ea:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     4ee:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     4f2:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2 
     4f6:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     4fa:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     4fc:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     500:	84 23       	and	r24, r20
    ret
     502:	08 95       	ret

00000504 <_1101010110_>:

GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     504:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     508:	80 93 a1 06 	sts	0x06A1, r24
    ret
     50c:	08 95       	ret

0000050e <burst_1_1_10_0_1>:
     50e:	a1 e0       	ldi	r26, 0x01	; 1
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	ed e8       	ldi	r30, 0x8D	; 141
     514:	f2 e0       	ldi	r31, 0x02	; 2
     516:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__prologue_saves__+0xc>
     51a:	e8 2f       	mov	r30, r24
     51c:	0f b7       	in	r16, 0x3f	; 63
     51e:	00 78       	andi	r16, 0x80	; 128
     520:	19 82       	std	Y+1, r1	; 0x01
     522:	80 91 83 21 	lds	r24, 0x2183
     526:	81 30       	cpi	r24, 0x01	; 1
     528:	19 f0       	breq	.+6      	; 0x530 <burst_1_1_10_0_1+0x22>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 83 21 	sts	0x2183, r24
     530:	ce 2e       	mov	r12, r30
     532:	dd 24       	eor	r13, r13
     534:	f6 01       	movw	r30, r12
     536:	eb 53       	subi	r30, 0x3B	; 59
     538:	fe 4d       	sbci	r31, 0xDE	; 222
     53a:	b0 80       	ld	r11, Z
     53c:	f6 01       	movw	r30, r12
     53e:	e7 53       	subi	r30, 0x37	; 55
     540:	fe 4d       	sbci	r31, 0xDE	; 222
     542:	a0 80       	ld	r10, Z
     544:	f8 94       	cli
     546:	bb 20       	and	r11, r11
     548:	09 f4       	brne	.+2      	; 0x54c <burst_1_1_10_0_1+0x3e>
     54a:	aa c0       	rjmp	.+340    	; 0x6a0 <burst_1_1_10_0_1+0x192>
     54c:	8b 2d       	mov	r24, r11
     54e:	da df       	rcall	.-76     	; 0x504 <_1101010110_>
     550:	8b 2d       	mov	r24, r11
     552:	6a 2d       	mov	r22, r10
     554:	be df       	rcall	.-132    	; 0x4d2 <_1101010101_>
     556:	1b 2d       	mov	r17, r11
     558:	ee 24       	eor	r14, r14
     55a:	ff 24       	eor	r15, r15
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	81 2c       	mov	r8, r1
     560:	30 e2       	ldi	r19, 0x20	; 32
     562:	93 2e       	mov	r9, r19
     564:	f5 fe       	sbrs	r15, 5
     566:	07 c0       	rjmp	.+14     	; 0x576 <burst_1_1_10_0_1+0x68>
     568:	90 91 c6 21 	lds	r25, 0x21C6
     56c:	80 91 c5 21 	lds	r24, 0x21C5
     570:	98 2b       	or	r25, r24
     572:	19 f5       	brne	.+70     	; 0x5ba <burst_1_1_10_0_1+0xac>
     574:	35 c0       	rjmp	.+106    	; 0x5e0 <burst_1_1_10_0_1+0xd2>
     576:	8f b7       	in	r24, 0x3f	; 63
     578:	80 2b       	or	r24, r16
     57a:	8f bf       	out	0x3f, r24	; 63
     57c:	00 00       	nop
     57e:	f8 94       	cli
     580:	8b 2d       	mov	r24, r11
     582:	6a 2d       	mov	r22, r10
     584:	41 2f       	mov	r20, r17
     586:	b0 df       	rcall	.-160    	; 0x4e8 <_1101010111_>
     588:	68 2f       	mov	r22, r24
     58a:	08 94       	sec
     58c:	e1 1c       	adc	r14, r1
     58e:	f1 1c       	adc	r15, r1
     590:	80 91 00 20 	lds	r24, 0x2000
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 00 20 	sts	0x2000, r24
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	30 f0       	brcs	.+12     	; 0x5aa <burst_1_1_10_0_1+0x9c>
     59e:	82 30       	cpi	r24, 0x02	; 2
     5a0:	21 f0       	breq	.+8      	; 0x5aa <burst_1_1_10_0_1+0x9c>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	11 f0       	breq	.+4      	; 0x5aa <burst_1_1_10_0_1+0x9c>
     5a6:	10 92 00 20 	sts	0x2000, r1
     5aa:	66 23       	and	r22, r22
     5ac:	d9 f2       	breq	.-74     	; 0x564 <burst_1_1_10_0_1+0x56>
     5ae:	20 91 c6 21 	lds	r18, 0x21C6
     5b2:	80 91 c5 21 	lds	r24, 0x21C5
     5b6:	28 2b       	or	r18, r24
     5b8:	15 c0       	rjmp	.+42     	; 0x5e4 <burst_1_1_10_0_1+0xd6>
     5ba:	41 2f       	mov	r20, r17
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	40 ff       	sbrs	r20, 0
     5c0:	09 c0       	rjmp	.+18     	; 0x5d4 <burst_1_1_10_0_1+0xc6>
     5c2:	e8 2f       	mov	r30, r24
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e2 57       	subi	r30, 0x72	; 114
     5cc:	fe 4d       	sbci	r31, 0xDE	; 222
     5ce:	80 82       	st	Z, r8
     5d0:	91 82       	std	Z+1, r9	; 0x01
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <burst_1_1_10_0_1+0xc8>
     5d4:	90 fd       	sbrc	r25, 0
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	96 95       	lsr	r25
     5da:	46 95       	lsr	r20
     5dc:	99 23       	and	r25, r25
     5de:	79 f7       	brne	.-34     	; 0x5be <burst_1_1_10_0_1+0xb0>
     5e0:	10 e0       	ldi	r17, 0x00	; 0
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	8f b7       	in	r24, 0x3f	; 63
     5e6:	80 2b       	or	r24, r16
     5e8:	8f bf       	out	0x3f, r24	; 63
     5ea:	10 92 84 21 	sts	0x2184, r1
     5ee:	22 23       	and	r18, r18
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <burst_1_1_10_0_1+0xe6>
     5f2:	3f c0       	rjmp	.+126    	; 0x672 <burst_1_1_10_0_1+0x164>
     5f4:	11 23       	and	r17, r17
     5f6:	09 f4       	brne	.+2      	; 0x5fa <burst_1_1_10_0_1+0xec>
     5f8:	3c c0       	rjmp	.+120    	; 0x672 <burst_1_1_10_0_1+0x164>
     5fa:	30 91 ca 21 	lds	r19, 0x21CA
     5fe:	80 91 c9 21 	lds	r24, 0x21C9
     602:	38 2b       	or	r19, r24
     604:	56 2f       	mov	r21, r22
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	23 c0       	rjmp	.+70     	; 0x656 <burst_1_1_10_0_1+0x148>
     610:	50 fd       	sbrc	r21, 0
     612:	17 c0       	rjmp	.+46     	; 0x642 <burst_1_1_10_0_1+0x134>
     614:	19 c0       	rjmp	.+50     	; 0x648 <burst_1_1_10_0_1+0x13a>
     616:	30 ff       	sbrs	r19, 0
     618:	13 c0       	rjmp	.+38     	; 0x640 <burst_1_1_10_0_1+0x132>
     61a:	98 17       	cp	r25, r24
     61c:	81 f4       	brne	.+32     	; 0x63e <burst_1_1_10_0_1+0x130>
     61e:	e4 2f       	mov	r30, r20
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	e2 57       	subi	r30, 0x72	; 114
     628:	fe 4d       	sbci	r31, 0xDE	; 222
     62a:	e0 82       	st	Z, r14
     62c:	f1 82       	std	Z+1, r15	; 0x01
     62e:	85 2f       	mov	r24, r21
     630:	8e 7f       	andi	r24, 0xFE	; 254
     632:	19 f4       	brne	.+6      	; 0x63a <burst_1_1_10_0_1+0x12c>
     634:	89 2f       	mov	r24, r25
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	08 c0       	rjmp	.+16     	; 0x64a <burst_1_1_10_0_1+0x13c>
     63a:	89 2f       	mov	r24, r25
     63c:	06 c0       	rjmp	.+12     	; 0x64a <burst_1_1_10_0_1+0x13c>
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	36 95       	lsr	r19
     642:	33 23       	and	r19, r19
     644:	41 f7       	brne	.-48     	; 0x616 <burst_1_1_10_0_1+0x108>
     646:	01 c0       	rjmp	.+2      	; 0x64a <burst_1_1_10_0_1+0x13c>
     648:	20 fd       	sbrc	r18, 0
     64a:	9f 5f       	subi	r25, 0xFF	; 255
     64c:	20 fd       	sbrc	r18, 0
     64e:	4f 5f       	subi	r20, 0xFF	; 255
     650:	56 95       	lsr	r21
     652:	26 95       	lsr	r18
     654:	11 f0       	breq	.+4      	; 0x65a <burst_1_1_10_0_1+0x14c>
     656:	55 23       	and	r21, r21
     658:	d9 f6       	brne	.-74     	; 0x610 <burst_1_1_10_0_1+0x102>
     65a:	40 93 84 21 	sts	0x2184, r20
     65e:	60 95       	com	r22
     660:	16 23       	and	r17, r22
     662:	71 30       	cpi	r23, 0x01	; 1
     664:	21 f4       	brne	.+8      	; 0x66e <burst_1_1_10_0_1+0x160>
     666:	11 23       	and	r17, r17
     668:	11 f4       	brne	.+4      	; 0x66e <burst_1_1_10_0_1+0x160>
     66a:	ee 24       	eor	r14, r14
     66c:	ff 24       	eor	r15, r15
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	13 c0       	rjmp	.+38     	; 0x698 <burst_1_1_10_0_1+0x18a>
     672:	80 91 c6 21 	lds	r24, 0x21C6
     676:	90 91 c5 21 	lds	r25, 0x21C5
     67a:	89 2b       	or	r24, r25
     67c:	89 83       	std	Y+1, r24	; 0x01
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	06 c0       	rjmp	.+12     	; 0x68e <burst_1_1_10_0_1+0x180>
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	80 fd       	sbrc	r24, 0
     686:	9f 5f       	subi	r25, 0xFF	; 255
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	86 95       	lsr	r24
     68c:	89 83       	std	Y+1, r24	; 0x01
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	88 23       	and	r24, r24
     692:	b9 f7       	brne	.-18     	; 0x682 <burst_1_1_10_0_1+0x174>
     694:	90 93 84 21 	sts	0x2184, r25
     698:	f8 94       	cli
     69a:	11 23       	and	r17, r17
     69c:	09 f0       	breq	.+2      	; 0x6a0 <burst_1_1_10_0_1+0x192>
     69e:	62 cf       	rjmp	.-316    	; 0x564 <burst_1_1_10_0_1+0x56>
     6a0:	85 ec       	ldi	r24, 0xC5	; 197
     6a2:	91 e2       	ldi	r25, 0x21	; 33
     6a4:	c8 0e       	add	r12, r24
     6a6:	d9 1e       	adc	r13, r25
     6a8:	f6 01       	movw	r30, r12
     6aa:	80 81       	ld	r24, Z
     6ac:	2b df       	rcall	.-426    	; 0x504 <_1101010110_>
     6ae:	10 92 82 21 	sts	0x2182, r1
     6b2:	8f b7       	in	r24, 0x3f	; 63
     6b4:	08 2b       	or	r16, r24
     6b6:	0f bf       	out	0x3f, r16	; 63
     6b8:	21 96       	adiw	r28, 0x01	; 1
     6ba:	ec e0       	ldi	r30, 0x0C	; 12
     6bc:	0c 94 32 20 	jmp	0x4064	; 0x4064 <__epilogue_restores__+0xc>

000006c0 <qt_get_library_sig>:
     6c0:	fc 01       	movw	r30, r24
     6c2:	80 e2       	ldi	r24, 0x20	; 32
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	80 83       	st	Z, r24
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	12 82       	std	Z+2, r1	; 0x02
     6cc:	13 82       	std	Z+3, r1	; 0x03
     6ce:	80 e4       	ldi	r24, 0x40	; 64
     6d0:	94 e0       	ldi	r25, 0x04	; 4
     6d2:	84 83       	std	Z+4, r24	; 0x04
     6d4:	95 83       	std	Z+5, r25	; 0x05
     6d6:	08 95       	ret

000006d8 <qt_enable_key>:
     6d8:	90 91 bf 21 	lds	r25, 0x21BF
     6dc:	a9 2f       	mov	r26, r25
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	fd 01       	movw	r30, r26
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ea 0f       	add	r30, r26
     6e8:	fb 1f       	adc	r31, r27
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e9 55       	subi	r30, 0x59	; 89
     6f0:	fe 4d       	sbci	r31, 0xDE	; 222
     6f2:	43 83       	std	Z+3, r20	; 0x03
     6f4:	67 70       	andi	r22, 0x07	; 7
     6f6:	85 83       	std	Z+5, r24	; 0x05
     6f8:	23 70       	andi	r18, 0x03	; 3
     6fa:	66 0f       	add	r22, r22
     6fc:	66 0f       	add	r22, r22
     6fe:	66 0f       	add	r22, r22
     700:	26 2b       	or	r18, r22
     702:	24 83       	std	Z+4, r18	; 0x04
     704:	9f 5f       	subi	r25, 0xFF	; 255
     706:	90 93 bf 21 	sts	0x21BF, r25
     70a:	08 95       	ret

0000070c <qt_get_sensor_delta>:
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	28 2f       	mov	r18, r24
     714:	c8 2f       	mov	r28, r24
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	fe 01       	movw	r30, r28
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	e9 55       	subi	r30, 0x59	; 89
     728:	fe 4d       	sbci	r31, 0xDE	; 222
     72a:	35 81       	ldd	r19, Z+5	; 0x05
     72c:	83 81       	ldd	r24, Z+3	; 0x03
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	00 90 87 21 	lds	r0, 0x2187
     734:	02 c0       	rjmp	.+4      	; 0x73a <qt_get_sensor_delta+0x2e>
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	0a 94       	dec	r0
     73c:	e2 f7       	brpl	.-8      	; 0x736 <qt_get_sensor_delta+0x2a>
     73e:	18 2f       	mov	r17, r24
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	08 f4       	brcc	.+2      	; 0x746 <qt_get_sensor_delta+0x3a>
     744:	14 e0       	ldi	r17, 0x04	; 4
     746:	80 91 bf 21 	lds	r24, 0x21BF
     74a:	28 17       	cp	r18, r24
     74c:	18 f0       	brcs	.+6      	; 0x754 <qt_get_sensor_delta+0x48>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	2d c0       	rjmp	.+90     	; 0x7ae <qt_get_sensor_delta+0xa2>
     754:	83 2f       	mov	r24, r19
     756:	1d d1       	rcall	.+570    	; 0x992 <get_channel_delta>
     758:	9c 01       	movw	r18, r24
     75a:	41 2f       	mov	r20, r17
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	16 95       	lsr	r17
     760:	16 95       	lsr	r17
     762:	81 2f       	mov	r24, r17
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	84 1b       	sub	r24, r20
     768:	95 0b       	sbc	r25, r21
     76a:	82 17       	cp	r24, r18
     76c:	93 07       	cpc	r25, r19
     76e:	64 f4       	brge	.+24     	; 0x788 <qt_get_sensor_delta+0x7c>
     770:	fe 01       	movw	r30, r28
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	e9 55       	subi	r30, 0x59	; 89
     780:	fe 4d       	sbci	r31, 0xDE	; 222
     782:	84 81       	ldd	r24, Z+4	; 0x04
     784:	8b 7f       	andi	r24, 0xFB	; 251
     786:	84 83       	std	Z+4, r24	; 0x04
     788:	88 27       	eor	r24, r24
     78a:	99 27       	eor	r25, r25
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	82 17       	cp	r24, r18
     792:	93 07       	cpc	r25, r19
     794:	64 f0       	brlt	.+24     	; 0x7ae <qt_get_sensor_delta+0xa2>
     796:	fe 01       	movw	r30, r28
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ec 0f       	add	r30, r28
     79e:	fd 1f       	adc	r31, r29
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e9 55       	subi	r30, 0x59	; 89
     7a6:	fe 4d       	sbci	r31, 0xDE	; 222
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	84 60       	ori	r24, 0x04	; 4
     7ac:	84 83       	std	Z+4, r24	; 0x04
     7ae:	c9 01       	movw	r24, r18
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <qt_measure_sensors>:
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	10 92 9f 21 	sts	0x219F, r1
     7c6:	10 92 a0 21 	sts	0x21A0, r1
     7ca:	20 91 a3 21 	lds	r18, 0x21A3
     7ce:	30 91 a4 21 	lds	r19, 0x21A4
     7d2:	80 93 a3 21 	sts	0x21A3, r24
     7d6:	90 93 a4 21 	sts	0x21A4, r25
     7da:	40 91 a5 21 	lds	r20, 0x21A5
     7de:	50 91 a6 21 	lds	r21, 0x21A6
     7e2:	42 1b       	sub	r20, r18
     7e4:	53 0b       	sbc	r21, r19
     7e6:	48 0f       	add	r20, r24
     7e8:	59 1f       	adc	r21, r25
     7ea:	ff 24       	eor	r15, r15
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <qt_measure_sensors+0x3c>
     7ee:	f3 94       	inc	r15
     7f0:	48 5c       	subi	r20, 0xC8	; 200
     7f2:	50 40       	sbci	r21, 0x00	; 0
     7f4:	48 3c       	cpi	r20, 0xC8	; 200
     7f6:	51 05       	cpc	r21, r1
     7f8:	d0 f7       	brcc	.-12     	; 0x7ee <qt_measure_sensors+0x36>
     7fa:	40 93 a5 21 	sts	0x21A5, r20
     7fe:	50 93 a6 21 	sts	0x21A6, r21
     802:	80 91 c0 21 	lds	r24, 0x21C0
     806:	88 23       	and	r24, r24
     808:	41 f0       	breq	.+16     	; 0x81a <qt_measure_sensors+0x62>
     80a:	8f 15       	cp	r24, r15
     80c:	18 f4       	brcc	.+6      	; 0x814 <qt_measure_sensors+0x5c>
     80e:	10 92 c0 21 	sts	0x21C0, r1
     812:	03 c0       	rjmp	.+6      	; 0x81a <qt_measure_sensors+0x62>
     814:	8f 19       	sub	r24, r15
     816:	80 93 c0 21 	sts	0x21C0, r24
     81a:	c3 d3       	rcall	.+1926   	; 0xfa2 <burst>
     81c:	e0 91 a1 21 	lds	r30, 0x21A1
     820:	f0 91 a2 21 	lds	r31, 0x21A2
     824:	30 97       	sbiw	r30, 0x00	; 0
     826:	09 f0       	breq	.+2      	; 0x82a <qt_measure_sensors+0x72>
     828:	19 95       	eicall
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	05 c0       	rjmp	.+10     	; 0x83a <qt_measure_sensors+0x82>
     830:	81 2f       	mov	r24, r17
     832:	6f 2d       	mov	r22, r15
     834:	c3 d0       	rcall	.+390    	; 0x9bc <process_sensor>
     836:	08 2b       	or	r16, r24
     838:	1f 5f       	subi	r17, 0xFF	; 255
     83a:	60 91 bf 21 	lds	r22, 0x21BF
     83e:	16 17       	cp	r17, r22
     840:	b8 f3       	brcs	.-18     	; 0x830 <qt_measure_sensors+0x78>
     842:	00 23       	and	r16, r16
     844:	49 f0       	breq	.+18     	; 0x858 <qt_measure_sensors+0xa0>
     846:	80 91 9f 21 	lds	r24, 0x219F
     84a:	90 91 a0 21 	lds	r25, 0x21A0
     84e:	91 60       	ori	r25, 0x01	; 1
     850:	80 93 9f 21 	sts	0x219F, r24
     854:	90 93 a0 21 	sts	0x21A0, r25
     858:	10 92 9e 21 	sts	0x219E, r1
     85c:	a7 ea       	ldi	r26, 0xA7	; 167
     85e:	b1 e2       	ldi	r27, 0x21	; 33
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	17 c0       	rjmp	.+46     	; 0x896 <qt_measure_sensors+0xde>
     868:	8c 91       	ld	r24, X
     86a:	88 71       	andi	r24, 0x18	; 24
     86c:	91 f0       	breq	.+36     	; 0x892 <qt_measure_sensors+0xda>
     86e:	e3 2f       	mov	r30, r19
     870:	e6 95       	lsr	r30
     872:	e6 95       	lsr	r30
     874:	e6 95       	lsr	r30
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e2 57       	subi	r30, 0x72	; 114
     87a:	fe 4d       	sbci	r31, 0xDE	; 222
     87c:	83 2f       	mov	r24, r19
     87e:	87 70       	andi	r24, 0x07	; 7
     880:	ea 01       	movw	r28, r20
     882:	02 c0       	rjmp	.+4      	; 0x888 <qt_measure_sensors+0xd0>
     884:	cc 0f       	add	r28, r28
     886:	dd 1f       	adc	r29, r29
     888:	8a 95       	dec	r24
     88a:	e2 f7       	brpl	.-8      	; 0x884 <qt_measure_sensors+0xcc>
     88c:	20 89       	ldd	r18, Z+16	; 0x10
     88e:	2c 2b       	or	r18, r28
     890:	20 8b       	std	Z+16, r18	; 0x10
     892:	3f 5f       	subi	r19, 0xFF	; 255
     894:	16 96       	adiw	r26, 0x06	; 6
     896:	36 17       	cp	r19, r22
     898:	38 f3       	brcs	.-50     	; 0x868 <qt_measure_sensors+0xb0>
     89a:	80 91 9f 21 	lds	r24, 0x219F
     89e:	90 91 a0 21 	lds	r25, 0x21A0
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	e5 e0       	ldi	r30, 0x05	; 5
     8a8:	0c 94 39 20 	jmp	0x4072	; 0x4072 <__epilogue_restores__+0x1a>

000008ac <qt_reset_sensing>:
     8ac:	10 92 bf 21 	sts	0x21BF, r1
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	80 93 88 21 	sts	0x2188, r24
     8b6:	94 e1       	ldi	r25, 0x14	; 20
     8b8:	90 93 8b 21 	sts	0x218B, r25
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	80 93 8c 21 	sts	0x218C, r24
     8c2:	10 92 8a 21 	sts	0x218A, r1
     8c6:	90 93 89 21 	sts	0x2189, r25
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 87 21 	sts	0x2187, r24
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	80 93 8d 21 	sts	0x218D, r24
     8d6:	54 d3       	rcall	.+1704   	; 0xf80 <burst_reset>
     8d8:	10 92 a1 21 	sts	0x21A1, r1
     8dc:	10 92 a2 21 	sts	0x21A2, r1
     8e0:	08 95       	ret

000008e2 <qt_calibrate_sensing>:
     8e2:	1f 93       	push	r17
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	03 c0       	rjmp	.+6      	; 0x8ee <qt_calibrate_sensing+0xc>
     8e8:	81 2f       	mov	r24, r17
     8ea:	27 d0       	rcall	.+78     	; 0x93a <start_cal_sensor>
     8ec:	1f 5f       	subi	r17, 0xFF	; 255
     8ee:	80 91 bf 21 	lds	r24, 0x21BF
     8f2:	18 17       	cp	r17, r24
     8f4:	c8 f3       	brcs	.-14     	; 0x8e8 <qt_calibrate_sensing+0x6>
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <qt_init_sensing_with_burst>:
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
     906:	7b 01       	movw	r14, r22
     908:	10 e0       	ldi	r17, 0x00	; 0
     90a:	03 c0       	rjmp	.+6      	; 0x912 <qt_init_sensing_with_burst+0x18>
     90c:	81 2f       	mov	r24, r17
     90e:	15 d0       	rcall	.+42     	; 0x93a <start_cal_sensor>
     910:	1f 5f       	subi	r17, 0xFF	; 255
     912:	80 91 bf 21 	lds	r24, 0x21BF
     916:	18 17       	cp	r17, r24
     918:	c8 f3       	brcs	.-14     	; 0x90c <qt_init_sensing_with_burst+0x12>
     91a:	10 92 a3 21 	sts	0x21A3, r1
     91e:	10 92 a4 21 	sts	0x21A4, r1
     922:	c0 93 85 21 	sts	0x2185, r28
     926:	d0 93 86 21 	sts	0x2186, r29
     92a:	c7 01       	movw	r24, r14
     92c:	24 d3       	rcall	.+1608   	; 0xf76 <burst_init>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	08 95       	ret

0000093a <start_cal_sensor>:
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	e7 ea       	ldi	r30, 0xA7	; 167
     93e:	f1 e2       	ldi	r31, 0x21	; 33
     940:	9c 01       	movw	r18, r24
     942:	22 0f       	add	r18, r18
     944:	33 1f       	adc	r19, r19
     946:	28 0f       	add	r18, r24
     948:	39 1f       	adc	r19, r25
     94a:	d9 01       	movw	r26, r18
     94c:	aa 0f       	add	r26, r26
     94e:	bb 1f       	adc	r27, r27
     950:	ae 0f       	add	r26, r30
     952:	bf 1f       	adc	r27, r31
     954:	15 96       	adiw	r26, 0x05	; 5
     956:	4c 91       	ld	r20, X
     958:	15 97       	sbiw	r26, 0x05	; 5
     95a:	80 91 9f 21 	lds	r24, 0x219F
     95e:	90 91 a0 21 	lds	r25, 0x21A0
     962:	82 60       	ori	r24, 0x02	; 2
     964:	80 93 9f 21 	sts	0x219F, r24
     968:	90 93 a0 21 	sts	0x21A0, r25
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	3f 4f       	sbci	r19, 0xFF	; 255
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	10 82       	st	Z, r1
     97a:	e1 ec       	ldi	r30, 0xC1	; 193
     97c:	f1 e2       	ldi	r31, 0x21	; 33
     97e:	e4 0f       	add	r30, r20
     980:	f1 1d       	adc	r31, r1
     982:	80 e8       	ldi	r24, 0x80	; 128
     984:	80 83       	st	Z, r24
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	8c 93       	st	X, r24
     98a:	8f e0       	ldi	r24, 0x0F	; 15
     98c:	11 96       	adiw	r26, 0x01	; 1
     98e:	8c 93       	st	X, r24
     990:	08 95       	ret

00000992 <get_channel_delta>:
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	34 96       	adiw	r30, 0x04	; 4
     998:	ae e8       	ldi	r26, 0x8E	; 142
     99a:	b1 e2       	ldi	r27, 0x21	; 33
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	ea 0f       	add	r30, r26
     9a2:	fb 1f       	adc	r31, r27
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	a8 0f       	add	r26, r24
     9aa:	b9 1f       	adc	r27, r25
     9ac:	20 81       	ld	r18, Z
     9ae:	31 81       	ldd	r19, Z+1	; 0x01
     9b0:	8d 91       	ld	r24, X+
     9b2:	9c 91       	ld	r25, X
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	c9 01       	movw	r24, r18
     9ba:	08 95       	ret

000009bc <process_sensor>:
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e4 ee       	ldi	r30, 0xE4	; 228
     9c2:	f4 e0       	ldi	r31, 0x04	; 4
     9c4:	0c 94 17 20 	jmp	0x402e	; 0x402e <__prologue_saves__+0x8>
     9c8:	78 2e       	mov	r7, r24
     9ca:	f6 2e       	mov	r15, r22
     9cc:	9f de       	rcall	.-706    	; 0x70c <qt_get_sensor_delta>
     9ce:	5c 01       	movw	r10, r24
     9d0:	07 2d       	mov	r16, r7
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	f8 01       	movw	r30, r16
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e0 0f       	add	r30, r16
     9dc:	f1 1f       	adc	r31, r17
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e9 55       	subi	r30, 0x59	; 89
     9e4:	fe 4d       	sbci	r31, 0xDE	; 222
     9e6:	54 81       	ldd	r21, Z+4	; 0x04
     9e8:	43 81       	ldd	r20, Z+3	; 0x03
     9ea:	24 2f       	mov	r18, r20
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	85 2f       	mov	r24, r21
     9f0:	83 70       	andi	r24, 0x03	; 3
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <process_sensor+0x40>
     9f8:	35 95       	asr	r19
     9fa:	27 95       	ror	r18
     9fc:	8a 95       	dec	r24
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <process_sensor+0x3c>
     a00:	82 2f       	mov	r24, r18
     a02:	22 30       	cpi	r18, 0x02	; 2
     a04:	08 f4       	brcc	.+2      	; 0xa08 <process_sensor+0x4c>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	24 2f       	mov	r18, r20
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	68 1b       	sub	r22, r24
     a10:	71 09       	sbc	r23, r1
     a12:	f8 01       	movw	r30, r16
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	e0 0f       	add	r30, r16
     a1a:	f1 1f       	adc	r31, r17
     a1c:	ef 01       	movw	r28, r30
     a1e:	cc 0f       	add	r28, r28
     a20:	dd 1f       	adc	r29, r29
     a22:	c9 55       	subi	r28, 0x59	; 89
     a24:	de 4d       	sbci	r29, 0xDE	; 222
     a26:	88 81       	ld	r24, Y
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	09 f4       	brne	.+2      	; 0xa2e <process_sensor+0x72>
     a2c:	fb c0       	rjmp	.+502    	; 0xc24 <process_sensor+0x268>
     a2e:	85 30       	cpi	r24, 0x05	; 5
     a30:	30 f4       	brcc	.+12     	; 0xa3e <process_sensor+0x82>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	71 f0       	breq	.+28     	; 0xa52 <process_sensor+0x96>
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	09 f0       	breq	.+2      	; 0xa3c <process_sensor+0x80>
     a3a:	96 c2       	rjmp	.+1324   	; 0xf68 <process_sensor+0x5ac>
     a3c:	6e c0       	rjmp	.+220    	; 0xb1a <process_sensor+0x15e>
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	09 f4       	brne	.+2      	; 0xa44 <process_sensor+0x88>
     a42:	a5 c1       	rjmp	.+842    	; 0xd8e <process_sensor+0x3d2>
     a44:	80 32       	cpi	r24, 0x20	; 32
     a46:	09 f4       	brne	.+2      	; 0xa4a <process_sensor+0x8e>
     a48:	56 c2       	rjmp	.+1196   	; 0xef6 <process_sensor+0x53a>
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	09 f0       	breq	.+2      	; 0xa50 <process_sensor+0x94>
     a4e:	8c c2       	rjmp	.+1304   	; 0xf68 <process_sensor+0x5ac>
     a50:	02 c2       	rjmp	.+1028   	; 0xe56 <process_sensor+0x49a>
     a52:	40 91 9f 21 	lds	r20, 0x219F
     a56:	50 91 a0 21 	lds	r21, 0x21A0
     a5a:	ca 01       	movw	r24, r20
     a5c:	92 60       	ori	r25, 0x02	; 2
     a5e:	80 93 9f 21 	sts	0x219F, r24
     a62:	90 93 a0 21 	sts	0x21A0, r25
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	69 81       	ldd	r22, Y+1	; 0x01
     a6a:	a8 2f       	mov	r26, r24
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	6a 30       	cpi	r22, 0x0A	; 10
     a70:	60 f0       	brcs	.+24     	; 0xa8a <process_sensor+0xce>
     a72:	aa 0f       	add	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	fd 01       	movw	r30, r26
     a78:	e2 57       	subi	r30, 0x72	; 114
     a7a:	fe 4d       	sbci	r31, 0xDE	; 222
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	aa 56       	subi	r26, 0x6A	; 106
     a82:	be 4d       	sbci	r27, 0xDE	; 222
     a84:	8d 93       	st	X+, r24
     a86:	9c 93       	st	X, r25
     a88:	18 c0       	rjmp	.+48     	; 0xaba <process_sensor+0xfe>
     a8a:	aa 0f       	add	r26, r26
     a8c:	bb 1f       	adc	r27, r27
     a8e:	fd 01       	movw	r30, r26
     a90:	ea 56       	subi	r30, 0x6A	; 106
     a92:	fe 4d       	sbci	r31, 0xDE	; 222
     a94:	20 81       	ld	r18, Z
     a96:	31 81       	ldd	r19, Z+1	; 0x01
     a98:	a2 57       	subi	r26, 0x72	; 114
     a9a:	be 4d       	sbci	r27, 0xDE	; 222
     a9c:	8d 91       	ld	r24, X+
     a9e:	9c 91       	ld	r25, X
     aa0:	82 17       	cp	r24, r18
     aa2:	93 07       	cpc	r25, r19
     aa4:	18 f4       	brcc	.+6      	; 0xaac <process_sensor+0xf0>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	30 40       	sbci	r19, 0x00	; 0
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <process_sensor+0xfa>
     aac:	28 17       	cp	r18, r24
     aae:	39 07       	cpc	r19, r25
     ab0:	50 f4       	brcc	.+20     	; 0xac6 <process_sensor+0x10a>
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	20 83       	st	Z, r18
     ab8:	31 83       	std	Z+1, r19	; 0x01
     aba:	48 60       	ori	r20, 0x08	; 8
     abc:	52 60       	ori	r21, 0x02	; 2
     abe:	40 93 9f 21 	sts	0x219F, r20
     ac2:	50 93 a0 21 	sts	0x21A0, r21
     ac6:	86 2f       	mov	r24, r22
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	f8 01       	movw	r30, r16
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	e0 0f       	add	r30, r16
     ad2:	f1 1f       	adc	r31, r17
     ad4:	ef 01       	movw	r28, r30
     ad6:	cc 0f       	add	r28, r28
     ad8:	dd 1f       	adc	r29, r29
     ada:	c9 55       	subi	r28, 0x59	; 89
     adc:	de 4d       	sbci	r29, 0xDE	; 222
     ade:	89 83       	std	Y+1, r24	; 0x01
     ae0:	88 23       	and	r24, r24
     ae2:	b1 f4       	brne	.+44     	; 0xb10 <process_sensor+0x154>
     ae4:	ad 81       	ldd	r26, Y+5	; 0x05
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	88 83       	st	Y, r24
     aea:	80 91 9f 21 	lds	r24, 0x219F
     aee:	90 91 a0 21 	lds	r25, 0x21A0
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 93 9f 21 	sts	0x219F, r24
     af8:	90 93 a0 21 	sts	0x21A0, r25
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	e7 55       	subi	r30, 0x57	; 87
     b02:	fe 4d       	sbci	r31, 0xDE	; 222
     b04:	10 82       	st	Z, r1
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	af 53       	subi	r26, 0x3F	; 63
     b0a:	be 4d       	sbci	r27, 0xDE	; 222
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	8c 93       	st	X, r24
     b10:	80 91 89 21 	lds	r24, 0x2189
     b14:	80 93 c0 21 	sts	0x21C0, r24
     b18:	25 c2       	rjmp	.+1098   	; 0xf64 <process_sensor+0x5a8>
     b1a:	52 ff       	sbrs	r21, 2
     b1c:	08 c0       	rjmp	.+16     	; 0xb2e <process_sensor+0x172>
     b1e:	ed 81       	ldd	r30, Y+5	; 0x05
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ef 53       	subi	r30, 0x3F	; 63
     b24:	fe 4d       	sbci	r31, 0xDE	; 222
     b26:	10 82       	st	Z, r1
     b28:	80 e2       	ldi	r24, 0x20	; 32
     b2a:	88 83       	st	Y, r24
     b2c:	0c c2       	rjmp	.+1048   	; 0xf46 <process_sensor+0x58a>
     b2e:	c5 01       	movw	r24, r10
     b30:	b7 fe       	sbrs	r11, 7
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <process_sensor+0x17c>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	82 17       	cp	r24, r18
     b3a:	93 07       	cpc	r25, r19
     b3c:	80 f0       	brcs	.+32     	; 0xb5e <process_sensor+0x1a2>
     b3e:	f8 01       	movw	r30, r16
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e0 0f       	add	r30, r16
     b46:	f1 1f       	adc	r31, r17
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	df 01       	movw	r26, r30
     b4e:	a9 55       	subi	r26, 0x59	; 89
     b50:	be 4d       	sbci	r27, 0xDE	; 222
     b52:	84 e0       	ldi	r24, 0x04	; 4
     b54:	8c 93       	st	X, r24
     b56:	e7 55       	subi	r30, 0x57	; 87
     b58:	fe 4d       	sbci	r31, 0xDE	; 222
     b5a:	10 82       	st	Z, r1
     b5c:	fa c1       	rjmp	.+1012   	; 0xf52 <process_sensor+0x596>
     b5e:	ff 20       	and	r15, r15
     b60:	09 f4       	brne	.+2      	; 0xb64 <process_sensor+0x1a8>
     b62:	02 c2       	rjmp	.+1028   	; 0xf68 <process_sensor+0x5ac>
     b64:	80 91 c0 21 	lds	r24, 0x21C0
     b68:	88 23       	and	r24, r24
     b6a:	09 f0       	breq	.+2      	; 0xb6e <process_sensor+0x1b2>
     b6c:	fd c1       	rjmp	.+1018   	; 0xf68 <process_sensor+0x5ac>
     b6e:	f8 01       	movw	r30, r16
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	e0 0f       	add	r30, r16
     b76:	f1 1f       	adc	r31, r17
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e9 55       	subi	r30, 0x59	; 89
     b7e:	fe 4d       	sbci	r31, 0xDE	; 222
     b80:	85 81       	ldd	r24, Z+5	; 0x05
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	ec 01       	movw	r28, r24
     b86:	cc 0f       	add	r28, r28
     b88:	dd 1f       	adc	r29, r29
     b8a:	ca 56       	subi	r28, 0x6A	; 106
     b8c:	de 4d       	sbci	r29, 0xDE	; 222
     b8e:	28 81       	ld	r18, Y
     b90:	39 81       	ldd	r19, Y+1	; 0x01
     b92:	fc 01       	movw	r30, r24
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e2 57       	subi	r30, 0x72	; 114
     b9a:	fe 4d       	sbci	r31, 0xDE	; 222
     b9c:	01 90       	ld	r0, Z+
     b9e:	f0 81       	ld	r31, Z
     ba0:	e0 2d       	mov	r30, r0
     ba2:	2e 17       	cp	r18, r30
     ba4:	3f 07       	cpc	r19, r31
     ba6:	88 f4       	brcc	.+34     	; 0xbca <process_sensor+0x20e>
     ba8:	fc 01       	movw	r30, r24
     baa:	ef 53       	subi	r30, 0x3F	; 63
     bac:	fe 4d       	sbci	r31, 0xDE	; 222
     bae:	90 81       	ld	r25, Z
     bb0:	9f 0d       	add	r25, r15
     bb2:	90 83       	st	Z, r25
     bb4:	80 91 8c 21 	lds	r24, 0x218C
     bb8:	80 58       	subi	r24, 0x80	; 128
     bba:	98 17       	cp	r25, r24
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <process_sensor+0x204>
     bbe:	d4 c1       	rjmp	.+936    	; 0xf68 <process_sensor+0x5ac>
     bc0:	80 e8       	ldi	r24, 0x80	; 128
     bc2:	80 83       	st	Z, r24
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <process_sensor+0x236>
     bca:	dc 01       	movw	r26, r24
     bcc:	af 53       	subi	r26, 0x3F	; 63
     bce:	be 4d       	sbci	r27, 0xDE	; 222
     bd0:	e2 17       	cp	r30, r18
     bd2:	f3 07       	cpc	r31, r19
     bd4:	d0 f4       	brcc	.+52     	; 0xc0a <process_sensor+0x24e>
     bd6:	8c 91       	ld	r24, X
     bd8:	8f 19       	sub	r24, r15
     bda:	8c 93       	st	X, r24
     bdc:	40 e8       	ldi	r20, 0x80	; 128
     bde:	90 91 8b 21 	lds	r25, 0x218B
     be2:	54 2f       	mov	r21, r20
     be4:	59 1b       	sub	r21, r25
     be6:	58 17       	cp	r21, r24
     be8:	08 f4       	brcc	.+2      	; 0xbec <process_sensor+0x230>
     bea:	be c1       	rjmp	.+892    	; 0xf68 <process_sensor+0x5ac>
     bec:	4c 93       	st	X, r20
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	30 40       	sbci	r19, 0x00	; 0
     bf2:	28 83       	st	Y, r18
     bf4:	39 83       	std	Y+1, r19	; 0x01
     bf6:	80 91 9f 21 	lds	r24, 0x219F
     bfa:	90 91 a0 21 	lds	r25, 0x21A0
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	80 93 9f 21 	sts	0x219F, r24
     c04:	90 93 a0 21 	sts	0x21A0, r25
     c08:	af c1       	rjmp	.+862    	; 0xf68 <process_sensor+0x5ac>
     c0a:	2c 91       	ld	r18, X
     c0c:	21 38       	cpi	r18, 0x81	; 129
     c0e:	10 f0       	brcs	.+4      	; 0xc14 <process_sensor+0x258>
     c10:	21 50       	subi	r18, 0x01	; 1
     c12:	2c 93       	st	X, r18
     c14:	fc 01       	movw	r30, r24
     c16:	ef 53       	subi	r30, 0x3F	; 63
     c18:	fe 4d       	sbci	r31, 0xDE	; 222
     c1a:	80 81       	ld	r24, Z
     c1c:	87 fd       	sbrc	r24, 7
     c1e:	a4 c1       	rjmp	.+840    	; 0xf68 <process_sensor+0x5ac>
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	67 c1       	rjmp	.+718    	; 0xef2 <process_sensor+0x536>
     c24:	c5 01       	movw	r24, r10
     c26:	b7 fe       	sbrs	r11, 7
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <process_sensor+0x272>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	f8 01       	movw	r30, r16
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	82 17       	cp	r24, r18
     c36:	93 07       	cpc	r25, r19
     c38:	08 f4       	brcc	.+2      	; 0xc3c <process_sensor+0x280>
     c3a:	8f c0       	rjmp	.+286    	; 0xd5a <process_sensor+0x39e>
     c3c:	80 91 89 21 	lds	r24, 0x2189
     c40:	80 93 c0 21 	sts	0x21C0, r24
     c44:	9f 01       	movw	r18, r30
     c46:	20 0f       	add	r18, r16
     c48:	31 1f       	adc	r19, r17
     c4a:	22 0f       	add	r18, r18
     c4c:	33 1f       	adc	r19, r19
     c4e:	d9 01       	movw	r26, r18
     c50:	a7 55       	subi	r26, 0x57	; 87
     c52:	be 4d       	sbci	r27, 0xDE	; 222
     c54:	8c 91       	ld	r24, X
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	8c 93       	st	X, r24
     c5a:	f9 01       	movw	r30, r18
     c5c:	e9 55       	subi	r30, 0x59	; 89
     c5e:	fe 4d       	sbci	r31, 0xDE	; 222
     c60:	84 81       	ldd	r24, Z+4	; 0x04
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	88 73       	andi	r24, 0x38	; 56
     c66:	90 70       	andi	r25, 0x00	; 0
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	96 95       	lsr	r25
     c6c:	87 95       	ror	r24
     c6e:	2a 95       	dec	r18
     c70:	e1 f7       	brne	.-8      	; 0xc6a <process_sensor+0x2ae>
     c72:	68 2e       	mov	r6, r24
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <process_sensor+0x2be>
     c78:	3e c0       	rjmp	.+124    	; 0xcf6 <process_sensor+0x33a>
     c7a:	cc 24       	eor	r12, r12
     c7c:	dd 24       	eor	r13, r13
     c7e:	7f 01       	movw	r14, r30
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	e8 0e       	add	r14, r24
     c86:	f9 1e       	adc	r15, r25
     c88:	4d 01       	movw	r8, r26
     c8a:	2f c0       	rjmp	.+94     	; 0xcea <process_sensor+0x32e>
     c8c:	d7 14       	cp	r13, r7
     c8e:	61 f1       	breq	.+88     	; 0xce8 <process_sensor+0x32c>
     c90:	8d 2d       	mov	r24, r13
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	ec 01       	movw	r28, r24
     c96:	cc 0f       	add	r28, r28
     c98:	dd 1f       	adc	r29, r29
     c9a:	c8 0f       	add	r28, r24
     c9c:	d9 1f       	adc	r29, r25
     c9e:	cc 0f       	add	r28, r28
     ca0:	dd 1f       	adc	r29, r29
     ca2:	c9 55       	subi	r28, 0x59	; 89
     ca4:	de 4d       	sbci	r29, 0xDE	; 222
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	88 73       	andi	r24, 0x38	; 56
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	73 e0       	ldi	r23, 0x03	; 3
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	7a 95       	dec	r23
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <process_sensor+0x2f4>
     cb8:	68 16       	cp	r6, r24
     cba:	b1 f4       	brne	.+44     	; 0xce8 <process_sensor+0x32c>
     cbc:	8d 2d       	mov	r24, r13
     cbe:	26 dd       	rcall	.-1460   	; 0x70c <qt_get_sensor_delta>
     cc0:	2b 81       	ldd	r18, Y+3	; 0x03
     cc2:	82 1b       	sub	r24, r18
     cc4:	91 09       	sbc	r25, r1
     cc6:	f7 01       	movw	r30, r14
     cc8:	20 81       	ld	r18, Z
     cca:	a5 01       	movw	r20, r10
     ccc:	42 1b       	sub	r20, r18
     cce:	51 09       	sbc	r21, r1
     cd0:	48 17       	cp	r20, r24
     cd2:	59 07       	cpc	r21, r25
     cd4:	2c f0       	brlt	.+10     	; 0xce0 <process_sensor+0x324>
     cd6:	88 81       	ld	r24, Y
     cd8:	80 31       	cpi	r24, 0x10	; 16
     cda:	11 f0       	breq	.+4      	; 0xce0 <process_sensor+0x324>
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	21 f4       	brne	.+8      	; 0xce8 <process_sensor+0x32c>
     ce0:	f4 01       	movw	r30, r8
     ce2:	10 82       	st	Z, r1
     ce4:	cc 24       	eor	r12, r12
     ce6:	c3 94       	inc	r12
     ce8:	d3 94       	inc	r13
     cea:	80 91 bf 21 	lds	r24, 0x21BF
     cee:	d8 16       	cp	r13, r24
     cf0:	68 f2       	brcs	.-102    	; 0xc8c <process_sensor+0x2d0>
     cf2:	cc 20       	and	r12, r12
     cf4:	79 f4       	brne	.+30     	; 0xd14 <process_sensor+0x358>
     cf6:	80 91 88 21 	lds	r24, 0x2188
     cfa:	88 23       	and	r24, r24
     cfc:	59 f0       	breq	.+22     	; 0xd14 <process_sensor+0x358>
     cfe:	80 91 9f 21 	lds	r24, 0x219F
     d02:	90 91 a0 21 	lds	r25, 0x21A0
     d06:	98 60       	ori	r25, 0x08	; 8
     d08:	80 93 9f 21 	sts	0x219F, r24
     d0c:	90 93 a0 21 	sts	0x21A0, r25
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <process_sensor+0x35a>
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	98 01       	movw	r18, r16
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	20 0f       	add	r18, r16
     d1e:	31 1f       	adc	r19, r17
     d20:	f9 01       	movw	r30, r18
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	e7 55       	subi	r30, 0x57	; 87
     d28:	fe 4d       	sbci	r31, 0xDE	; 222
     d2a:	90 81       	ld	r25, Z
     d2c:	80 91 88 21 	lds	r24, 0x2188
     d30:	98 17       	cp	r25, r24
     d32:	08 f4       	brcc	.+2      	; 0xd36 <process_sensor+0x37a>
     d34:	1a c1       	rjmp	.+564    	; 0xf6a <process_sensor+0x5ae>
     d36:	80 91 9f 21 	lds	r24, 0x219F
     d3a:	90 91 a0 21 	lds	r25, 0x21A0
     d3e:	83 60       	ori	r24, 0x03	; 3
     d40:	80 93 9f 21 	sts	0x219F, r24
     d44:	90 93 a0 21 	sts	0x21A0, r25
     d48:	f9 01       	movw	r30, r18
     d4a:	ee 0f       	add	r30, r30
     d4c:	ff 1f       	adc	r31, r31
     d4e:	e9 55       	subi	r30, 0x59	; 89
     d50:	fe 4d       	sbci	r31, 0xDE	; 222
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	80 83       	st	Z, r24
     d56:	11 82       	std	Z+1, r1	; 0x01
     d58:	08 c1       	rjmp	.+528    	; 0xf6a <process_sensor+0x5ae>
     d5a:	e0 0f       	add	r30, r16
     d5c:	f1 1f       	adc	r31, r17
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	df 01       	movw	r26, r30
     d64:	a9 55       	subi	r26, 0x59	; 89
     d66:	be 4d       	sbci	r27, 0xDE	; 222
     d68:	15 96       	adiw	r26, 0x05	; 5
     d6a:	2c 91       	ld	r18, X
     d6c:	15 97       	sbiw	r26, 0x05	; 5
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	8c 93       	st	X, r24
     d72:	80 91 9f 21 	lds	r24, 0x219F
     d76:	90 91 a0 21 	lds	r25, 0x21A0
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	80 93 9f 21 	sts	0x219F, r24
     d80:	90 93 a0 21 	sts	0x21A0, r25
     d84:	e7 55       	subi	r30, 0x57	; 87
     d86:	fe 4d       	sbci	r31, 0xDE	; 222
     d88:	10 82       	st	Z, r1
     d8a:	e2 2f       	mov	r30, r18
     d8c:	ae c0       	rjmp	.+348    	; 0xeea <process_sensor+0x52e>
     d8e:	52 ff       	sbrs	r21, 2
     d90:	0e c0       	rjmp	.+28     	; 0xdae <process_sensor+0x3f2>
     d92:	ed 81       	ldd	r30, Y+5	; 0x05
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	ef 53       	subi	r30, 0x3F	; 63
     d98:	fe 4d       	sbci	r31, 0xDE	; 222
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	80 83       	st	Z, r24
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	88 83       	st	Y, r24
     da2:	80 91 9f 21 	lds	r24, 0x219F
     da6:	90 91 a0 21 	lds	r25, 0x21A0
     daa:	90 61       	ori	r25, 0x10	; 16
     dac:	4a c0       	rjmp	.+148    	; 0xe42 <process_sensor+0x486>
     dae:	c5 01       	movw	r24, r10
     db0:	b7 fe       	sbrs	r11, 7
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <process_sensor+0x3fc>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	f8 01       	movw	r30, r16
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	40 91 9f 21 	lds	r20, 0x219F
     dc2:	50 91 a0 21 	lds	r21, 0x21A0
     dc6:	86 17       	cp	r24, r22
     dc8:	97 07       	cpc	r25, r23
     dca:	70 f4       	brcc	.+28     	; 0xde8 <process_sensor+0x42c>
     dcc:	e0 0f       	add	r30, r16
     dce:	f1 1f       	adc	r31, r17
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	e9 55       	subi	r30, 0x59	; 89
     dd6:	fe 4d       	sbci	r31, 0xDE	; 222
     dd8:	88 e0       	ldi	r24, 0x08	; 8
     dda:	80 83       	st	Z, r24
     ddc:	54 60       	ori	r21, 0x04	; 4
     dde:	40 93 9f 21 	sts	0x219F, r20
     de2:	50 93 a0 21 	sts	0x21A0, r21
     de6:	31 c0       	rjmp	.+98     	; 0xe4a <process_sensor+0x48e>
     de8:	41 60       	ori	r20, 0x01	; 1
     dea:	40 93 9f 21 	sts	0x219F, r20
     dee:	50 93 a0 21 	sts	0x21A0, r21
     df2:	e0 0f       	add	r30, r16
     df4:	f1 1f       	adc	r31, r17
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	e7 55       	subi	r30, 0x57	; 87
     dfc:	fe 4d       	sbci	r31, 0xDE	; 222
     dfe:	90 81       	ld	r25, Z
     e00:	80 91 88 21 	lds	r24, 0x2188
     e04:	98 17       	cp	r25, r24
     e06:	10 f4       	brcc	.+4      	; 0xe0c <process_sensor+0x450>
     e08:	9f 5f       	subi	r25, 0xFF	; 255
     e0a:	90 83       	st	Z, r25
     e0c:	90 91 8a 21 	lds	r25, 0x218A
     e10:	99 23       	and	r25, r25
     e12:	71 f0       	breq	.+28     	; 0xe30 <process_sensor+0x474>
     e14:	f8 01       	movw	r30, r16
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	e0 0f       	add	r30, r16
     e1c:	f1 1f       	adc	r31, r17
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	e9 55       	subi	r30, 0x59	; 89
     e24:	fe 4d       	sbci	r31, 0xDE	; 222
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	89 17       	cp	r24, r25
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <process_sensor+0x478>
     e2c:	8f 0d       	add	r24, r15
     e2e:	81 83       	std	Z+1, r24	; 0x01
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0c c0       	rjmp	.+24     	; 0xe4c <process_sensor+0x490>
     e34:	87 2d       	mov	r24, r7
     e36:	81 dd       	rcall	.-1278   	; 0x93a <start_cal_sensor>
     e38:	80 91 9f 21 	lds	r24, 0x219F
     e3c:	90 91 a0 21 	lds	r25, 0x21A0
     e40:	92 60       	ori	r25, 0x02	; 2
     e42:	80 93 9f 21 	sts	0x219F, r24
     e46:	90 93 a0 21 	sts	0x21A0, r25
     e4a:	41 e0       	ldi	r20, 0x01	; 1
     e4c:	80 91 89 21 	lds	r24, 0x2189
     e50:	80 93 c0 21 	sts	0x21C0, r24
     e54:	8a c0       	rjmp	.+276    	; 0xf6a <process_sensor+0x5ae>
     e56:	80 91 89 21 	lds	r24, 0x2189
     e5a:	80 93 c0 21 	sts	0x21C0, r24
     e5e:	df 01       	movw	r26, r30
     e60:	aa 0f       	add	r26, r26
     e62:	bb 1f       	adc	r27, r27
     e64:	a7 55       	subi	r26, 0x57	; 87
     e66:	be 4d       	sbci	r27, 0xDE	; 222
     e68:	8c 91       	ld	r24, X
     e6a:	88 23       	and	r24, r24
     e6c:	89 f1       	breq	.+98     	; 0xed0 <process_sensor+0x514>
     e6e:	c5 01       	movw	r24, r10
     e70:	b7 fe       	sbrs	r11, 7
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <process_sensor+0x4bc>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	40 91 9f 21 	lds	r20, 0x219F
     e7c:	50 91 a0 21 	lds	r21, 0x21A0
     e80:	68 17       	cp	r22, r24
     e82:	79 07       	cpc	r23, r25
     e84:	90 f4       	brcc	.+36     	; 0xeaa <process_sensor+0x4ee>
     e86:	f8 01       	movw	r30, r16
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e0 0f       	add	r30, r16
     e8e:	f1 1f       	adc	r31, r17
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	e9 55       	subi	r30, 0x59	; 89
     e96:	fe 4d       	sbci	r31, 0xDE	; 222
     e98:	80 e1       	ldi	r24, 0x10	; 16
     e9a:	80 83       	st	Z, r24
     e9c:	41 60       	ori	r20, 0x01	; 1
     e9e:	40 93 9f 21 	sts	0x219F, r20
     ea2:	50 93 a0 21 	sts	0x21A0, r21
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <process_sensor+0x4fa>
     eaa:	54 60       	ori	r21, 0x04	; 4
     eac:	40 93 9f 21 	sts	0x219F, r20
     eb0:	50 93 a0 21 	sts	0x21A0, r21
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	f8 01       	movw	r30, r16
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	e0 0f       	add	r30, r16
     ebe:	f1 1f       	adc	r31, r17
     ec0:	ee 0f       	add	r30, r30
     ec2:	ff 1f       	adc	r31, r31
     ec4:	e7 55       	subi	r30, 0x57	; 87
     ec6:	fe 4d       	sbci	r31, 0xDE	; 222
     ec8:	80 81       	ld	r24, Z
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24
     ece:	4d c0       	rjmp	.+154    	; 0xf6a <process_sensor+0x5ae>
     ed0:	ed 81       	ldd	r30, Y+5	; 0x05
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	88 83       	st	Y, r24
     ed6:	80 91 9f 21 	lds	r24, 0x219F
     eda:	90 91 a0 21 	lds	r25, 0x21A0
     ede:	82 60       	ori	r24, 0x02	; 2
     ee0:	80 93 9f 21 	sts	0x219F, r24
     ee4:	90 93 a0 21 	sts	0x21A0, r25
     ee8:	1c 92       	st	X, r1
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	ef 53       	subi	r30, 0x3F	; 63
     eee:	fe 4d       	sbci	r31, 0xDE	; 222
     ef0:	80 e8       	ldi	r24, 0x80	; 128
     ef2:	80 83       	st	Z, r24
     ef4:	39 c0       	rjmp	.+114    	; 0xf68 <process_sensor+0x5ac>
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	a8 2f       	mov	r26, r24
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	af 53       	subi	r26, 0x3F	; 63
     efe:	be 4d       	sbci	r27, 0xDE	; 222
     f00:	9c 91       	ld	r25, X
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	9c 93       	st	X, r25
     f06:	52 fd       	sbrc	r21, 2
     f08:	18 c0       	rjmp	.+48     	; 0xf3a <process_sensor+0x57e>
     f0a:	97 ff       	sbrs	r25, 7
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <process_sensor+0x558>
     f0e:	80 e1       	ldi	r24, 0x10	; 16
     f10:	88 83       	st	Y, r24
     f12:	2a c0       	rjmp	.+84     	; 0xf68 <process_sensor+0x5ac>
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	88 83       	st	Y, r24
     f18:	80 91 9f 21 	lds	r24, 0x219F
     f1c:	90 91 a0 21 	lds	r25, 0x21A0
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	80 93 9f 21 	sts	0x219F, r24
     f26:	90 93 a0 21 	sts	0x21A0, r25
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e7 55       	subi	r30, 0x57	; 87
     f30:	fe 4d       	sbci	r31, 0xDE	; 222
     f32:	10 82       	st	Z, r1
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
     f38:	17 c0       	rjmp	.+46     	; 0xf68 <process_sensor+0x5ac>
     f3a:	80 91 8d 21 	lds	r24, 0x218D
     f3e:	98 17       	cp	r25, r24
     f40:	40 f0       	brcs	.+16     	; 0xf52 <process_sensor+0x596>
     f42:	87 2d       	mov	r24, r7
     f44:	fa dc       	rcall	.-1548   	; 0x93a <start_cal_sensor>
     f46:	80 91 9f 21 	lds	r24, 0x219F
     f4a:	90 91 a0 21 	lds	r25, 0x21A0
     f4e:	90 61       	ori	r25, 0x10	; 16
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <process_sensor+0x5a0>
     f52:	80 91 9f 21 	lds	r24, 0x219F
     f56:	90 91 a0 21 	lds	r25, 0x21A0
     f5a:	94 60       	ori	r25, 0x04	; 4
     f5c:	80 93 9f 21 	sts	0x219F, r24
     f60:	90 93 a0 21 	sts	0x21A0, r25
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <process_sensor+0x5ae>
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	84 2f       	mov	r24, r20
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	ee e0       	ldi	r30, 0x0E	; 14
     f72:	0c 94 30 20 	jmp	0x4060	; 0x4060 <__epilogue_restores__+0x8>

00000f76 <burst_init>:
     f76:	fc 01       	movw	r30, r24
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	09 f0       	breq	.+2      	; 0xf7e <burst_init+0x8>
     f7c:	19 95       	eicall
     f7e:	08 95       	ret

00000f80 <burst_reset>:
     f80:	10 92 c5 21 	sts	0x21C5, r1
     f84:	10 92 c6 21 	sts	0x21C6, r1
     f88:	10 92 c9 21 	sts	0x21C9, r1
     f8c:	10 92 ca 21 	sts	0x21CA, r1
     f90:	10 92 c7 21 	sts	0x21C7, r1
     f94:	10 92 c8 21 	sts	0x21C8, r1
     f98:	10 92 cb 21 	sts	0x21CB, r1
     f9c:	10 92 cc 21 	sts	0x21CC, r1
     fa0:	08 95       	ret

00000fa2 <burst>:
     fa2:	80 91 c7 21 	lds	r24, 0x21C7
     fa6:	90 91 c5 21 	lds	r25, 0x21C5
     faa:	89 2b       	or	r24, r25
     fac:	41 f0       	breq	.+16     	; 0xfbe <burst+0x1c>
     fae:	e0 91 85 21 	lds	r30, 0x2185
     fb2:	f0 91 86 21 	lds	r31, 0x2186
     fb6:	30 97       	sbiw	r30, 0x00	; 0
     fb8:	11 f0       	breq	.+4      	; 0xfbe <burst+0x1c>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	19 95       	eicall
     fbe:	80 91 c8 21 	lds	r24, 0x21C8
     fc2:	90 91 c6 21 	lds	r25, 0x21C6
     fc6:	89 2b       	or	r24, r25
     fc8:	41 f0       	breq	.+16     	; 0xfda <burst+0x38>
     fca:	e0 91 85 21 	lds	r30, 0x2185
     fce:	f0 91 86 21 	lds	r31, 0x2186
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	11 f0       	breq	.+4      	; 0xfda <burst+0x38>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	19 95       	eicall
     fda:	08 95       	ret

00000fdc <adc_handler>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t ntc_get_raw_value(void)
{
	return ntc_sensor_sample;
}
     fdc:	61 30       	cpi	r22, 0x01	; 1
     fde:	69 f5       	brne	.+90     	; 0x103a <adc_handler+0x5e>
     fe0:	80 91 ce 21 	lds	r24, 0x21CE
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	80 93 ce 21 	sts	0x21CE, r24
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	39 f4       	brne	.+14     	; 0xffc <adc_handler+0x20>
     fee:	40 93 cf 21 	sts	0x21CF, r20
     ff2:	50 93 d0 21 	sts	0x21D0, r21
     ff6:	10 92 d3 21 	sts	0x21D3, r1
     ffa:	0c c0       	rjmp	.+24     	; 0x1014 <adc_handler+0x38>
     ffc:	80 91 cf 21 	lds	r24, 0x21CF
    1000:	90 91 d0 21 	lds	r25, 0x21D0
    1004:	48 0f       	add	r20, r24
    1006:	59 1f       	adc	r21, r25
    1008:	56 95       	lsr	r21
    100a:	47 95       	ror	r20
    100c:	40 93 cf 21 	sts	0x21CF, r20
    1010:	50 93 d0 21 	sts	0x21D0, r21
    1014:	80 91 ce 21 	lds	r24, 0x21CE
    1018:	84 30       	cpi	r24, 0x04	; 4
    101a:	31 f4       	brne	.+12     	; 0x1028 <adc_handler+0x4c>
    101c:	10 92 ce 21 	sts	0x21CE, r1
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 d3 21 	sts	0x21D3, r24
    1026:	08 95       	ret
    1028:	9f b7       	in	r25, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	e0 e0       	ldi	r30, 0x00	; 0
    102e:	f2 e0       	ldi	r31, 0x02	; 2
    1030:	80 81       	ld	r24, Z
    1032:	84 60       	ori	r24, 0x04	; 4
    1034:	80 83       	st	Z, r24
    1036:	9f bf       	out	0x3f, r25	; 63
    1038:	08 95       	ret
    103a:	62 30       	cpi	r22, 0x02	; 2
    103c:	61 f5       	brne	.+88     	; 0x1096 <adc_handler+0xba>
    103e:	80 91 cd 21 	lds	r24, 0x21CD
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 cd 21 	sts	0x21CD, r24
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	39 f4       	brne	.+14     	; 0x105a <adc_handler+0x7e>
    104c:	40 93 d1 21 	sts	0x21D1, r20
    1050:	50 93 d2 21 	sts	0x21D2, r21
    1054:	10 92 d4 21 	sts	0x21D4, r1
    1058:	0c c0       	rjmp	.+24     	; 0x1072 <adc_handler+0x96>
    105a:	80 91 d1 21 	lds	r24, 0x21D1
    105e:	90 91 d2 21 	lds	r25, 0x21D2
    1062:	48 0f       	add	r20, r24
    1064:	59 1f       	adc	r21, r25
    1066:	56 95       	lsr	r21
    1068:	47 95       	ror	r20
    106a:	40 93 d1 21 	sts	0x21D1, r20
    106e:	50 93 d2 21 	sts	0x21D2, r21
    1072:	80 91 cd 21 	lds	r24, 0x21CD
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	31 f4       	brne	.+12     	; 0x1086 <adc_handler+0xaa>
    107a:	10 92 cd 21 	sts	0x21CD, r1
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 d4 21 	sts	0x21D4, r24
    1084:	08 95       	ret
    1086:	9f b7       	in	r25, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	e0 e0       	ldi	r30, 0x00	; 0
    108c:	f2 e0       	ldi	r31, 0x02	; 2
    108e:	80 81       	ld	r24, Z
    1090:	88 60       	ori	r24, 0x08	; 8
    1092:	80 83       	st	Z, r24
    1094:	9f bf       	out	0x3f, r25	; 63
    1096:	08 95       	ret

00001098 <ntc_data_is_ready>:
    1098:	9f b7       	in	r25, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	80 91 d4 21 	lds	r24, 0x21D4
    10a0:	88 23       	and	r24, r24
    10a2:	21 f0       	breq	.+8      	; 0x10ac <ntc_data_is_ready+0x14>
    10a4:	10 92 d4 21 	sts	0x21D4, r1
    10a8:	9f bf       	out	0x3f, r25	; 63
    10aa:	08 95       	ret
    10ac:	9f bf       	out	0x3f, r25	; 63
    10ae:	08 95       	ret

000010b0 <lightsensor_data_is_ready>:
    10b0:	9f b7       	in	r25, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	80 91 d3 21 	lds	r24, 0x21D3
    10b8:	88 23       	and	r24, r24
    10ba:	21 f0       	breq	.+8      	; 0x10c4 <lightsensor_data_is_ready+0x14>
    10bc:	10 92 d3 21 	sts	0x21D3, r1
    10c0:	9f bf       	out	0x3f, r25	; 63
    10c2:	08 95       	ret
    10c4:	9f bf       	out	0x3f, r25	; 63
    10c6:	08 95       	ret

000010c8 <adc_sensors_init>:
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2b 97       	sbiw	r28, 0x0b	; 11
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	be 01       	movw	r22, r28
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	ec d5       	rcall	.+3032   	; 0x1cbc <adc_read_configuration>
    10e4:	ae 01       	movw	r20, r28
    10e6:	48 5f       	subi	r20, 0xF8	; 248
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ea:	61 e0       	ldi	r22, 0x01	; 1
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	92 e0       	ldi	r25, 0x02	; 2
    10f0:	41 d6       	rcall	.+3202   	; 0x1d74 <adcch_read_configuration>
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	9f 78       	andi	r25, 0x8F	; 143
    10f8:	90 61       	ori	r25, 0x10	; 16
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	96 e0       	ldi	r25, 0x06	; 6
    10fe:	9d 83       	std	Y+5, r25	; 0x05
    1100:	81 7e       	andi	r24, 0xE1	; 225
    1102:	80 61       	ori	r24, 0x10	; 16
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	1c 82       	std	Y+4, r1	; 0x04
    1108:	be 01       	movw	r22, r28
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	80 d5       	rcall	.+2816   	; 0x1c14 <adc_write_configuration>
    1114:	6e ee       	ldi	r22, 0xEE	; 238
    1116:	77 e0       	ldi	r23, 0x07	; 7
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	92 e0       	ldi	r25, 0x02	; 2
    111c:	7e d3       	rcall	.+1788   	; 0x181a <adc_set_callback>
    111e:	11 e0       	ldi	r17, 0x01	; 1
    1120:	18 87       	std	Y+8, r17	; 0x08
    1122:	19 86       	std	Y+9, r1	; 0x09
    1124:	8a 85       	ldd	r24, Y+10	; 0x0a
    1126:	80 7f       	andi	r24, 0xF0	; 240
    1128:	81 60       	ori	r24, 0x01	; 1
    112a:	8a 87       	std	Y+10, r24	; 0x0a
    112c:	ae 01       	movw	r20, r28
    112e:	48 5f       	subi	r20, 0xF8	; 248
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	e4 d5       	rcall	.+3016   	; 0x1d02 <adcch_write_configuration>
    113a:	18 87       	std	Y+8, r17	; 0x08
    113c:	88 e0       	ldi	r24, 0x08	; 8
    113e:	89 87       	std	Y+9, r24	; 0x09
    1140:	ae 01       	movw	r20, r28
    1142:	48 5f       	subi	r20, 0xF8	; 248
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	62 e0       	ldi	r22, 0x02	; 2
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	92 e0       	ldi	r25, 0x02	; 2
    114c:	da d5       	rcall	.+2996   	; 0x1d02 <adcch_write_configuration>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	92 e0       	ldi	r25, 0x02	; 2
    1152:	b9 d3       	rcall	.+1906   	; 0x18c6 <adc_enable>
    1154:	2b 96       	adiw	r28, 0x0b	; 11
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <ntc_get_temperature>:
 * \note The result is inaccurate for temperatures outside 5-45 degrees.
 *
 * \retval the temperature in Celsius
 */
int8_t ntc_get_temperature(void)
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
	int8_t retval = 0;
	float ntc_sample = ntc_sensor_sample;
    1166:	c0 91 d1 21 	lds	r28, 0x21D1
    116a:	d0 91 d2 21 	lds	r29, 0x21D2
    116e:	be 01       	movw	r22, r28
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <__floatunsisf>
	if (ntc_sensor_sample > 697) {
		retval = (int8_t)((-0.0295 * ntc_sample) + 40.5);
	} if (ntc_sensor_sample > 420) {
    1178:	c5 3a       	cpi	r28, 0xA5	; 165
    117a:	d1 40       	sbci	r29, 0x01	; 1
    117c:	80 f0       	brcs	.+32     	; 0x119e <ntc_get_temperature+0x3c>
		retval = (int8_t)((-0.0474 * ntc_sample) + 53.3);
    117e:	21 e8       	ldi	r18, 0x81	; 129
    1180:	36 e2       	ldi	r19, 0x26	; 38
    1182:	42 e4       	ldi	r20, 0x42	; 66
    1184:	5d eb       	ldi	r21, 0xBD	; 189
    1186:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__mulsf3>
    118a:	23 e3       	ldi	r18, 0x33	; 51
    118c:	33 e3       	ldi	r19, 0x33	; 51
    118e:	45 e5       	ldi	r20, 0x55	; 85
    1190:	52 e4       	ldi	r21, 0x42	; 66
    1192:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__addsf3>
    1196:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__fixsfsi>
    119a:	86 2f       	mov	r24, r22
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <ntc_get_temperature+0x5a>
	} else {
		retval = (int8_t)((-0.0777 * ntc_sample) + 65.1);
    119e:	2d e2       	ldi	r18, 0x2D	; 45
    11a0:	31 e2       	ldi	r19, 0x21	; 33
    11a2:	4f e9       	ldi	r20, 0x9F	; 159
    11a4:	5d eb       	ldi	r21, 0xBD	; 189
    11a6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__mulsf3>
    11aa:	23 e3       	ldi	r18, 0x33	; 51
    11ac:	33 e3       	ldi	r19, 0x33	; 51
    11ae:	42 e8       	ldi	r20, 0x82	; 130
    11b0:	52 e4       	ldi	r21, 0x42	; 66
    11b2:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__addsf3>
    11b6:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__fixsfsi>
    11ba:	86 2f       	mov	r24, r22
	}
	return retval;
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <lightsensor_get_raw_value>:
 * \retval the raw ADC value from the current ntc_sensor_sample
 */
int16_t lightsensor_get_raw_value(void)
{
	return light_sensor_sample;
}
    11c2:	80 91 cf 21 	lds	r24, 0x21CF
    11c6:	90 91 d0 21 	lds	r25, 0x21D0
    11ca:	08 95       	ret

000011cc <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	1f 92       	push	r1
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	80 93 06 06 	sts	0x0606, r24
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	85 33       	cpi	r24, 0x35	; 53
    11f2:	91 05       	cpc	r25, r1
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <st7565r_init+0x22>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    11f6:	88 e0       	ldi	r24, 0x08	; 8
    11f8:	80 93 05 06 	sts	0x0605, r24
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	85 33       	cpi	r24, 0x35	; 53
    1204:	91 05       	cpc	r25, r1
    1206:	e1 f7       	brne	.-8      	; 0x1200 <st7565r_init+0x34>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
    1208:	0f 2e       	mov	r0, r31
    120a:	fb e2       	ldi	r31, 0x2B	; 43
    120c:	bf 2e       	mov	r11, r31
    120e:	f0 2d       	mov	r31, r0
    1210:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
    1212:	80 ea       	ldi	r24, 0xA0	; 160
    1214:	99 e0       	ldi	r25, 0x09	; 9
    1216:	0e 94 bd 11 	call	0x237a	; 0x237a <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
    121a:	c1 2c       	mov	r12, r1
    121c:	d1 2c       	mov	r13, r1
    121e:	76 01       	movw	r14, r12
    1220:	00 e4       	ldi	r16, 0x40	; 64
    1222:	12 e4       	ldi	r17, 0x42	; 66
    1224:	2f e0       	ldi	r18, 0x0F	; 15
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	43 e0       	ldi	r20, 0x03	; 3
    122a:	be 01       	movw	r22, r28
    122c:	6f 5f       	subi	r22, 0xFF	; 255
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	80 ea       	ldi	r24, 0xA0	; 160
    1232:	99 e0       	ldi	r25, 0x09	; 9
    1234:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1238:	00 e6       	ldi	r16, 0x60	; 96
    123a:	16 e0       	ldi	r17, 0x06	; 6
    123c:	ff 24       	eor	r15, r15
    123e:	f3 94       	inc	r15
    1240:	f8 01       	movw	r30, r16
    1242:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1244:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1246:	be 01       	movw	r22, r28
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	80 ea       	ldi	r24, 0xA0	; 160
    124e:	99 e0       	ldi	r25, 0x09	; 9
    1250:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    1254:	f8 01       	movw	r30, r16
    1256:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1258:	e0 ea       	ldi	r30, 0xA0	; 160
    125a:	f9 e0       	ldi	r31, 0x09	; 9
    125c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    125e:	85 ff       	sbrs	r24, 5
    1260:	fd cf       	rjmp	.-6      	; 0x125c <st7565r_init+0x90>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1262:	80 ea       	ldi	r24, 0xA0	; 160
    1264:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1268:	e0 ea       	ldi	r30, 0xA0	; 160
    126a:	f9 e0       	ldi	r31, 0x09	; 9
    126c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    126e:	86 ff       	sbrs	r24, 6
    1270:	fd cf       	rjmp	.-6      	; 0x126c <st7565r_init+0xa0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1272:	e0 ea       	ldi	r30, 0xA0	; 160
    1274:	f9 e0       	ldi	r31, 0x09	; 9
    1276:	80 e4       	ldi	r24, 0x40	; 64
    1278:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    127a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    127c:	be 01       	movw	r22, r28
    127e:	6f 5f       	subi	r22, 0xFF	; 255
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	80 ea       	ldi	r24, 0xA0	; 160
    1284:	99 e0       	ldi	r25, 0x09	; 9
    1286:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    128a:	8b e2       	ldi	r24, 0x2B	; 43
    128c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    128e:	be 01       	movw	r22, r28
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	80 ea       	ldi	r24, 0xA0	; 160
    1296:	99 e0       	ldi	r25, 0x09	; 9
    1298:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12a2:	e0 ea       	ldi	r30, 0xA0	; 160
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12a8:	85 ff       	sbrs	r24, 5
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <st7565r_init+0xda>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12ac:	86 ea       	ldi	r24, 0xA6	; 166
    12ae:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12b2:	e0 ea       	ldi	r30, 0xA0	; 160
    12b4:	f9 e0       	ldi	r31, 0x09	; 9
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12b8:	86 ff       	sbrs	r24, 6
    12ba:	fd cf       	rjmp	.-6      	; 0x12b6 <st7565r_init+0xea>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12bc:	e0 ea       	ldi	r30, 0xA0	; 160
    12be:	f9 e0       	ldi	r31, 0x09	; 9
    12c0:	80 e4       	ldi	r24, 0x40	; 64
    12c2:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12c4:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    12c6:	be 01       	movw	r22, r28
    12c8:	6f 5f       	subi	r22, 0xFF	; 255
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	80 ea       	ldi	r24, 0xA0	; 160
    12ce:	99 e0       	ldi	r25, 0x09	; 9
    12d0:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    12d4:	8b e2       	ldi	r24, 0x2B	; 43
    12d6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    12d8:	be 01       	movw	r22, r28
    12da:	6f 5f       	subi	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	80 ea       	ldi	r24, 0xA0	; 160
    12e0:	99 e0       	ldi	r25, 0x09	; 9
    12e2:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12ec:	e0 ea       	ldi	r30, 0xA0	; 160
    12ee:	f9 e0       	ldi	r31, 0x09	; 9
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12f2:	85 ff       	sbrs	r24, 5
    12f4:	fd cf       	rjmp	.-6      	; 0x12f0 <st7565r_init+0x124>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12f6:	88 ec       	ldi	r24, 0xC8	; 200
    12f8:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12fc:	e0 ea       	ldi	r30, 0xA0	; 160
    12fe:	f9 e0       	ldi	r31, 0x09	; 9
    1300:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1302:	86 ff       	sbrs	r24, 6
    1304:	fd cf       	rjmp	.-6      	; 0x1300 <st7565r_init+0x134>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1306:	e0 ea       	ldi	r30, 0xA0	; 160
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	80 e4       	ldi	r24, 0x40	; 64
    130c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    130e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1310:	be 01       	movw	r22, r28
    1312:	6f 5f       	subi	r22, 0xFF	; 255
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	80 ea       	ldi	r24, 0xA0	; 160
    1318:	99 e0       	ldi	r25, 0x09	; 9
    131a:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    131e:	8b e2       	ldi	r24, 0x2B	; 43
    1320:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1322:	be 01       	movw	r22, r28
    1324:	6f 5f       	subi	r22, 0xFF	; 255
    1326:	7f 4f       	sbci	r23, 0xFF	; 255
    1328:	80 ea       	ldi	r24, 0xA0	; 160
    132a:	99 e0       	ldi	r25, 0x09	; 9
    132c:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1336:	e0 ea       	ldi	r30, 0xA0	; 160
    1338:	f9 e0       	ldi	r31, 0x09	; 9
    133a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    133c:	85 ff       	sbrs	r24, 5
    133e:	fd cf       	rjmp	.-6      	; 0x133a <st7565r_init+0x16e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1340:	82 ea       	ldi	r24, 0xA2	; 162
    1342:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1346:	e0 ea       	ldi	r30, 0xA0	; 160
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    134c:	86 ff       	sbrs	r24, 6
    134e:	fd cf       	rjmp	.-6      	; 0x134a <st7565r_init+0x17e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1350:	e0 ea       	ldi	r30, 0xA0	; 160
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	80 e4       	ldi	r24, 0x40	; 64
    1356:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1358:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    135a:	be 01       	movw	r22, r28
    135c:	6f 5f       	subi	r22, 0xFF	; 255
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	80 ea       	ldi	r24, 0xA0	; 160
    1362:	99 e0       	ldi	r25, 0x09	; 9
    1364:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1368:	8b e2       	ldi	r24, 0x2B	; 43
    136a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    136c:	be 01       	movw	r22, r28
    136e:	6f 5f       	subi	r22, 0xFF	; 255
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	80 ea       	ldi	r24, 0xA0	; 160
    1374:	99 e0       	ldi	r25, 0x09	; 9
    1376:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1380:	e0 ea       	ldi	r30, 0xA0	; 160
    1382:	f9 e0       	ldi	r31, 0x09	; 9
    1384:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1386:	85 ff       	sbrs	r24, 5
    1388:	fd cf       	rjmp	.-6      	; 0x1384 <st7565r_init+0x1b8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    138a:	8f e2       	ldi	r24, 0x2F	; 47
    138c:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1390:	e0 ea       	ldi	r30, 0xA0	; 160
    1392:	f9 e0       	ldi	r31, 0x09	; 9
    1394:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1396:	86 ff       	sbrs	r24, 6
    1398:	fd cf       	rjmp	.-6      	; 0x1394 <st7565r_init+0x1c8>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    139a:	e0 ea       	ldi	r30, 0xA0	; 160
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	80 e4       	ldi	r24, 0x40	; 64
    13a0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13a2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13a4:	be 01       	movw	r22, r28
    13a6:	6f 5f       	subi	r22, 0xFF	; 255
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	80 ea       	ldi	r24, 0xA0	; 160
    13ac:	99 e0       	ldi	r25, 0x09	; 9
    13ae:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    13b2:	8b e2       	ldi	r24, 0x2B	; 43
    13b4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    13b6:	be 01       	movw	r22, r28
    13b8:	6f 5f       	subi	r22, 0xFF	; 255
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	80 ea       	ldi	r24, 0xA0	; 160
    13be:	99 e0       	ldi	r25, 0x09	; 9
    13c0:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13ca:	e0 ea       	ldi	r30, 0xA0	; 160
    13cc:	f9 e0       	ldi	r31, 0x09	; 9
    13ce:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13d0:	85 ff       	sbrs	r24, 5
    13d2:	fd cf       	rjmp	.-6      	; 0x13ce <st7565r_init+0x202>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13d4:	88 ef       	ldi	r24, 0xF8	; 248
    13d6:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13da:	e0 ea       	ldi	r30, 0xA0	; 160
    13dc:	f9 e0       	ldi	r31, 0x09	; 9
    13de:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13e0:	86 ff       	sbrs	r24, 6
    13e2:	fd cf       	rjmp	.-6      	; 0x13de <st7565r_init+0x212>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13e4:	e0 ea       	ldi	r30, 0xA0	; 160
    13e6:	f9 e0       	ldi	r31, 0x09	; 9
    13e8:	80 e4       	ldi	r24, 0x40	; 64
    13ea:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13ec:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13ee:	be 01       	movw	r22, r28
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	80 ea       	ldi	r24, 0xA0	; 160
    13f6:	99 e0       	ldi	r25, 0x09	; 9
    13f8:	0e 94 1c 12 	call	0x2438	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    13fc:	8b e2       	ldi	r24, 0x2B	; 43
    13fe:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1400:	be 01       	movw	r22, r28
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	80 ea       	ldi	r24, 0xA0	; 160
    1408:	99 e0       	ldi	r25, 0x09	; 9
    140a:	0e 94 06 12 	call	0x240c	; 0x240c <usart_spi_select_device>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1414:	e0 ea       	ldi	r30, 0xA0	; 160
    1416:	f9 e0       	ldi	r31, 0x09	; 9
    1418:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    141a:	85 ff       	sbrs	r24, 5
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <st7565r_init+0x24c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    141e:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1422:	e0 ea       	ldi	r30, 0xA0	; 160
    1424:	f9 e0       	ldi	r31, 0x09	; 9
    1426:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1428:	86 ff       	sbrs	r24, 6
    142a:	fd cf       	rjmp	.-6      	; 0x1426 <st7565r_init+0x25a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    142c:	e0 ea       	ldi	r30, 0xA0	; 160
    142e:	f9 e0       	ldi	r31, 0x09	; 9
    1430:	80 e4       	ldi	r24, 0x40	; 64
    1432:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1434:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1436:	be 01       	movw	r22, r28
    1438:	6f 5f       	subi	r22, 0xFF	; 255
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	80 ea       	ldi	r24, 0xA0	; 160
    143e:	99 e0       	ldi	r25, 0x09	; 9
    1440:	fb d7       	rcall	.+4086   	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1442:	8b e2       	ldi	r24, 0x2B	; 43
    1444:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1446:	be 01       	movw	r22, r28
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	80 ea       	ldi	r24, 0xA0	; 160
    144e:	99 e0       	ldi	r25, 0x09	; 9
    1450:	dd d7       	rcall	.+4026   	; 0x240c <usart_spi_select_device>
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1458:	e0 ea       	ldi	r30, 0xA0	; 160
    145a:	f9 e0       	ldi	r31, 0x09	; 9
    145c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    145e:	85 ff       	sbrs	r24, 5
    1460:	fd cf       	rjmp	.-6      	; 0x145c <st7565r_init+0x290>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1462:	81 e2       	ldi	r24, 0x21	; 33
    1464:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1468:	e0 ea       	ldi	r30, 0xA0	; 160
    146a:	f9 e0       	ldi	r31, 0x09	; 9
    146c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    146e:	86 ff       	sbrs	r24, 6
    1470:	fd cf       	rjmp	.-6      	; 0x146c <st7565r_init+0x2a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1472:	e0 ea       	ldi	r30, 0xA0	; 160
    1474:	f9 e0       	ldi	r31, 0x09	; 9
    1476:	80 e4       	ldi	r24, 0x40	; 64
    1478:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    147a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    147c:	be 01       	movw	r22, r28
    147e:	6f 5f       	subi	r22, 0xFF	; 255
    1480:	7f 4f       	sbci	r23, 0xFF	; 255
    1482:	80 ea       	ldi	r24, 0xA0	; 160
    1484:	99 e0       	ldi	r25, 0x09	; 9
    1486:	d8 d7       	rcall	.+4016   	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	80 ea       	ldi	r24, 0xA0	; 160
    1494:	99 e0       	ldi	r25, 0x09	; 9
    1496:	ba d7       	rcall	.+3956   	; 0x240c <usart_spi_select_device>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    149e:	e0 ea       	ldi	r30, 0xA0	; 160
    14a0:	f9 e0       	ldi	r31, 0x09	; 9
    14a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14a4:	85 ff       	sbrs	r24, 5
    14a6:	fd cf       	rjmp	.-6      	; 0x14a2 <st7565r_init+0x2d6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14a8:	81 e8       	ldi	r24, 0x81	; 129
    14aa:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14ae:	e0 ea       	ldi	r30, 0xA0	; 160
    14b0:	f9 e0       	ldi	r31, 0x09	; 9
    14b2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    14b4:	86 ff       	sbrs	r24, 6
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <st7565r_init+0x2e6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    14b8:	e0 ea       	ldi	r30, 0xA0	; 160
    14ba:	f9 e0       	ldi	r31, 0x09	; 9
    14bc:	80 e4       	ldi	r24, 0x40	; 64
    14be:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    14c0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	80 ea       	ldi	r24, 0xA0	; 160
    14ca:	99 e0       	ldi	r25, 0x09	; 9
    14cc:	b5 d7       	rcall	.+3946   	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    14ce:	8b e2       	ldi	r24, 0x2B	; 43
    14d0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    14d2:	be 01       	movw	r22, r28
    14d4:	6f 5f       	subi	r22, 0xFF	; 255
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	80 ea       	ldi	r24, 0xA0	; 160
    14da:	99 e0       	ldi	r25, 0x09	; 9
    14dc:	97 d7       	rcall	.+3886   	; 0x240c <usart_spi_select_device>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    14e4:	e0 ea       	ldi	r30, 0xA0	; 160
    14e6:	f9 e0       	ldi	r31, 0x09	; 9
    14e8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    14ea:	85 ff       	sbrs	r24, 5
    14ec:	fd cf       	rjmp	.-6      	; 0x14e8 <st7565r_init+0x31c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    14ee:	81 e2       	ldi	r24, 0x21	; 33
    14f0:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    14f4:	e0 ea       	ldi	r30, 0xA0	; 160
    14f6:	f9 e0       	ldi	r31, 0x09	; 9
    14f8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    14fa:	86 ff       	sbrs	r24, 6
    14fc:	fd cf       	rjmp	.-6      	; 0x14f8 <st7565r_init+0x32c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    14fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1500:	f9 e0       	ldi	r31, 0x09	; 9
    1502:	80 e4       	ldi	r24, 0x40	; 64
    1504:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1506:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1508:	be 01       	movw	r22, r28
    150a:	6f 5f       	subi	r22, 0xFF	; 255
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	80 ea       	ldi	r24, 0xA0	; 160
    1510:	99 e0       	ldi	r25, 0x09	; 9
    1512:	92 d7       	rcall	.+3876   	; 0x2438 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1514:	8b e2       	ldi	r24, 0x2B	; 43
    1516:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1518:	be 01       	movw	r22, r28
    151a:	6f 5f       	subi	r22, 0xFF	; 255
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	80 ea       	ldi	r24, 0xA0	; 160
    1520:	99 e0       	ldi	r25, 0x09	; 9
    1522:	74 d7       	rcall	.+3816   	; 0x240c <usart_spi_select_device>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    152a:	e0 ea       	ldi	r30, 0xA0	; 160
    152c:	f9 e0       	ldi	r31, 0x09	; 9
    152e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1530:	85 ff       	sbrs	r24, 5
    1532:	fd cf       	rjmp	.-6      	; 0x152e <st7565r_init+0x362>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1534:	8f ea       	ldi	r24, 0xAF	; 175
    1536:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    153a:	e0 ea       	ldi	r30, 0xA0	; 160
    153c:	f9 e0       	ldi	r31, 0x09	; 9
    153e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1540:	86 ff       	sbrs	r24, 6
    1542:	fd cf       	rjmp	.-6      	; 0x153e <st7565r_init+0x372>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1544:	e0 ea       	ldi	r30, 0xA0	; 160
    1546:	f9 e0       	ldi	r31, 0x09	; 9
    1548:	80 e4       	ldi	r24, 0x40	; 64
    154a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    154c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    154e:	be 01       	movw	r22, r28
    1550:	6f 5f       	subi	r22, 0xFF	; 255
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	80 ea       	ldi	r24, 0xA0	; 160
    1556:	99 e0       	ldi	r25, 0x09	; 9
    1558:	6f d7       	rcall	.+3806   	; 0x2438 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    155a:	0f 90       	pop	r0
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	08 95       	ret

00001570 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	1f 92       	push	r1
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	08 2f       	mov	r16, r24
    1582:	f6 2e       	mov	r15, r22
    1584:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
    1586:	73 d7       	rcall	.+3814   	; 0x246e <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    1588:	0f 70       	andi	r16, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    158a:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    158c:	8b e2       	ldi	r24, 0x2B	; 43
    158e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1590:	be 01       	movw	r22, r28
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	80 ea       	ldi	r24, 0xA0	; 160
    1598:	99 e0       	ldi	r25, 0x09	; 9
    159a:	38 d7       	rcall	.+3696   	; 0x240c <usart_spi_select_device>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    15a2:	e0 ea       	ldi	r30, 0xA0	; 160
    15a4:	f9 e0       	ldi	r31, 0x09	; 9
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15a8:	95 ff       	sbrs	r25, 5
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15ac:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15b0:	e0 ea       	ldi	r30, 0xA0	; 160
    15b2:	f9 e0       	ldi	r31, 0x09	; 9
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    15b6:	86 ff       	sbrs	r24, 6
    15b8:	fd cf       	rjmp	.-6      	; 0x15b4 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    15ba:	e0 ea       	ldi	r30, 0xA0	; 160
    15bc:	f9 e0       	ldi	r31, 0x09	; 9
    15be:	80 e4       	ldi	r24, 0x40	; 64
    15c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    15c2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    15c4:	be 01       	movw	r22, r28
    15c6:	6f 5f       	subi	r22, 0xFF	; 255
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	80 ea       	ldi	r24, 0xA0	; 160
    15cc:	99 e0       	ldi	r25, 0x09	; 9
    15ce:	34 d7       	rcall	.+3688   	; 0x2438 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
    15d0:	0f 2d       	mov	r16, r15
    15d2:	0f 77       	andi	r16, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    15d4:	02 95       	swap	r16
    15d6:	0f 70       	andi	r16, 0x0F	; 15
    15d8:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    15da:	8b e2       	ldi	r24, 0x2B	; 43
    15dc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    15de:	be 01       	movw	r22, r28
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	80 ea       	ldi	r24, 0xA0	; 160
    15e6:	99 e0       	ldi	r25, 0x09	; 9
    15e8:	11 d7       	rcall	.+3618   	; 0x240c <usart_spi_select_device>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    15f0:	e0 ea       	ldi	r30, 0xA0	; 160
    15f2:	f9 e0       	ldi	r31, 0x09	; 9
    15f4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    15f6:	85 ff       	sbrs	r24, 5
    15f8:	fd cf       	rjmp	.-6      	; 0x15f4 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    15fa:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    15fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1600:	f9 e0       	ldi	r31, 0x09	; 9
    1602:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1604:	86 ff       	sbrs	r24, 6
    1606:	fd cf       	rjmp	.-6      	; 0x1602 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1608:	e0 ea       	ldi	r30, 0xA0	; 160
    160a:	f9 e0       	ldi	r31, 0x09	; 9
    160c:	80 e4       	ldi	r24, 0x40	; 64
    160e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1610:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1612:	be 01       	movw	r22, r28
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	80 ea       	ldi	r24, 0xA0	; 160
    161a:	99 e0       	ldi	r25, 0x09	; 9
    161c:	0d d7       	rcall	.+3610   	; 0x2438 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    161e:	0f 2d       	mov	r16, r15
    1620:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1622:	8b e2       	ldi	r24, 0x2B	; 43
    1624:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1626:	be 01       	movw	r22, r28
    1628:	6f 5f       	subi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	80 ea       	ldi	r24, 0xA0	; 160
    162e:	99 e0       	ldi	r25, 0x09	; 9
    1630:	ed d6       	rcall	.+3546   	; 0x240c <usart_spi_select_device>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1638:	e0 ea       	ldi	r30, 0xA0	; 160
    163a:	f9 e0       	ldi	r31, 0x09	; 9
    163c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    163e:	85 ff       	sbrs	r24, 5
    1640:	fd cf       	rjmp	.-6      	; 0x163c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1642:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1646:	e0 ea       	ldi	r30, 0xA0	; 160
    1648:	f9 e0       	ldi	r31, 0x09	; 9
    164a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    164c:	86 ff       	sbrs	r24, 6
    164e:	fd cf       	rjmp	.-6      	; 0x164a <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1650:	e0 ea       	ldi	r30, 0xA0	; 160
    1652:	f9 e0       	ldi	r31, 0x09	; 9
    1654:	80 e4       	ldi	r24, 0x40	; 64
    1656:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1658:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    165a:	be 01       	movw	r22, r28
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	80 ea       	ldi	r24, 0xA0	; 160
    1662:	99 e0       	ldi	r25, 0x09	; 9
    1664:	e9 d6       	rcall	.+3538   	; 0x2438 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1666:	8b e2       	ldi	r24, 0x2B	; 43
    1668:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    166a:	be 01       	movw	r22, r28
    166c:	6f 5f       	subi	r22, 0xFF	; 255
    166e:	7f 4f       	sbci	r23, 0xFF	; 255
    1670:	80 ea       	ldi	r24, 0xA0	; 160
    1672:	99 e0       	ldi	r25, 0x09	; 9
    1674:	cb d6       	rcall	.+3478   	; 0x240c <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 65 06 	sts	0x0665, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    167c:	e0 ea       	ldi	r30, 0xA0	; 160
    167e:	f9 e0       	ldi	r31, 0x09	; 9
    1680:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1682:	85 ff       	sbrs	r24, 5
    1684:	fd cf       	rjmp	.-6      	; 0x1680 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1686:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    168a:	e0 ea       	ldi	r30, 0xA0	; 160
    168c:	f9 e0       	ldi	r31, 0x09	; 9
    168e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1690:	86 ff       	sbrs	r24, 6
    1692:	fd cf       	rjmp	.-6      	; 0x168e <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1694:	e0 ea       	ldi	r30, 0xA0	; 160
    1696:	f9 e0       	ldi	r31, 0x09	; 9
    1698:	80 e4       	ldi	r24, 0x40	; 64
    169a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    169c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 66 06 	sts	0x0666, r24
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    16a4:	be 01       	movw	r22, r28
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	80 ea       	ldi	r24, 0xA0	; 160
    16ac:	99 e0       	ldi	r25, 0x09	; 9
    16ae:	c4 d6       	rcall	.+3464   	; 0x2438 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	08 95       	ret

000016be <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	1f 92       	push	r1
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    16cc:	85 ed       	ldi	r24, 0xD5	; 213
    16ce:	91 e2       	ldi	r25, 0x21	; 33
    16d0:	c9 d6       	rcall	.+3474   	; 0x2464 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
    16d2:	7c dd       	rcall	.-1288   	; 0x11cc <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    16d4:	8b e2       	ldi	r24, 0x2B	; 43
    16d6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    16d8:	be 01       	movw	r22, r28
    16da:	6f 5f       	subi	r22, 0xFF	; 255
    16dc:	7f 4f       	sbci	r23, 0xFF	; 255
    16de:	80 ea       	ldi	r24, 0xA0	; 160
    16e0:	99 e0       	ldi	r25, 0x09	; 9
    16e2:	94 d6       	rcall	.+3368   	; 0x240c <usart_spi_select_device>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    16ea:	e0 ea       	ldi	r30, 0xA0	; 160
    16ec:	f9 e0       	ldi	r31, 0x09	; 9
    16ee:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    16f0:	85 ff       	sbrs	r24, 5
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    16f4:	80 e4       	ldi	r24, 0x40	; 64
    16f6:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    16fa:	e0 ea       	ldi	r30, 0xA0	; 160
    16fc:	f9 e0       	ldi	r31, 0x09	; 9
    16fe:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1700:	86 ff       	sbrs	r24, 6
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1704:	e0 ea       	ldi	r30, 0xA0	; 160
    1706:	f9 e0       	ldi	r31, 0x09	; 9
    1708:	80 e4       	ldi	r24, 0x40	; 64
    170a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    170c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    170e:	be 01       	movw	r22, r28
    1710:	6f 5f       	subi	r22, 0xFF	; 255
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	80 ea       	ldi	r24, 0xA0	; 160
    1716:	99 e0       	ldi	r25, 0x09	; 9
    1718:	8f d6       	rcall	.+3358   	; 0x2438 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    171a:	00 e0       	ldi	r16, 0x00	; 0
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	61 2f       	mov	r22, r17
    1722:	80 2f       	mov	r24, r16
    1724:	25 df       	rcall	.-438    	; 0x1570 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	10 38       	cpi	r17, 0x80	; 128
    172a:	c9 f7       	brne	.-14     	; 0x171e <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    172c:	0f 5f       	subi	r16, 0xFF	; 255
    172e:	04 30       	cpi	r16, 0x04	; 4
    1730:	11 f0       	breq	.+4      	; 0x1736 <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	f4 cf       	rjmp	.-24     	; 0x171e <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
    1736:	0f 90       	pop	r0
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
    174c:	88 23       	and	r24, r24
    174e:	8c f1       	brlt	.+98     	; 0x17b2 <gfx_mono_st7565r_draw_pixel+0x70>
    1750:	60 32       	cpi	r22, 0x20	; 32
    1752:	78 f5       	brcc	.+94     	; 0x17b2 <gfx_mono_st7565r_draw_pixel+0x70>
    1754:	d4 2f       	mov	r29, r20
    1756:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
    1758:	f6 2e       	mov	r15, r22
    175a:	f6 94       	lsr	r15
    175c:	f6 94       	lsr	r15
    175e:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
    1760:	2f 2d       	mov	r18, r15
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	31 95       	neg	r19
    1766:	21 95       	neg	r18
    1768:	31 09       	sbc	r19, r1
    176a:	22 0f       	add	r18, r18
    176c:	33 1f       	adc	r19, r19
    176e:	22 0f       	add	r18, r18
    1770:	33 1f       	adc	r19, r19
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	26 0f       	add	r18, r22
    1778:	31 1d       	adc	r19, r1
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8b 01       	movw	r16, r22
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <gfx_mono_st7565r_draw_pixel+0x44>
    1782:	00 0f       	add	r16, r16
    1784:	11 1f       	adc	r17, r17
    1786:	2a 95       	dec	r18
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    178a:	68 2f       	mov	r22, r24
    178c:	8f 2d       	mov	r24, r15
    178e:	7d d6       	rcall	.+3322   	; 0x248a <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
    1790:	d1 30       	cpi	r29, 0x01	; 1
    1792:	21 f0       	breq	.+8      	; 0x179c <gfx_mono_st7565r_draw_pixel+0x5a>
    1794:	28 f0       	brcs	.+10     	; 0x17a0 <gfx_mono_st7565r_draw_pixel+0x5e>
    1796:	d2 30       	cpi	r29, 0x02	; 2
    1798:	39 f0       	breq	.+14     	; 0x17a8 <gfx_mono_st7565r_draw_pixel+0x66>
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <gfx_mono_st7565r_draw_pixel+0x68>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
    179c:	80 2b       	or	r24, r16
		break;
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
    17a0:	60 2f       	mov	r22, r16
    17a2:	60 95       	com	r22
    17a4:	86 23       	and	r24, r22
		break;
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <gfx_mono_st7565r_draw_pixel+0x68>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
    17a8:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
    17aa:	48 2f       	mov	r20, r24
    17ac:	6c 2f       	mov	r22, r28
    17ae:	8f 2d       	mov	r24, r15
    17b0:	df de       	rcall	.-578    	; 0x1570 <gfx_mono_st7565r_put_byte>
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	08 95       	ret

000017be <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
    17be:	65 c6       	rjmp	.+3274   	; 0x248a <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
    17c0:	08 95       	ret

000017c2 <tb_init>:


uint16_t qt_measurement_period_msec = 25;

void tb_init(void) {
	qt_config_data.qt_di				= DEF_QT_DI;
    17c2:	e7 e8       	ldi	r30, 0x87	; 135
    17c4:	f1 e2       	ldi	r31, 0x21	; 33
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	81 83       	std	Z+1, r24	; 0x01
	qt_config_data.qt_neg_drift_rate	= DEF_QT_NEG_DRIFT_RATE;
    17ca:	84 e1       	ldi	r24, 0x14	; 20
    17cc:	84 83       	std	Z+4, r24	; 0x04
	qt_config_data.qt_pos_drift_rate	= DEF_QT_POS_DRIFT_RATE;
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	95 83       	std	Z+5, r25	; 0x05
	qt_config_data.qt_max_on_duration	= DEF_QT_MAX_ON_DURATION;
    17d2:	13 82       	std	Z+3, r1	; 0x03
	qt_config_data.qt_drift_hold_time	= DEF_QT_DRIFT_HOLD_TIME;
    17d4:	82 83       	std	Z+2, r24	; 0x02
	qt_config_data.qt_recal_threshold	= DEF_QT_RECAL_THRESHOLD;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	80 83       	st	Z, r24
	qt_config_data.qt_pos_recal_delay	= DEF_QT_POS_RECAL_DELAY;
    17da:	83 e0       	ldi	r24, 0x03	; 3
    17dc:	86 83       	std	Z+6, r24	; 0x06
	qt_filter_callback					= 0;
    17de:	10 92 a1 21 	sts	0x21A1, r1
    17e2:	10 92 a2 21 	sts	0x21A2, r1


	#ifdef QTOUCH_STUDIO_MASKS
		SNS_array[0][0] = 0x40;
    17e6:	e5 ec       	ldi	r30, 0xC5	; 197
    17e8:	f1 e2       	ldi	r31, 0x21	; 33
    17ea:	80 e4       	ldi	r24, 0x40	; 64
    17ec:	80 83       	st	Z, r24
		SNS_array[0][1] = 0x0;
    17ee:	11 82       	std	Z+1, r1	; 0x01
		SNS_array[1][0] = 0x0;
    17f0:	12 82       	std	Z+2, r1	; 0x02
		SNS_array[1][1] = 0x0;
    17f2:	13 82       	std	Z+3, r1	; 0x03

		SNSK_array[0][0] = 0x80;
    17f4:	e9 ec       	ldi	r30, 0xC9	; 201
    17f6:	f1 e2       	ldi	r31, 0x21	; 33
    17f8:	80 e8       	ldi	r24, 0x80	; 128
    17fa:	80 83       	st	Z, r24
		SNSK_array[0][1] = 0x0;
    17fc:	11 82       	std	Z+1, r1	; 0x01
		SNSK_array[1][0] = 0x0;
    17fe:	12 82       	std	Z+2, r1	; 0x02
		SNSK_array[1][1] = 0x0;
    1800:	13 82       	std	Z+3, r1	; 0x03
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    1802:	23 e0       	ldi	r18, 0x03	; 3
    1804:	4a e0       	ldi	r20, 0x0A	; 10
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <qt_enable_key>

	qt_init_sensing();
    180e:	60 e0       	ldi	r22, 0x00	; 0
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	87 e8       	ldi	r24, 0x87	; 135
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	71 c8       	rjmp	.-3870   	; 0x8fa <qt_init_sensing_with_burst>
    1818:	08 95       	ret

0000181a <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    181a:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    181c:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    181e:	28 2f       	mov	r18, r24
    1820:	39 2f       	mov	r19, r25
    1822:	21 15       	cp	r18, r1
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	38 07       	cpc	r19, r24
    1828:	29 f4       	brne	.+10     	; 0x1834 <adc_set_callback+0x1a>
		adca_callback = callback;
    182a:	60 93 5f 24 	sts	0x245F, r22
    182e:	70 93 60 24 	sts	0x2460, r23
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <adc_set_callback+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1834:	20 34       	cpi	r18, 0x40	; 64
    1836:	32 40       	sbci	r19, 0x02	; 2
    1838:	21 f4       	brne	.+8      	; 0x1842 <adc_set_callback+0x28>
		adcb_callback = callback;
    183a:	60 93 5d 24 	sts	0x245D, r22
    183e:	70 93 5e 24 	sts	0x245E, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1842:	4f bf       	out	0x3f, r20	; 63
    1844:	08 95       	ret

00001846 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1846:	81 15       	cp	r24, r1
    1848:	22 e0       	ldi	r18, 0x02	; 2
    184a:	92 07       	cpc	r25, r18
    184c:	69 f4       	brne	.+26     	; 0x1868 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    184e:	80 91 d6 23 	lds	r24, 0x23D6
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	98 0f       	add	r25, r24
    1856:	90 93 d6 23 	sts	0x23D6, r25
    185a:	81 11       	cpse	r24, r1
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <sysclk_enable_module>
    1866:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1868:	80 34       	cpi	r24, 0x40	; 64
    186a:	92 40       	sbci	r25, 0x02	; 2
    186c:	61 f4       	brne	.+24     	; 0x1886 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    186e:	80 91 d5 23 	lds	r24, 0x23D5
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	98 0f       	add	r25, r24
    1876:	90 93 d5 23 	sts	0x23D5, r25
    187a:	81 11       	cpse	r24, r1
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	0c 94 db 18 	jmp	0x31b6	; 0x31b6 <sysclk_enable_module>
    1886:	08 95       	ret

00001888 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1888:	81 15       	cp	r24, r1
    188a:	22 e0       	ldi	r18, 0x02	; 2
    188c:	92 07       	cpc	r25, r18
    188e:	61 f4       	brne	.+24     	; 0x18a8 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    1890:	80 91 d6 23 	lds	r24, 0x23D6
    1894:	81 50       	subi	r24, 0x01	; 1
    1896:	80 93 d6 23 	sts	0x23D6, r24
    189a:	81 11       	cpse	r24, r1
    189c:	13 c0       	rjmp	.+38     	; 0x18c4 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <sysclk_disable_module>
    18a6:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    18a8:	80 34       	cpi	r24, 0x40	; 64
    18aa:	92 40       	sbci	r25, 0x02	; 2
    18ac:	59 f4       	brne	.+22     	; 0x18c4 <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    18ae:	80 91 d5 23 	lds	r24, 0x23D5
    18b2:	81 50       	subi	r24, 0x01	; 1
    18b4:	80 93 d5 23 	sts	0x23D5, r24
    18b8:	81 11       	cpse	r24, r1
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <sysclk_disable_module>
    18c4:	08 95       	ret

000018c6 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18ce:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    18d0:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    18d2:	b9 df       	rcall	.-142    	; 0x1846 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    18d4:	88 81       	ld	r24, Y
    18d6:	81 60       	ori	r24, 0x01	; 1
    18d8:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18da:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18dc:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    18de:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18e0:	e7 e5       	ldi	r30, 0x57	; 87
    18e2:	f4 e2       	ldi	r31, 0x24	; 36
    18e4:	81 81       	ldd	r24, Z+1	; 0x01
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18ea:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    18f4:	1f 92       	push	r1
    18f6:	0f 92       	push	r0
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	0f 92       	push	r0
    18fc:	11 24       	eor	r1, r1
    18fe:	0b b6       	in	r0, 0x3b	; 59
    1900:	0f 92       	push	r0
    1902:	2f 93       	push	r18
    1904:	3f 93       	push	r19
    1906:	4f 93       	push	r20
    1908:	5f 93       	push	r21
    190a:	6f 93       	push	r22
    190c:	7f 93       	push	r23
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	af 93       	push	r26
    1914:	bf 93       	push	r27
    1916:	ef 93       	push	r30
    1918:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    191a:	40 91 24 02 	lds	r20, 0x0224
    191e:	50 91 25 02 	lds	r21, 0x0225
    1922:	e0 91 5f 24 	lds	r30, 0x245F
    1926:	f0 91 60 24 	lds	r31, 0x2460
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	19 95       	eicall
}
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	bf 91       	pop	r27
    1938:	af 91       	pop	r26
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	7f 91       	pop	r23
    1940:	6f 91       	pop	r22
    1942:	5f 91       	pop	r21
    1944:	4f 91       	pop	r20
    1946:	3f 91       	pop	r19
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	0b be       	out	0x3b, r0	; 59
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	0f 90       	pop	r0
    1954:	1f 90       	pop	r1
    1956:	18 95       	reti

00001958 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1958:	1f 92       	push	r1
    195a:	0f 92       	push	r0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	0f 92       	push	r0
    1960:	11 24       	eor	r1, r1
    1962:	0b b6       	in	r0, 0x3b	; 59
    1964:	0f 92       	push	r0
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    197e:	40 91 2c 02 	lds	r20, 0x022C
    1982:	50 91 2d 02 	lds	r21, 0x022D
    1986:	e0 91 5f 24 	lds	r30, 0x245F
    198a:	f0 91 60 24 	lds	r31, 0x2460
    198e:	62 e0       	ldi	r22, 0x02	; 2
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	19 95       	eicall
}
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0b be       	out	0x3b, r0	; 59
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0b b6       	in	r0, 0x3b	; 59
    19c8:	0f 92       	push	r0
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    19e2:	40 91 34 02 	lds	r20, 0x0234
    19e6:	50 91 35 02 	lds	r21, 0x0235
    19ea:	e0 91 5f 24 	lds	r30, 0x245F
    19ee:	f0 91 60 24 	lds	r31, 0x2460
    19f2:	64 e0       	ldi	r22, 0x04	; 4
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	92 e0       	ldi	r25, 0x02	; 2
    19f8:	19 95       	eicall
}
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	7f 91       	pop	r23
    1a08:	6f 91       	pop	r22
    1a0a:	5f 91       	pop	r21
    1a0c:	4f 91       	pop	r20
    1a0e:	3f 91       	pop	r19
    1a10:	2f 91       	pop	r18
    1a12:	0f 90       	pop	r0
    1a14:	0b be       	out	0x3b, r0	; 59
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1a20:	1f 92       	push	r1
    1a22:	0f 92       	push	r0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	0f 92       	push	r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	0b b6       	in	r0, 0x3b	; 59
    1a2c:	0f 92       	push	r0
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1a46:	40 91 3c 02 	lds	r20, 0x023C
    1a4a:	50 91 3d 02 	lds	r21, 0x023D
    1a4e:	e0 91 5f 24 	lds	r30, 0x245F
    1a52:	f0 91 60 24 	lds	r31, 0x2460
    1a56:	68 e0       	ldi	r22, 0x08	; 8
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	19 95       	eicall
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0b be       	out	0x3b, r0	; 59
    1a7a:	0f 90       	pop	r0
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	0f 90       	pop	r0
    1a80:	1f 90       	pop	r1
    1a82:	18 95       	reti

00001a84 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    1a84:	1f 92       	push	r1
    1a86:	0f 92       	push	r0
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	0f 92       	push	r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	0b b6       	in	r0, 0x3b	; 59
    1a90:	0f 92       	push	r0
    1a92:	2f 93       	push	r18
    1a94:	3f 93       	push	r19
    1a96:	4f 93       	push	r20
    1a98:	5f 93       	push	r21
    1a9a:	6f 93       	push	r22
    1a9c:	7f 93       	push	r23
    1a9e:	8f 93       	push	r24
    1aa0:	9f 93       	push	r25
    1aa2:	af 93       	push	r26
    1aa4:	bf 93       	push	r27
    1aa6:	ef 93       	push	r30
    1aa8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    1aaa:	40 91 64 02 	lds	r20, 0x0264
    1aae:	50 91 65 02 	lds	r21, 0x0265
    1ab2:	e0 91 5d 24 	lds	r30, 0x245D
    1ab6:	f0 91 5e 24 	lds	r31, 0x245E
    1aba:	61 e0       	ldi	r22, 0x01	; 1
    1abc:	80 e4       	ldi	r24, 0x40	; 64
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	19 95       	eicall
}
    1ac2:	ff 91       	pop	r31
    1ac4:	ef 91       	pop	r30
    1ac6:	bf 91       	pop	r27
    1ac8:	af 91       	pop	r26
    1aca:	9f 91       	pop	r25
    1acc:	8f 91       	pop	r24
    1ace:	7f 91       	pop	r23
    1ad0:	6f 91       	pop	r22
    1ad2:	5f 91       	pop	r21
    1ad4:	4f 91       	pop	r20
    1ad6:	3f 91       	pop	r19
    1ad8:	2f 91       	pop	r18
    1ada:	0f 90       	pop	r0
    1adc:	0b be       	out	0x3b, r0	; 59
    1ade:	0f 90       	pop	r0
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	0f 90       	pop	r0
    1ae4:	1f 90       	pop	r1
    1ae6:	18 95       	reti

00001ae8 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	0b b6       	in	r0, 0x3b	; 59
    1af4:	0f 92       	push	r0
    1af6:	2f 93       	push	r18
    1af8:	3f 93       	push	r19
    1afa:	4f 93       	push	r20
    1afc:	5f 93       	push	r21
    1afe:	6f 93       	push	r22
    1b00:	7f 93       	push	r23
    1b02:	8f 93       	push	r24
    1b04:	9f 93       	push	r25
    1b06:	af 93       	push	r26
    1b08:	bf 93       	push	r27
    1b0a:	ef 93       	push	r30
    1b0c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1b0e:	40 91 6c 02 	lds	r20, 0x026C
    1b12:	50 91 6d 02 	lds	r21, 0x026D
    1b16:	e0 91 5d 24 	lds	r30, 0x245D
    1b1a:	f0 91 5e 24 	lds	r31, 0x245E
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	80 e4       	ldi	r24, 0x40	; 64
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	19 95       	eicall
}
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0b be       	out	0x3b, r0	; 59
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	0b b6       	in	r0, 0x3b	; 59
    1b58:	0f 92       	push	r0
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    1b72:	40 91 74 02 	lds	r20, 0x0274
    1b76:	50 91 75 02 	lds	r21, 0x0275
    1b7a:	e0 91 5d 24 	lds	r30, 0x245D
    1b7e:	f0 91 5e 24 	lds	r31, 0x245E
    1b82:	64 e0       	ldi	r22, 0x04	; 4
    1b84:	80 e4       	ldi	r24, 0x40	; 64
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	19 95       	eicall
}
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	0b be       	out	0x3b, r0	; 59
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	0b b6       	in	r0, 0x3b	; 59
    1bbc:	0f 92       	push	r0
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1bd6:	40 91 7c 02 	lds	r20, 0x027C
    1bda:	50 91 7d 02 	lds	r21, 0x027D
    1bde:	e0 91 5d 24 	lds	r30, 0x245D
    1be2:	f0 91 5e 24 	lds	r31, 0x245E
    1be6:	68 e0       	ldi	r22, 0x08	; 8
    1be8:	80 e4       	ldi	r24, 0x40	; 64
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	19 95       	eicall
}
    1bee:	ff 91       	pop	r31
    1bf0:	ef 91       	pop	r30
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	0b be       	out	0x3b, r0	; 59
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1c14:	df 92       	push	r13
    1c16:	ef 92       	push	r14
    1c18:	ff 92       	push	r15
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	ec 01       	movw	r28, r24
    1c24:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1c26:	c1 15       	cp	r28, r1
    1c28:	22 e0       	ldi	r18, 0x02	; 2
    1c2a:	d2 07       	cpc	r29, r18
    1c2c:	81 f4       	brne	.+32     	; 0x1c4e <adc_write_configuration+0x3a>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1c2e:	61 e2       	ldi	r22, 0x21	; 33
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	0e 94 4b 19 	call	0x3296	; 0x3296 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1c38:	e8 2e       	mov	r14, r24
    1c3a:	f1 2c       	mov	r15, r1
    1c3c:	60 e2       	ldi	r22, 0x20	; 32
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	0e 94 4b 19 	call	0x3296	; 0x3296 <nvm_read_byte>
		data <<= 8;
    1c46:	fe 2c       	mov	r15, r14
    1c48:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1c4a:	e8 2a       	or	r14, r24
    1c4c:	12 c0       	rjmp	.+36     	; 0x1c72 <adc_write_configuration+0x5e>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1c4e:	80 34       	cpi	r24, 0x40	; 64
    1c50:	92 40       	sbci	r25, 0x02	; 2
    1c52:	61 f5       	brne	.+88     	; 0x1cac <adc_write_configuration+0x98>
    1c54:	65 e2       	ldi	r22, 0x25	; 37
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	0e 94 4b 19 	call	0x3296	; 0x3296 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    1c5e:	e8 2e       	mov	r14, r24
    1c60:	f1 2c       	mov	r15, r1
    1c62:	64 e2       	ldi	r22, 0x24	; 36
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	0e 94 4b 19 	call	0x3296	; 0x3296 <nvm_read_byte>
		data <<= 8;
    1c6c:	fe 2c       	mov	r15, r14
    1c6e:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    1c70:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1c72:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    1c74:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    1c76:	ce 01       	movw	r24, r28
    1c78:	e6 dd       	rcall	.-1076   	; 0x1846 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1c7a:	88 81       	ld	r24, Y

	adc->CTRLA = ADC_FLUSH_bm;
    1c7c:	92 e0       	ldi	r25, 0x02	; 2
    1c7e:	98 83       	st	Y, r25
	adc->CAL = cal;
    1c80:	ec 86       	std	Y+12, r14	; 0x0c
    1c82:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    1c84:	f8 01       	movw	r30, r16
    1c86:	25 81       	ldd	r18, Z+5	; 0x05
    1c88:	36 81       	ldd	r19, Z+6	; 0x06
    1c8a:	28 8f       	std	Y+24, r18	; 0x18
    1c8c:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    1c8e:	92 81       	ldd	r25, Z+2	; 0x02
    1c90:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    1c92:	94 81       	ldd	r25, Z+4	; 0x04
    1c94:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    1c96:	93 81       	ldd	r25, Z+3	; 0x03
    1c98:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	99 83       	std	Y+1, r25	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    1c9e:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    1ca0:	90 81       	ld	r25, Z
    1ca2:	89 2b       	or	r24, r25
    1ca4:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	ef dd       	rcall	.-1058   	; 0x1888 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1caa:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	08 95       	ret

00001cbc <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	ec 01       	movw	r28, r24
    1cc8:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1cca:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1ccc:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1cce:	bb dd       	rcall	.-1162   	; 0x1846 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1cd0:	88 81       	ld	r24, Y
    1cd2:	80 7c       	andi	r24, 0xC0	; 192
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1cd8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cda:	99 8d       	ldd	r25, Y+25	; 0x19
    1cdc:	85 83       	std	Z+5, r24	; 0x05
    1cde:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	ca dd       	rcall	.-1132   	; 0x1888 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1cf4:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	08 95       	ret

00001d02 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	7c 01       	movw	r14, r24
    1d14:	d6 2e       	mov	r13, r22
    1d16:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1d18:	86 2f       	mov	r24, r22
    1d1a:	83 70       	andi	r24, 0x03	; 3
    1d1c:	29 f4       	brne	.+10     	; 0x1d28 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1d1e:	96 2f       	mov	r25, r22
    1d20:	96 95       	lsr	r25
    1d22:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1d28:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1d2c:	90 ff       	sbrs	r25, 0
		index++;
    1d2e:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1d30:	e7 01       	movw	r28, r14
    1d32:	a0 96       	adiw	r28, 0x20	; 32
    1d34:	98 e0       	ldi	r25, 0x08	; 8
    1d36:	89 9f       	mul	r24, r25
    1d38:	c0 0d       	add	r28, r0
    1d3a:	d1 1d       	adc	r29, r1
    1d3c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1d3e:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1d40:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    1d42:	c7 01       	movw	r24, r14
    1d44:	80 dd       	rcall	.-1280   	; 0x1846 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1d46:	f8 01       	movw	r30, r16
    1d48:	80 81       	ld	r24, Z
    1d4a:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    1d50:	81 81       	ldd	r24, Z+1	; 0x01
    1d52:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1d54:	d0 fe       	sbrs	r13, 0
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1d58:	83 81       	ldd	r24, Z+3	; 0x03
    1d5a:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    1d5c:	c7 01       	movw	r24, r14
    1d5e:	94 dd       	rcall	.-1240   	; 0x1888 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d60:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	08 95       	ret

00001d74 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1d74:	cf 92       	push	r12
    1d76:	df 92       	push	r13
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	7c 01       	movw	r14, r24
    1d86:	d6 2e       	mov	r13, r22
    1d88:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1d8a:	86 2f       	mov	r24, r22
    1d8c:	83 70       	andi	r24, 0x03	; 3
    1d8e:	29 f4       	brne	.+10     	; 0x1d9a <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1d90:	96 2f       	mov	r25, r22
    1d92:	96 95       	lsr	r25
    1d94:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1d9a:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1d9e:	90 ff       	sbrs	r25, 0
		index++;
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1da2:	e7 01       	movw	r28, r14
    1da4:	a0 96       	adiw	r28, 0x20	; 32
    1da6:	98 e0       	ldi	r25, 0x08	; 8
    1da8:	89 9f       	mul	r24, r25
    1daa:	c0 0d       	add	r28, r0
    1dac:	d1 1d       	adc	r29, r1
    1dae:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1db0:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    1db2:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1db4:	c7 01       	movw	r24, r14
    1db6:	47 dd       	rcall	.-1394   	; 0x1846 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1db8:	88 81       	ld	r24, Y
    1dba:	f8 01       	movw	r30, r16
    1dbc:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1dc6:	d0 fe       	sbrs	r13, 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <adcch_read_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1dca:	8e 81       	ldd	r24, Y+6	; 0x06
    1dcc:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1dce:	c7 01       	movw	r24, r14
    1dd0:	5b dd       	rcall	.-1354   	; 0x1888 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1dd2:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	df 90       	pop	r13
    1de2:	cf 90       	pop	r12
    1de4:	08 95       	ret

00001de6 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1dea:	e0 91 d7 23 	lds	r30, 0x23D7
    1dee:	f0 91 d8 23 	lds	r31, 0x23D8
    1df2:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1df4:	83 ff       	sbrs	r24, 3
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1df8:	88 60       	ori	r24, 0x08	; 8
    1dfa:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1e00:	86 ef       	ldi	r24, 0xF6	; 246
    1e02:	80 93 e1 23 	sts	0x23E1, r24
    1e06:	83 c0       	rjmp	.+262    	; 0x1f0e <twim_interrupt_handler+0x128>
    1e08:	98 2f       	mov	r25, r24
    1e0a:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1e0c:	31 f0       	breq	.+12     	; 0x1e1a <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e0e:	83 e0       	ldi	r24, 0x03	; 3
    1e10:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	80 93 e1 23 	sts	0x23E1, r24
    1e18:	7a c0       	rjmp	.+244    	; 0x1f0e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1e1a:	86 ff       	sbrs	r24, 6
    1e1c:	43 c0       	rjmp	.+134    	; 0x1ea4 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1e1e:	c7 ed       	ldi	r28, 0xD7	; 215
    1e20:	d3 e2       	ldi	r29, 0x23	; 35
    1e22:	aa 81       	ldd	r26, Y+2	; 0x02
    1e24:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2a:	14 96       	adiw	r26, 0x04	; 4
    1e2c:	2d 91       	ld	r18, X+
    1e2e:	3c 91       	ld	r19, X
    1e30:	15 97       	sbiw	r26, 0x05	; 5
    1e32:	82 17       	cp	r24, r18
    1e34:	93 07       	cpc	r25, r19
    1e36:	6c f4       	brge	.+26     	; 0x1e52 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1e38:	9c 01       	movw	r18, r24
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	20 93 db 23 	sts	0x23DB, r18
    1e42:	30 93 dc 23 	sts	0x23DC, r19
    1e46:	a8 0f       	add	r26, r24
    1e48:	b9 1f       	adc	r27, r25
    1e4a:	11 96       	adiw	r26, 0x01	; 1
    1e4c:	8c 91       	ld	r24, X
    1e4e:	87 83       	std	Z+7, r24	; 0x07
    1e50:	5e c0       	rjmp	.+188    	; 0x1f0e <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1e52:	80 91 dd 23 	lds	r24, 0x23DD
    1e56:	90 91 de 23 	lds	r25, 0x23DE
    1e5a:	18 96       	adiw	r26, 0x08	; 8
    1e5c:	2d 91       	ld	r18, X+
    1e5e:	3c 91       	ld	r19, X
    1e60:	19 97       	sbiw	r26, 0x09	; 9
    1e62:	82 17       	cp	r24, r18
    1e64:	93 07       	cpc	r25, r19
    1e66:	c8 f4       	brcc	.+50     	; 0x1e9a <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1e68:	20 91 df 23 	lds	r18, 0x23DF
    1e6c:	22 23       	and	r18, r18
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1e70:	86 81       	ldd	r24, Z+6	; 0x06
    1e72:	81 60       	ori	r24, 0x01	; 1
    1e74:	86 83       	std	Z+6, r24	; 0x06
    1e76:	4b c0       	rjmp	.+150    	; 0x1f0e <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1e78:	16 96       	adiw	r26, 0x06	; 6
    1e7a:	2d 91       	ld	r18, X+
    1e7c:	3c 91       	ld	r19, X
    1e7e:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1e80:	ac 01       	movw	r20, r24
    1e82:	4f 5f       	subi	r20, 0xFF	; 255
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255
    1e86:	40 93 dd 23 	sts	0x23DD, r20
    1e8a:	50 93 de 23 	sts	0x23DE, r21
    1e8e:	d9 01       	movw	r26, r18
    1e90:	a8 0f       	add	r26, r24
    1e92:	b9 1f       	adc	r27, r25
    1e94:	8c 91       	ld	r24, X
    1e96:	87 83       	std	Z+7, r24	; 0x07
    1e98:	3a c0       	rjmp	.+116    	; 0x1f0e <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1e9e:	10 92 e1 23 	sts	0x23E1, r1
    1ea2:	35 c0       	rjmp	.+106    	; 0x1f0e <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1ea4:	88 23       	and	r24, r24
    1ea6:	84 f5       	brge	.+96     	; 0x1f08 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1ea8:	a7 ed       	ldi	r26, 0xD7	; 215
    1eaa:	b3 e2       	ldi	r27, 0x23	; 35
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	cd 91       	ld	r28, X+
    1eb0:	dc 91       	ld	r29, X
    1eb2:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	8d 91       	ld	r24, X+
    1eb8:	9c 91       	ld	r25, X
    1eba:	17 97       	sbiw	r26, 0x07	; 7
    1ebc:	28 85       	ldd	r18, Y+8	; 0x08
    1ebe:	39 85       	ldd	r19, Y+9	; 0x09
    1ec0:	82 17       	cp	r24, r18
    1ec2:	93 07       	cpc	r25, r19
    1ec4:	d8 f4       	brcc	.+54     	; 0x1efc <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1ec6:	6e 81       	ldd	r22, Y+6	; 0x06
    1ec8:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1eca:	9c 01       	movw	r18, r24
    1ecc:	2f 5f       	subi	r18, 0xFF	; 255
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	20 93 dd 23 	sts	0x23DD, r18
    1ed4:	30 93 de 23 	sts	0x23DE, r19
    1ed8:	47 81       	ldd	r20, Z+7	; 0x07
    1eda:	db 01       	movw	r26, r22
    1edc:	a8 0f       	add	r26, r24
    1ede:	b9 1f       	adc	r27, r25
    1ee0:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1ee2:	88 85       	ldd	r24, Y+8	; 0x08
    1ee4:	99 85       	ldd	r25, Y+9	; 0x09
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	18 f4       	brcc	.+6      	; 0x1ef2 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	83 83       	std	Z+3, r24	; 0x03
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1ef2:	87 e0       	ldi	r24, 0x07	; 7
    1ef4:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1ef6:	10 92 e1 23 	sts	0x23E1, r1
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1f00:	89 ef       	ldi	r24, 0xF9	; 249
    1f02:	80 93 e1 23 	sts	0x23E1, r24
    1f06:	03 c0       	rjmp	.+6      	; 0x1f0e <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1f08:	8b ef       	ldi	r24, 0xFB	; 251
    1f0a:	80 93 e1 23 	sts	0x23E1, r24
	}
}
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	08 95       	ret

00001f14 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1f14:	1f 92       	push	r1
    1f16:	0f 92       	push	r0
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	0f 92       	push	r0
    1f1c:	11 24       	eor	r1, r1
    1f1e:	0b b6       	in	r0, 0x3b	; 59
    1f20:	0f 92       	push	r0
    1f22:	2f 93       	push	r18
    1f24:	3f 93       	push	r19
    1f26:	4f 93       	push	r20
    1f28:	5f 93       	push	r21
    1f2a:	6f 93       	push	r22
    1f2c:	7f 93       	push	r23
    1f2e:	8f 93       	push	r24
    1f30:	9f 93       	push	r25
    1f32:	af 93       	push	r26
    1f34:	bf 93       	push	r27
    1f36:	ef 93       	push	r30
    1f38:	ff 93       	push	r31
    1f3a:	55 df       	rcall	.-342    	; 0x1de6 <twim_interrupt_handler>
    1f3c:	ff 91       	pop	r31
    1f3e:	ef 91       	pop	r30
    1f40:	bf 91       	pop	r27
    1f42:	af 91       	pop	r26
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	7f 91       	pop	r23
    1f4a:	6f 91       	pop	r22
    1f4c:	5f 91       	pop	r21
    1f4e:	4f 91       	pop	r20
    1f50:	3f 91       	pop	r19
    1f52:	2f 91       	pop	r18
    1f54:	0f 90       	pop	r0
    1f56:	0b be       	out	0x3b, r0	; 59
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	0b b6       	in	r0, 0x3b	; 59
    1f6e:	0f 92       	push	r0
    1f70:	2f 93       	push	r18
    1f72:	3f 93       	push	r19
    1f74:	4f 93       	push	r20
    1f76:	5f 93       	push	r21
    1f78:	6f 93       	push	r22
    1f7a:	7f 93       	push	r23
    1f7c:	8f 93       	push	r24
    1f7e:	9f 93       	push	r25
    1f80:	af 93       	push	r26
    1f82:	bf 93       	push	r27
    1f84:	ef 93       	push	r30
    1f86:	ff 93       	push	r31
    1f88:	2e df       	rcall	.-420    	; 0x1de6 <twim_interrupt_handler>
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	7f 91       	pop	r23
    1f98:	6f 91       	pop	r22
    1f9a:	5f 91       	pop	r21
    1f9c:	4f 91       	pop	r20
    1f9e:	3f 91       	pop	r19
    1fa0:	2f 91       	pop	r18
    1fa2:	0f 90       	pop	r0
    1fa4:	0b be       	out	0x3b, r0	; 59
    1fa6:	0f 90       	pop	r0
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	0f 90       	pop	r0
    1fac:	1f 90       	pop	r1
    1fae:	18 95       	reti

00001fb0 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1fc2:	d9 01       	movw	r26, r18
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	b6 95       	lsr	r27
    1fc8:	a7 95       	ror	r26
    1fca:	97 95       	ror	r25
    1fcc:	87 95       	ror	r24
    1fce:	48 17       	cp	r20, r24
    1fd0:	59 07       	cpc	r21, r25
    1fd2:	6a 07       	cpc	r22, r26
    1fd4:	7b 07       	cpc	r23, r27
    1fd6:	78 f4       	brcc	.+30     	; 0x1ff6 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1fd8:	6a 01       	movw	r12, r20
    1fda:	7b 01       	movw	r14, r22
    1fdc:	cc 0c       	add	r12, r12
    1fde:	dd 1c       	adc	r13, r13
    1fe0:	ee 1c       	adc	r14, r14
    1fe2:	ff 1c       	adc	r15, r15
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	b8 01       	movw	r22, r16
    1fe8:	a7 01       	movw	r20, r14
    1fea:	96 01       	movw	r18, r12
    1fec:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <__udivmodsi4>
    1ff0:	21 50       	subi	r18, 0x01	; 1
    1ff2:	31 09       	sbc	r19, r1
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1ffa:	83 2f       	mov	r24, r19
    1ffc:	8f 70       	andi	r24, 0x0F	; 15
    1ffe:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    2000:	2e 83       	std	Y+6, r18	; 0x06
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	08 95       	ret

00002014 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	ec 01       	movw	r28, r24
    2022:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	09 f4       	brne	.+2      	; 0x202a <usart_init_spi+0x16>
    2028:	91 c1       	rjmp	.+802    	; 0x234c <usart_init_spi+0x338>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    202a:	80 3c       	cpi	r24, 0xC0	; 192
    202c:	91 05       	cpc	r25, r1
    202e:	29 f4       	brne	.+10     	; 0x203a <usart_init_spi+0x26>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2030:	60 e1       	ldi	r22, 0x10	; 16
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2038:	89 c1       	rjmp	.+786    	; 0x234c <usart_init_spi+0x338>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    203a:	80 38       	cpi	r24, 0x80	; 128
    203c:	91 40       	sbci	r25, 0x01	; 1
    203e:	29 f4       	brne	.+10     	; 0x204a <usart_init_spi+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2040:	62 e0       	ldi	r22, 0x02	; 2
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2048:	81 c1       	rjmp	.+770    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    204a:	c1 15       	cp	r28, r1
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	d8 07       	cpc	r29, r24
    2050:	29 f4       	brne	.+10     	; 0x205c <usart_init_spi+0x48>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    205a:	78 c1       	rjmp	.+752    	; 0x234c <usart_init_spi+0x338>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    205c:	c0 38       	cpi	r28, 0x80	; 128
    205e:	e3 e0       	ldi	r30, 0x03	; 3
    2060:	de 07       	cpc	r29, r30
    2062:	29 f4       	brne	.+10     	; 0x206e <usart_init_spi+0x5a>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    206c:	6f c1       	rjmp	.+734    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    206e:	c0 39       	cpi	r28, 0x90	; 144
    2070:	f3 e0       	ldi	r31, 0x03	; 3
    2072:	df 07       	cpc	r29, r31
    2074:	29 f4       	brne	.+10     	; 0x2080 <usart_init_spi+0x6c>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2076:	61 e0       	ldi	r22, 0x01	; 1
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    207e:	66 c1       	rjmp	.+716    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2080:	c1 15       	cp	r28, r1
    2082:	32 e0       	ldi	r19, 0x02	; 2
    2084:	d3 07       	cpc	r29, r19
    2086:	29 f4       	brne	.+10     	; 0x2092 <usart_init_spi+0x7e>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2090:	5d c1       	rjmp	.+698    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2092:	c0 34       	cpi	r28, 0x40	; 64
    2094:	82 e0       	ldi	r24, 0x02	; 2
    2096:	d8 07       	cpc	r29, r24
    2098:	29 f4       	brne	.+10     	; 0x20a4 <usart_init_spi+0x90>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    209a:	62 e0       	ldi	r22, 0x02	; 2
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20a2:	54 c1       	rjmp	.+680    	; 0x234c <usart_init_spi+0x338>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    20a4:	c0 32       	cpi	r28, 0x20	; 32
    20a6:	e3 e0       	ldi	r30, 0x03	; 3
    20a8:	de 07       	cpc	r29, r30
    20aa:	29 f4       	brne	.+10     	; 0x20b6 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    20ac:	64 e0       	ldi	r22, 0x04	; 4
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20b4:	4b c1       	rjmp	.+662    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    20b6:	c1 15       	cp	r28, r1
    20b8:	f8 e0       	ldi	r31, 0x08	; 8
    20ba:	df 07       	cpc	r29, r31
    20bc:	29 f4       	brne	.+10     	; 0x20c8 <usart_init_spi+0xb4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20c6:	42 c1       	rjmp	.+644    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    20c8:	c1 15       	cp	r28, r1
    20ca:	39 e0       	ldi	r19, 0x09	; 9
    20cc:	d3 07       	cpc	r29, r19
    20ce:	29 f4       	brne	.+10     	; 0x20da <usart_init_spi+0xc6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	84 e0       	ldi	r24, 0x04	; 4
    20d4:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20d8:	39 c1       	rjmp	.+626    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    20da:	c1 15       	cp	r28, r1
    20dc:	8a e0       	ldi	r24, 0x0A	; 10
    20de:	d8 07       	cpc	r29, r24
    20e0:	29 f4       	brne	.+10     	; 0x20ec <usart_init_spi+0xd8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	85 e0       	ldi	r24, 0x05	; 5
    20e6:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20ea:	30 c1       	rjmp	.+608    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    20ec:	c1 15       	cp	r28, r1
    20ee:	eb e0       	ldi	r30, 0x0B	; 11
    20f0:	de 07       	cpc	r29, r30
    20f2:	29 f4       	brne	.+10     	; 0x20fe <usart_init_spi+0xea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	86 e0       	ldi	r24, 0x06	; 6
    20f8:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    20fc:	27 c1       	rjmp	.+590    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    20fe:	c0 34       	cpi	r28, 0x40	; 64
    2100:	f8 e0       	ldi	r31, 0x08	; 8
    2102:	df 07       	cpc	r29, r31
    2104:	29 f4       	brne	.+10     	; 0x2110 <usart_init_spi+0xfc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    210e:	1e c1       	rjmp	.+572    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2110:	c0 34       	cpi	r28, 0x40	; 64
    2112:	39 e0       	ldi	r19, 0x09	; 9
    2114:	d3 07       	cpc	r29, r19
    2116:	29 f4       	brne	.+10     	; 0x2122 <usart_init_spi+0x10e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2118:	62 e0       	ldi	r22, 0x02	; 2
    211a:	84 e0       	ldi	r24, 0x04	; 4
    211c:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2120:	15 c1       	rjmp	.+554    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2122:	c0 34       	cpi	r28, 0x40	; 64
    2124:	8a e0       	ldi	r24, 0x0A	; 10
    2126:	d8 07       	cpc	r29, r24
    2128:	29 f4       	brne	.+10     	; 0x2134 <usart_init_spi+0x120>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	85 e0       	ldi	r24, 0x05	; 5
    212e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2132:	0c c1       	rjmp	.+536    	; 0x234c <usart_init_spi+0x338>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2134:	c0 39       	cpi	r28, 0x90	; 144
    2136:	e8 e0       	ldi	r30, 0x08	; 8
    2138:	de 07       	cpc	r29, r30
    213a:	29 f4       	brne	.+10     	; 0x2146 <usart_init_spi+0x132>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    213c:	64 e0       	ldi	r22, 0x04	; 4
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2144:	03 c1       	rjmp	.+518    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2146:	c0 39       	cpi	r28, 0x90	; 144
    2148:	f9 e0       	ldi	r31, 0x09	; 9
    214a:	df 07       	cpc	r29, r31
    214c:	29 f4       	brne	.+10     	; 0x2158 <usart_init_spi+0x144>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    214e:	64 e0       	ldi	r22, 0x04	; 4
    2150:	84 e0       	ldi	r24, 0x04	; 4
    2152:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2156:	fa c0       	rjmp	.+500    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2158:	c0 39       	cpi	r28, 0x90	; 144
    215a:	3a e0       	ldi	r19, 0x0A	; 10
    215c:	d3 07       	cpc	r29, r19
    215e:	29 f4       	brne	.+10     	; 0x216a <usart_init_spi+0x156>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2160:	64 e0       	ldi	r22, 0x04	; 4
    2162:	85 e0       	ldi	r24, 0x05	; 5
    2164:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    2168:	f1 c0       	rjmp	.+482    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    216a:	c0 39       	cpi	r28, 0x90	; 144
    216c:	8b e0       	ldi	r24, 0x0B	; 11
    216e:	d8 07       	cpc	r29, r24
    2170:	29 f4       	brne	.+10     	; 0x217c <usart_init_spi+0x168>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2172:	64 e0       	ldi	r22, 0x04	; 4
    2174:	86 e0       	ldi	r24, 0x06	; 6
    2176:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    217a:	e8 c0       	rjmp	.+464    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    217c:	c0 3c       	cpi	r28, 0xC0	; 192
    217e:	e8 e0       	ldi	r30, 0x08	; 8
    2180:	de 07       	cpc	r29, r30
    2182:	29 f4       	brne	.+10     	; 0x218e <usart_init_spi+0x17a>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2184:	68 e0       	ldi	r22, 0x08	; 8
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    218c:	df c0       	rjmp	.+446    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    218e:	c0 3c       	cpi	r28, 0xC0	; 192
    2190:	f9 e0       	ldi	r31, 0x09	; 9
    2192:	df 07       	cpc	r29, r31
    2194:	29 f4       	brne	.+10     	; 0x21a0 <usart_init_spi+0x18c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2196:	68 e0       	ldi	r22, 0x08	; 8
    2198:	84 e0       	ldi	r24, 0x04	; 4
    219a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
    219e:	d6 c0       	rjmp	.+428    	; 0x234c <usart_init_spi+0x338>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    21a0:	c0 3a       	cpi	r28, 0xA0	; 160
    21a2:	38 e0       	ldi	r19, 0x08	; 8
    21a4:	d3 07       	cpc	r29, r19
    21a6:	69 f4       	brne	.+26     	; 0x21c2 <usart_init_spi+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    21a8:	60 e1       	ldi	r22, 0x10	; 16
    21aa:	83 e0       	ldi	r24, 0x03	; 3
    21ac:	0e 94 db 18 	call	0x31b6	; 0x31b6 <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    21b0:	e0 ea       	ldi	r30, 0xA0	; 160
    21b2:	f8 e0       	ldi	r31, 0x08	; 8
    21b4:	84 81       	ldd	r24, Z+4	; 0x04
    21b6:	8f 7e       	andi	r24, 0xEF	; 239
    21b8:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    21ba:	f7 01       	movw	r30, r14
    21bc:	24 81       	ldd	r18, Z+4	; 0x04
    21be:	22 50       	subi	r18, 0x02	; 2
    21c0:	43 c0       	rjmp	.+134    	; 0x2248 <usart_init_spi+0x234>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    21c2:	c0 3a       	cpi	r28, 0xA0	; 160
    21c4:	f9 e0       	ldi	r31, 0x09	; 9
    21c6:	df 07       	cpc	r29, r31
    21c8:	21 f4       	brne	.+8      	; 0x21d2 <usart_init_spi+0x1be>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    21ca:	60 e1       	ldi	r22, 0x10	; 16
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	f3 d7       	rcall	.+4070   	; 0x31b6 <sysclk_enable_module>
    21d0:	bd c0       	rjmp	.+378    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    21d2:	c0 3a       	cpi	r28, 0xA0	; 160
    21d4:	3a e0       	ldi	r19, 0x0A	; 10
    21d6:	d3 07       	cpc	r29, r19
    21d8:	21 f4       	brne	.+8      	; 0x21e2 <usart_init_spi+0x1ce>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	85 e0       	ldi	r24, 0x05	; 5
    21de:	eb d7       	rcall	.+4054   	; 0x31b6 <sysclk_enable_module>
    21e0:	b5 c0       	rjmp	.+362    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    21e2:	c0 3a       	cpi	r28, 0xA0	; 160
    21e4:	8b e0       	ldi	r24, 0x0B	; 11
    21e6:	d8 07       	cpc	r29, r24
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <usart_init_spi+0x1de>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    21ea:	60 e1       	ldi	r22, 0x10	; 16
    21ec:	86 e0       	ldi	r24, 0x06	; 6
    21ee:	e3 d7       	rcall	.+4038   	; 0x31b6 <sysclk_enable_module>
    21f0:	ad c0       	rjmp	.+346    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    21f2:	c0 3b       	cpi	r28, 0xB0	; 176
    21f4:	e8 e0       	ldi	r30, 0x08	; 8
    21f6:	de 07       	cpc	r29, r30
    21f8:	21 f4       	brne	.+8      	; 0x2202 <usart_init_spi+0x1ee>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    21fa:	60 e2       	ldi	r22, 0x20	; 32
    21fc:	83 e0       	ldi	r24, 0x03	; 3
    21fe:	db d7       	rcall	.+4022   	; 0x31b6 <sysclk_enable_module>
    2200:	a5 c0       	rjmp	.+330    	; 0x234c <usart_init_spi+0x338>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2202:	c0 3b       	cpi	r28, 0xB0	; 176
    2204:	f9 e0       	ldi	r31, 0x09	; 9
    2206:	df 07       	cpc	r29, r31
    2208:	21 f4       	brne	.+8      	; 0x2212 <usart_init_spi+0x1fe>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    220a:	60 e2       	ldi	r22, 0x20	; 32
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	d3 d7       	rcall	.+4006   	; 0x31b6 <sysclk_enable_module>
    2210:	9d c0       	rjmp	.+314    	; 0x234c <usart_init_spi+0x338>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2212:	c0 38       	cpi	r28, 0x80	; 128
    2214:	34 e0       	ldi	r19, 0x04	; 4
    2216:	d3 07       	cpc	r29, r19
    2218:	21 f4       	brne	.+8      	; 0x2222 <usart_init_spi+0x20e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    221a:	60 e4       	ldi	r22, 0x40	; 64
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	cb d7       	rcall	.+3990   	; 0x31b6 <sysclk_enable_module>
    2220:	95 c0       	rjmp	.+298    	; 0x234c <usart_init_spi+0x338>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2222:	c0 3a       	cpi	r28, 0xA0	; 160
    2224:	84 e0       	ldi	r24, 0x04	; 4
    2226:	d8 07       	cpc	r29, r24
    2228:	21 f4       	brne	.+8      	; 0x2232 <usart_init_spi+0x21e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    222a:	60 e4       	ldi	r22, 0x40	; 64
    222c:	85 e0       	ldi	r24, 0x05	; 5
    222e:	c3 d7       	rcall	.+3974   	; 0x31b6 <sysclk_enable_module>
    2230:	8d c0       	rjmp	.+282    	; 0x234c <usart_init_spi+0x338>
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	8f 7e       	andi	r24, 0xEF	; 239
    2236:	8c 83       	std	Y+4, r24	; 0x04
    2238:	fb 01       	movw	r30, r22
    223a:	24 81       	ldd	r18, Z+4	; 0x04
    223c:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    223e:	ce 01       	movw	r24, r28
    2240:	c0 3a       	cpi	r28, 0xA0	; 160
    2242:	f8 e0       	ldi	r31, 0x08	; 8
    2244:	df 07       	cpc	r29, r31
    2246:	31 f4       	brne	.+12     	; 0x2254 <usart_init_spi+0x240>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    2248:	80 91 4e 06 	lds	r24, 0x064E
    224c:	84 fd       	sbrc	r24, 4
    224e:	86 c0       	rjmp	.+268    	; 0x235c <usart_init_spi+0x348>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    2250:	11 e1       	ldi	r17, 0x11	; 17
    2252:	85 c0       	rjmp	.+266    	; 0x235e <usart_init_spi+0x34a>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    2254:	80 3b       	cpi	r24, 0xB0	; 176
    2256:	38 e0       	ldi	r19, 0x08	; 8
    2258:	93 07       	cpc	r25, r19
    225a:	79 f0       	breq	.+30     	; 0x227a <usart_init_spi+0x266>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    225c:	80 3a       	cpi	r24, 0xA0	; 160
    225e:	e9 e0       	ldi	r30, 0x09	; 9
    2260:	9e 07       	cpc	r25, r30
    2262:	31 f4       	brne	.+12     	; 0x2270 <usart_init_spi+0x25c>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    2264:	30 91 6e 06 	lds	r19, 0x066E
    2268:	34 fd       	sbrc	r19, 4
    226a:	7c c0       	rjmp	.+248    	; 0x2364 <usart_init_spi+0x350>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    226c:	19 e1       	ldi	r17, 0x19	; 25
    226e:	10 c0       	rjmp	.+32     	; 0x2290 <usart_init_spi+0x27c>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    2270:	80 3b       	cpi	r24, 0xB0	; 176
    2272:	f9 e0       	ldi	r31, 0x09	; 9
    2274:	9f 07       	cpc	r25, r31
    2276:	a9 f0       	breq	.+42     	; 0x22a2 <usart_init_spi+0x28e>
    2278:	01 c0       	rjmp	.+2      	; 0x227c <usart_init_spi+0x268>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    227a:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    227c:	80 3a       	cpi	r24, 0xA0	; 160
    227e:	3a e0       	ldi	r19, 0x0A	; 10
    2280:	93 07       	cpc	r25, r19
    2282:	31 f4       	brne	.+12     	; 0x2290 <usart_init_spi+0x27c>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    2284:	80 91 8e 06 	lds	r24, 0x068E
    2288:	84 fd       	sbrc	r24, 4
    228a:	6e c0       	rjmp	.+220    	; 0x2368 <usart_init_spi+0x354>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    228c:	11 e2       	ldi	r17, 0x21	; 33
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <usart_init_spi+0x294>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    2290:	80 3a       	cpi	r24, 0xA0	; 160
    2292:	9b 40       	sbci	r25, 0x0B	; 11
    2294:	49 f4       	brne	.+18     	; 0x22a8 <usart_init_spi+0x294>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    2296:	80 91 ae 06 	lds	r24, 0x06AE
    229a:	84 fd       	sbrc	r24, 4
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <usart_init_spi+0x292>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    229e:	19 e2       	ldi	r17, 0x29	; 41
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <usart_init_spi+0x294>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    22a2:	1d e1       	ldi	r17, 0x1D	; 29
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <usart_init_spi+0x294>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    22a6:	1d e2       	ldi	r17, 0x2D	; 45
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    22a8:	e1 2f       	mov	r30, r17
    22aa:	e6 95       	lsr	r30
    22ac:	e6 95       	lsr	r30
    22ae:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    22b0:	30 e2       	ldi	r19, 0x20	; 32
    22b2:	e3 9f       	mul	r30, r19
    22b4:	f0 01       	movw	r30, r0
    22b6:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    22b8:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    22ba:	17 70       	andi	r17, 0x07	; 7
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	01 2e       	mov	r0, r17
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <usart_init_spi+0x2b4>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <usart_init_spi+0x2b0>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    22cc:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    22ce:	22 30       	cpi	r18, 0x02	; 2
    22d0:	10 f0       	brcs	.+4      	; 0x22d6 <usart_init_spi+0x2c2>
    22d2:	40 e0       	ldi	r20, 0x00	; 0
    22d4:	01 c0       	rjmp	.+2      	; 0x22d8 <usart_init_spi+0x2c4>
    22d6:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    22d8:	df 01       	movw	r26, r30
    22da:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    22dc:	a1 0f       	add	r26, r17
    22de:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    22e0:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    22e2:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    22e4:	2c 91       	ld	r18, X
    22e6:	27 70       	andi	r18, 0x07	; 7
    22e8:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    22ea:	9c 91       	ld	r25, X
    22ec:	94 2b       	or	r25, r20
    22ee:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    22f0:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    22f2:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	80 6c       	ori	r24, 0xC0	; 192
    22f8:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    22fa:	f7 01       	movw	r30, r14
    22fc:	84 81       	ldd	r24, Z+4	; 0x04
    22fe:	8d 7f       	andi	r24, 0xFD	; 253
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	21 f4       	brne	.+8      	; 0x230c <usart_init_spi+0x2f8>
		usart->CTRLC |= USART_UCPHA_bm;
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	82 60       	ori	r24, 0x02	; 2
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	03 c0       	rjmp	.+6      	; 0x2312 <usart_init_spi+0x2fe>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	8d 7f       	andi	r24, 0xFD	; 253
    2310:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    2312:	f7 01       	movw	r30, r14
    2314:	85 81       	ldd	r24, Z+5	; 0x05
    2316:	88 23       	and	r24, r24
    2318:	21 f0       	breq	.+8      	; 0x2322 <usart_init_spi+0x30e>
		(usart)->CTRLC |= USART_DORD_bm;
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	84 60       	ori	r24, 0x04	; 4
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <usart_init_spi+0x314>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	8b 7f       	andi	r24, 0xFB	; 251
    2326:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    2328:	f7 01       	movw	r30, r14
    232a:	40 81       	ld	r20, Z
    232c:	51 81       	ldd	r21, Z+1	; 0x01
    232e:	62 81       	ldd	r22, Z+2	; 0x02
    2330:	73 81       	ldd	r23, Z+3	; 0x03
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	18 e4       	ldi	r17, 0x48	; 72
    2336:	28 ee       	ldi	r18, 0xE8	; 232
    2338:	31 e0       	ldi	r19, 0x01	; 1
    233a:	ce 01       	movw	r24, r28
    233c:	39 de       	rcall	.-910    	; 0x1fb0 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	88 60       	ori	r24, 0x08	; 8
    2342:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    2344:	8c 81       	ldd	r24, Y+4	; 0x04
    2346:	80 61       	ori	r24, 0x10	; 16
    2348:	8c 83       	std	Y+4, r24	; 0x04
    234a:	10 c0       	rjmp	.+32     	; 0x236c <usart_init_spi+0x358>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	8f 7e       	andi	r24, 0xEF	; 239
    2350:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    2352:	f7 01       	movw	r30, r14
    2354:	24 81       	ldd	r18, Z+4	; 0x04
    2356:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    2358:	ce 01       	movw	r24, r28
    235a:	7c cf       	rjmp	.-264    	; 0x2254 <usart_init_spi+0x240>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    235c:	15 e1       	ldi	r17, 0x15	; 21
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    235e:	80 ea       	ldi	r24, 0xA0	; 160
    2360:	98 e0       	ldi	r25, 0x08	; 8
    2362:	86 cf       	rjmp	.-244    	; 0x2270 <usart_init_spi+0x25c>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    2364:	1d e1       	ldi	r17, 0x1D	; 29
    2366:	94 cf       	rjmp	.-216    	; 0x2290 <usart_init_spi+0x27c>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    2368:	15 e2       	ldi	r17, 0x25	; 37
    236a:	9e cf       	rjmp	.-196    	; 0x22a8 <usart_init_spi+0x294>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	08 95       	ret

0000237a <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    237a:	80 3a       	cpi	r24, 0xA0	; 160
    237c:	28 e0       	ldi	r18, 0x08	; 8
    237e:	92 07       	cpc	r25, r18
    2380:	21 f4       	brne	.+8      	; 0x238a <usart_spi_init+0x10>
    2382:	60 e1       	ldi	r22, 0x10	; 16
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	17 c7       	rjmp	.+3630   	; 0x31b6 <sysclk_enable_module>
    2388:	08 95       	ret
    238a:	80 3b       	cpi	r24, 0xB0	; 176
    238c:	28 e0       	ldi	r18, 0x08	; 8
    238e:	92 07       	cpc	r25, r18
    2390:	21 f4       	brne	.+8      	; 0x239a <usart_spi_init+0x20>
    2392:	60 e2       	ldi	r22, 0x20	; 32
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	0f c7       	rjmp	.+3614   	; 0x31b6 <sysclk_enable_module>
    2398:	08 95       	ret
    239a:	80 3a       	cpi	r24, 0xA0	; 160
    239c:	29 e0       	ldi	r18, 0x09	; 9
    239e:	92 07       	cpc	r25, r18
    23a0:	21 f4       	brne	.+8      	; 0x23aa <usart_spi_init+0x30>
    23a2:	60 e1       	ldi	r22, 0x10	; 16
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	07 c7       	rjmp	.+3598   	; 0x31b6 <sysclk_enable_module>
    23a8:	08 95       	ret
    23aa:	80 3b       	cpi	r24, 0xB0	; 176
    23ac:	29 e0       	ldi	r18, 0x09	; 9
    23ae:	92 07       	cpc	r25, r18
    23b0:	21 f4       	brne	.+8      	; 0x23ba <usart_spi_init+0x40>
    23b2:	60 e2       	ldi	r22, 0x20	; 32
    23b4:	84 e0       	ldi	r24, 0x04	; 4
    23b6:	ff c6       	rjmp	.+3582   	; 0x31b6 <sysclk_enable_module>
    23b8:	08 95       	ret
    23ba:	80 3a       	cpi	r24, 0xA0	; 160
    23bc:	2a e0       	ldi	r18, 0x0A	; 10
    23be:	92 07       	cpc	r25, r18
    23c0:	21 f4       	brne	.+8      	; 0x23ca <usart_spi_init+0x50>
    23c2:	60 e1       	ldi	r22, 0x10	; 16
    23c4:	85 e0       	ldi	r24, 0x05	; 5
    23c6:	f7 c6       	rjmp	.+3566   	; 0x31b6 <sysclk_enable_module>
    23c8:	08 95       	ret
    23ca:	80 3a       	cpi	r24, 0xA0	; 160
    23cc:	9b 40       	sbci	r25, 0x0B	; 11
    23ce:	19 f4       	brne	.+6      	; 0x23d6 <usart_spi_init+0x5c>
    23d0:	60 e1       	ldi	r22, 0x10	; 16
    23d2:	86 e0       	ldi	r24, 0x06	; 6
    23d4:	f0 c6       	rjmp	.+3552   	; 0x31b6 <sysclk_enable_module>
    23d6:	08 95       	ret

000023d8 <usart_spi_setup_device>:
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <usart_spi_setup_device+0xa>
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <usart_spi_setup_device+0xc>
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	09 83       	std	Y+1, r16	; 0x01
    23ea:	1a 83       	std	Y+2, r17	; 0x02
    23ec:	2b 83       	std	Y+3, r18	; 0x03
    23ee:	3c 83       	std	Y+4, r19	; 0x04
    23f0:	4d 83       	std	Y+5, r20	; 0x05
    23f2:	1e 82       	std	Y+6, r1	; 0x06
    23f4:	be 01       	movw	r22, r28
    23f6:	6f 5f       	subi	r22, 0xFF	; 255
    23f8:	7f 4f       	sbci	r23, 0xFF	; 255
    23fa:	0c de       	rcall	.-1000   	; 0x2014 <usart_init_spi>
    23fc:	26 96       	adiw	r28, 0x06	; 6
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    240c:	fb 01       	movw	r30, r22
    240e:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    2410:	e8 2f       	mov	r30, r24
    2412:	e6 95       	lsr	r30
    2414:	e6 95       	lsr	r30
    2416:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	e4 9f       	mul	r30, r20
    241c:	f0 01       	movw	r30, r0
    241e:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    2420:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2422:	87 70       	andi	r24, 0x07	; 7
    2424:	21 e0       	ldi	r18, 0x01	; 1
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	a9 01       	movw	r20, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <usart_spi_select_device+0x24>
    242c:	44 0f       	add	r20, r20
    242e:	55 1f       	adc	r21, r21
    2430:	8a 95       	dec	r24
    2432:	e2 f7       	brpl	.-8      	; 0x242c <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2434:	46 83       	std	Z+6, r20	; 0x06
    2436:	08 95       	ret

00002438 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2438:	fb 01       	movw	r30, r22
    243a:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    243c:	e8 2f       	mov	r30, r24
    243e:	e6 95       	lsr	r30
    2440:	e6 95       	lsr	r30
    2442:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	e4 9f       	mul	r30, r20
    2448:	f0 01       	movw	r30, r0
    244a:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    244c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    244e:	87 70       	andi	r24, 0x07	; 7
    2450:	21 e0       	ldi	r18, 0x01	; 1
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	a9 01       	movw	r20, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <usart_spi_deselect_device+0x24>
    2458:	44 0f       	add	r20, r20
    245a:	55 1f       	adc	r21, r21
    245c:	8a 95       	dec	r24
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2460:	45 83       	std	Z+5, r20	; 0x05
    2462:	08 95       	ret

00002464 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    2464:	80 93 e2 23 	sts	0x23E2, r24
    2468:	90 93 e3 23 	sts	0x23E3, r25
    246c:	08 95       	ret

0000246e <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    246e:	20 e8       	ldi	r18, 0x80	; 128
    2470:	82 9f       	mul	r24, r18
    2472:	c0 01       	movw	r24, r0
    2474:	11 24       	eor	r1, r1
    2476:	86 0f       	add	r24, r22
    2478:	91 1d       	adc	r25, r1
    247a:	e0 91 e2 23 	lds	r30, 0x23E2
    247e:	f0 91 e3 23 	lds	r31, 0x23E3
    2482:	e8 0f       	add	r30, r24
    2484:	f9 1f       	adc	r31, r25
    2486:	40 83       	st	Z, r20
    2488:	08 95       	ret

0000248a <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    248a:	20 e8       	ldi	r18, 0x80	; 128
    248c:	82 9f       	mul	r24, r18
    248e:	c0 01       	movw	r24, r0
    2490:	11 24       	eor	r1, r1
    2492:	86 0f       	add	r24, r22
    2494:	91 1d       	adc	r25, r1
    2496:	e0 91 e2 23 	lds	r30, 0x23E2
    249a:	f0 91 e3 23 	lds	r31, 0x23E3
    249e:	e8 0f       	add	r30, r24
    24a0:	f9 1f       	adc	r31, r25
}
    24a2:	80 81       	ld	r24, Z
    24a4:	08 95       	ret

000024a6 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    24a6:	ff 92       	push	r15
    24a8:	0f 93       	push	r16
    24aa:	1f 93       	push	r17
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	e4 2f       	mov	r30, r20
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	e8 0f       	add	r30, r24
    24b6:	f1 1d       	adc	r31, r1
    24b8:	e1 38       	cpi	r30, 0x81	; 129
    24ba:	f1 05       	cpc	r31, r1
    24bc:	1c f0       	brlt	.+6      	; 0x24c4 <gfx_mono_generic_draw_horizontal_line+0x1e>
    24be:	c0 e8       	ldi	r28, 0x80	; 128
    24c0:	4c 2f       	mov	r20, r28
    24c2:	48 1b       	sub	r20, r24
    24c4:	44 23       	and	r20, r20
    24c6:	09 f4       	brne	.+2      	; 0x24ca <gfx_mono_generic_draw_horizontal_line+0x24>
    24c8:	53 c0       	rjmp	.+166    	; 0x2570 <gfx_mono_generic_draw_horizontal_line+0xca>
    24ca:	d6 2f       	mov	r29, r22
    24cc:	d6 95       	lsr	r29
    24ce:	d6 95       	lsr	r29
    24d0:	d6 95       	lsr	r29
    24d2:	ed 2f       	mov	r30, r29
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	f1 95       	neg	r31
    24d8:	e1 95       	neg	r30
    24da:	f1 09       	sbc	r31, r1
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ee 0f       	add	r30, r30
    24e6:	ff 1f       	adc	r31, r31
    24e8:	df 01       	movw	r26, r30
    24ea:	a6 0f       	add	r26, r22
    24ec:	b1 1d       	adc	r27, r1
    24ee:	bd 01       	movw	r22, r26
    24f0:	e1 e0       	ldi	r30, 0x01	; 1
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	df 01       	movw	r26, r30
    24f6:	02 c0       	rjmp	.+4      	; 0x24fc <gfx_mono_generic_draw_horizontal_line+0x56>
    24f8:	aa 0f       	add	r26, r26
    24fa:	bb 1f       	adc	r27, r27
    24fc:	6a 95       	dec	r22
    24fe:	e2 f7       	brpl	.-8      	; 0x24f8 <gfx_mono_generic_draw_horizontal_line+0x52>
    2500:	fa 2e       	mov	r15, r26
    2502:	21 30       	cpi	r18, 0x01	; 1
    2504:	21 f0       	breq	.+8      	; 0x250e <gfx_mono_generic_draw_horizontal_line+0x68>
    2506:	98 f0       	brcs	.+38     	; 0x252e <gfx_mono_generic_draw_horizontal_line+0x88>
    2508:	22 30       	cpi	r18, 0x02	; 2
    250a:	19 f1       	breq	.+70     	; 0x2552 <gfx_mono_generic_draw_horizontal_line+0xac>
    250c:	31 c0       	rjmp	.+98     	; 0x2570 <gfx_mono_generic_draw_horizontal_line+0xca>
    250e:	c4 2f       	mov	r28, r20
    2510:	1f ef       	ldi	r17, 0xFF	; 255
    2512:	18 0f       	add	r17, r24
    2514:	01 2f       	mov	r16, r17
    2516:	0c 0f       	add	r16, r28
    2518:	60 2f       	mov	r22, r16
    251a:	8d 2f       	mov	r24, r29
    251c:	50 d9       	rcall	.-3424   	; 0x17be <gfx_mono_st7565r_get_byte>
    251e:	48 2f       	mov	r20, r24
    2520:	4f 29       	or	r20, r15
    2522:	60 2f       	mov	r22, r16
    2524:	8d 2f       	mov	r24, r29
    2526:	24 d8       	rcall	.-4024   	; 0x1570 <gfx_mono_st7565r_put_byte>
    2528:	c1 50       	subi	r28, 0x01	; 1
    252a:	a1 f7       	brne	.-24     	; 0x2514 <gfx_mono_generic_draw_horizontal_line+0x6e>
    252c:	21 c0       	rjmp	.+66     	; 0x2570 <gfx_mono_generic_draw_horizontal_line+0xca>
    252e:	c4 2f       	mov	r28, r20
    2530:	1f ef       	ldi	r17, 0xFF	; 255
    2532:	18 0f       	add	r17, r24
    2534:	fa 2e       	mov	r15, r26
    2536:	f0 94       	com	r15
    2538:	01 2f       	mov	r16, r17
    253a:	0c 0f       	add	r16, r28
    253c:	60 2f       	mov	r22, r16
    253e:	8d 2f       	mov	r24, r29
    2540:	3e d9       	rcall	.-3460   	; 0x17be <gfx_mono_st7565r_get_byte>
    2542:	48 2f       	mov	r20, r24
    2544:	4f 21       	and	r20, r15
    2546:	60 2f       	mov	r22, r16
    2548:	8d 2f       	mov	r24, r29
    254a:	12 d8       	rcall	.-4060   	; 0x1570 <gfx_mono_st7565r_put_byte>
    254c:	c1 50       	subi	r28, 0x01	; 1
    254e:	a1 f7       	brne	.-24     	; 0x2538 <gfx_mono_generic_draw_horizontal_line+0x92>
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <gfx_mono_generic_draw_horizontal_line+0xca>
    2552:	c4 2f       	mov	r28, r20
    2554:	1f ef       	ldi	r17, 0xFF	; 255
    2556:	18 0f       	add	r17, r24
    2558:	01 2f       	mov	r16, r17
    255a:	0c 0f       	add	r16, r28
    255c:	60 2f       	mov	r22, r16
    255e:	8d 2f       	mov	r24, r29
    2560:	2e d9       	rcall	.-3492   	; 0x17be <gfx_mono_st7565r_get_byte>
    2562:	48 2f       	mov	r20, r24
    2564:	4f 25       	eor	r20, r15
    2566:	60 2f       	mov	r22, r16
    2568:	8d 2f       	mov	r24, r29
    256a:	02 d8       	rcall	.-4092   	; 0x1570 <gfx_mono_st7565r_put_byte>
    256c:	c1 50       	subi	r28, 0x01	; 1
    256e:	a1 f7       	brne	.-24     	; 0x2558 <gfx_mono_generic_draw_horizontal_line+0xb2>
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	08 95       	ret

0000257c <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
	if (height == 0) {
    2586:	22 23       	and	r18, r18
    2588:	69 f0       	breq	.+26     	; 0x25a4 <gfx_mono_generic_draw_filled_rect+0x28>
    258a:	c2 2f       	mov	r28, r18
    258c:	f4 2e       	mov	r15, r20
    258e:	18 2f       	mov	r17, r24
    2590:	df ef       	ldi	r29, 0xFF	; 255
    2592:	d6 0f       	add	r29, r22
    2594:	6d 2f       	mov	r22, r29
    2596:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    2598:	20 2f       	mov	r18, r16
    259a:	4f 2d       	mov	r20, r15
    259c:	81 2f       	mov	r24, r17
    259e:	83 df       	rcall	.-250    	; 0x24a6 <gfx_mono_generic_draw_horizontal_line>
    25a0:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    25a2:	c1 f7       	brne	.-16     	; 0x2594 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	08 95       	ret

000025b0 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    25b0:	af 92       	push	r10
    25b2:	bf 92       	push	r11
    25b4:	cf 92       	push	r12
    25b6:	df 92       	push	r13
    25b8:	ef 92       	push	r14
    25ba:	ff 92       	push	r15
    25bc:	0f 93       	push	r16
    25be:	1f 93       	push	r17
    25c0:	cf 93       	push	r28
    25c2:	df 93       	push	r29
    25c4:	c8 2f       	mov	r28, r24
    25c6:	e6 2e       	mov	r14, r22
    25c8:	b4 2e       	mov	r11, r20
    25ca:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    25cc:	00 e0       	ldi	r16, 0x00	; 0
    25ce:	f9 01       	movw	r30, r18
    25d0:	24 81       	ldd	r18, Z+4	; 0x04
    25d2:	43 81       	ldd	r20, Z+3	; 0x03
    25d4:	6b 2d       	mov	r22, r11
    25d6:	8e 2d       	mov	r24, r14
    25d8:	d1 df       	rcall	.-94     	; 0x257c <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    25da:	f6 01       	movw	r30, r12
    25dc:	80 81       	ld	r24, Z
    25de:	81 11       	cpse	r24, r1
    25e0:	39 c0       	rjmp	.+114    	; 0x2654 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    25e2:	83 81       	ldd	r24, Z+3	; 0x03
    25e4:	28 2f       	mov	r18, r24
    25e6:	26 95       	lsr	r18
    25e8:	26 95       	lsr	r18
    25ea:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    25ec:	87 70       	andi	r24, 0x07	; 7
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <gfx_mono_draw_char+0x42>
		char_row_size++;
    25f0:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    25f2:	f6 01       	movw	r30, r12
    25f4:	a4 80       	ldd	r10, Z+4	; 0x04
    25f6:	2a 9d       	mul	r18, r10
    25f8:	90 01       	movw	r18, r0
    25fa:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
    25fc:	8c 2f       	mov	r24, r28
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	45 81       	ldd	r20, Z+5	; 0x05
    2602:	84 1b       	sub	r24, r20
    2604:	91 09       	sbc	r25, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
    2606:	28 9f       	mul	r18, r24
    2608:	a0 01       	movw	r20, r0
    260a:	29 9f       	mul	r18, r25
    260c:	50 0d       	add	r21, r0
    260e:	38 9f       	mul	r19, r24
    2610:	50 0d       	add	r21, r0
    2612:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    2614:	01 81       	ldd	r16, Z+1	; 0x01
    2616:	12 81       	ldd	r17, Z+2	; 0x02
    2618:	04 0f       	add	r16, r20
    261a:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    261c:	f6 01       	movw	r30, r12
    261e:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    2620:	ff 20       	and	r15, r15
    2622:	a1 f0       	breq	.+40     	; 0x264c <gfx_mono_draw_char+0x9c>
    2624:	d0 e0       	ldi	r29, 0x00	; 0
    2626:	c0 e0       	ldi	r28, 0x00	; 0
    2628:	8c 2f       	mov	r24, r28
    262a:	8e 0d       	add	r24, r14
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    262c:	9c 2f       	mov	r25, r28
    262e:	97 70       	andi	r25, 0x07	; 7
    2630:	21 f4       	brne	.+8      	; 0x263a <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    2632:	f8 01       	movw	r30, r16
    2634:	d4 91       	lpm	r29, Z
				glyph_data++;
    2636:	0f 5f       	subi	r16, 0xFF	; 255
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    263a:	dd 23       	and	r29, r29
    263c:	1c f4       	brge	.+6      	; 0x2644 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	6b 2d       	mov	r22, r11
    2642:	7f d8       	rcall	.-3842   	; 0x1742 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2644:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2646:	cf 5f       	subi	r28, 0xFF	; 255
    2648:	cf 11       	cpse	r28, r15
    264a:	ee cf       	rjmp	.-36     	; 0x2628 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    264c:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    264e:	aa 94       	dec	r10
	} while (rows_left > 0);
    2650:	a1 10       	cpse	r10, r1
    2652:	e4 cf       	rjmp	.-56     	; 0x261c <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
    2664:	bf 90       	pop	r11
    2666:	af 90       	pop	r10
    2668:	08 95       	ret

0000266a <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    266a:	df 92       	push	r13
    266c:	ef 92       	push	r14
    266e:	ff 92       	push	r15
    2670:	0f 93       	push	r16
    2672:	1f 93       	push	r17
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	04 2f       	mov	r16, r20
    267a:	79 01       	movw	r14, r18
    267c:	ec 01       	movw	r28, r24
    267e:	16 2f       	mov	r17, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2680:	d6 2e       	mov	r13, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2682:	89 91       	ld	r24, Y+
    2684:	8a 30       	cpi	r24, 0x0A	; 10
    2686:	31 f4       	brne	.+12     	; 0x2694 <gfx_mono_draw_string+0x2a>
    2688:	f7 01       	movw	r30, r14
    268a:	84 81       	ldd	r24, Z+4	; 0x04
    268c:	8f 5f       	subi	r24, 0xFF	; 255
			x = start_of_string_position_x;
			y += font->height + 1;
    268e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2690:	1d 2d       	mov	r17, r13
    2692:	09 c0       	rjmp	.+18     	; 0x26a6 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    2694:	8d 30       	cpi	r24, 0x0D	; 13
    2696:	39 f0       	breq	.+14     	; 0x26a6 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    2698:	97 01       	movw	r18, r14
    269a:	40 2f       	mov	r20, r16
    269c:	61 2f       	mov	r22, r17
    269e:	88 df       	rcall	.-240    	; 0x25b0 <gfx_mono_draw_char>
			x += font->width;
    26a0:	f7 01       	movw	r30, r14
    26a2:	83 81       	ldd	r24, Z+3	; 0x03
    26a4:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    26a6:	88 81       	ld	r24, Y
    26a8:	81 11       	cpse	r24, r1
    26aa:	eb cf       	rjmp	.-42     	; 0x2682 <gfx_mono_draw_string+0x18>
}
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	08 95       	ret

000026bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    26bc:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    26be:	03 96       	adiw	r24, 0x03	; 3
    26c0:	81 83       	std	Z+1, r24	; 0x01
    26c2:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    26c4:	2f ef       	ldi	r18, 0xFF	; 255
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	23 83       	std	Z+3, r18	; 0x03
    26ca:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    26cc:	85 83       	std	Z+5, r24	; 0x05
    26ce:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    26d0:	87 83       	std	Z+7, r24	; 0x07
    26d2:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    26d4:	10 82       	st	Z, r1
    26d6:	08 95       	ret

000026d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    26d8:	fc 01       	movw	r30, r24
    26da:	10 86       	std	Z+8, r1	; 0x08
    26dc:	11 86       	std	Z+9, r1	; 0x09
    26de:	08 95       	ret

000026e0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	9c 01       	movw	r18, r24
    26e6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    26e8:	dc 01       	movw	r26, r24
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	cd 91       	ld	r28, X+
    26ee:	dc 91       	ld	r29, X
    26f0:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    26f2:	c2 83       	std	Z+2, r28	; 0x02
    26f4:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	84 83       	std	Z+4, r24	; 0x04
    26fc:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	9d 81       	ldd	r25, Y+5	; 0x05
    2702:	dc 01       	movw	r26, r24
    2704:	12 96       	adiw	r26, 0x02	; 2
    2706:	6d 93       	st	X+, r22
    2708:	7c 93       	st	X, r23
    270a:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    270c:	6c 83       	std	Y+4, r22	; 0x04
    270e:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2710:	20 87       	std	Z+8, r18	; 0x08
    2712:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    2714:	f9 01       	movw	r30, r18
    2716:	80 81       	ld	r24, Z
    2718:	8f 5f       	subi	r24, 0xFF	; 255
    271a:	80 83       	st	Z, r24
}
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	08 95       	ret

00002722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2722:	cf 93       	push	r28
    2724:	df 93       	push	r29
    2726:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2728:	48 81       	ld	r20, Y
    272a:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    272c:	4f 3f       	cpi	r20, 0xFF	; 255
    272e:	2f ef       	ldi	r18, 0xFF	; 255
    2730:	52 07       	cpc	r21, r18
    2732:	21 f4       	brne	.+8      	; 0x273c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2734:	fc 01       	movw	r30, r24
    2736:	a7 81       	ldd	r26, Z+7	; 0x07
    2738:	b0 85       	ldd	r27, Z+8	; 0x08
    273a:	0d c0       	rjmp	.+26     	; 0x2756 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    273c:	dc 01       	movw	r26, r24
    273e:	13 96       	adiw	r26, 0x03	; 3
    2740:	01 c0       	rjmp	.+2      	; 0x2744 <vListInsert+0x22>
    2742:	df 01       	movw	r26, r30
    2744:	12 96       	adiw	r26, 0x02	; 2
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	13 97       	sbiw	r26, 0x03	; 3
    274c:	20 81       	ld	r18, Z
    274e:	31 81       	ldd	r19, Z+1	; 0x01
    2750:	42 17       	cp	r20, r18
    2752:	53 07       	cpc	r21, r19
    2754:	b0 f7       	brcc	.-20     	; 0x2742 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2756:	12 96       	adiw	r26, 0x02	; 2
    2758:	ed 91       	ld	r30, X+
    275a:	fc 91       	ld	r31, X
    275c:	13 97       	sbiw	r26, 0x03	; 3
    275e:	ea 83       	std	Y+2, r30	; 0x02
    2760:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2762:	c4 83       	std	Z+4, r28	; 0x04
    2764:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    2766:	ac 83       	std	Y+4, r26	; 0x04
    2768:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    276a:	12 96       	adiw	r26, 0x02	; 2
    276c:	cd 93       	st	X+, r28
    276e:	dc 93       	st	X, r29
    2770:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2772:	88 87       	std	Y+8, r24	; 0x08
    2774:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    2776:	fc 01       	movw	r30, r24
    2778:	20 81       	ld	r18, Z
    277a:	2f 5f       	subi	r18, 0xFF	; 255
    277c:	20 83       	st	Z, r18
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	08 95       	ret

00002784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    278a:	a0 85       	ldd	r26, Z+8	; 0x08
    278c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    278e:	c2 81       	ldd	r28, Z+2	; 0x02
    2790:	d3 81       	ldd	r29, Z+3	; 0x03
    2792:	84 81       	ldd	r24, Z+4	; 0x04
    2794:	95 81       	ldd	r25, Z+5	; 0x05
    2796:	8c 83       	std	Y+4, r24	; 0x04
    2798:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    279a:	c4 81       	ldd	r28, Z+4	; 0x04
    279c:	d5 81       	ldd	r29, Z+5	; 0x05
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	8a 83       	std	Y+2, r24	; 0x02
    27a4:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    27a6:	11 96       	adiw	r26, 0x01	; 1
    27a8:	cd 91       	ld	r28, X+
    27aa:	dc 91       	ld	r29, X
    27ac:	12 97       	sbiw	r26, 0x02	; 2
    27ae:	ce 17       	cp	r28, r30
    27b0:	df 07       	cpc	r29, r31
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    27b4:	8c 81       	ldd	r24, Y+4	; 0x04
    27b6:	9d 81       	ldd	r25, Y+5	; 0x05
    27b8:	11 96       	adiw	r26, 0x01	; 1
    27ba:	8d 93       	st	X+, r24
    27bc:	9c 93       	st	X, r25
    27be:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    27c0:	10 86       	std	Z+8, r1	; 0x08
    27c2:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    27c4:	8c 91       	ld	r24, X
    27c6:	81 50       	subi	r24, 0x01	; 1
    27c8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	08 95       	ret

000027d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    27d6:	71 e1       	ldi	r23, 0x11	; 17
    27d8:	fc 01       	movw	r30, r24
    27da:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    27dc:	31 97       	sbiw	r30, 0x01	; 1
    27de:	62 e2       	ldi	r22, 0x22	; 34
    27e0:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    27e2:	31 97       	sbiw	r30, 0x01	; 1
    27e4:	23 e3       	ldi	r18, 0x33	; 51
    27e6:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    27e8:	01 2e       	mov	r0, r17
    27ea:	00 0c       	add	r0, r0
    27ec:	22 0b       	sbc	r18, r18
    27ee:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    27f0:	31 97       	sbiw	r30, 0x01	; 1
    27f2:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    27f4:	31 97       	sbiw	r30, 0x01	; 1
    27f6:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    27f8:	31 97       	sbiw	r30, 0x01	; 1
    27fa:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    27fc:	31 97       	sbiw	r30, 0x01	; 1
    27fe:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    2800:	31 97       	sbiw	r30, 0x01	; 1
    2802:	20 e8       	ldi	r18, 0x80	; 128
    2804:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    2806:	31 97       	sbiw	r30, 0x01	; 1
    2808:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    280a:	31 97       	sbiw	r30, 0x01	; 1
    280c:	22 e0       	ldi	r18, 0x02	; 2
    280e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    2810:	31 97       	sbiw	r30, 0x01	; 1
    2812:	23 e0       	ldi	r18, 0x03	; 3
    2814:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    2816:	31 97       	sbiw	r30, 0x01	; 1
    2818:	24 e0       	ldi	r18, 0x04	; 4
    281a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    281c:	31 97       	sbiw	r30, 0x01	; 1
    281e:	25 e0       	ldi	r18, 0x05	; 5
    2820:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    2822:	31 97       	sbiw	r30, 0x01	; 1
    2824:	26 e0       	ldi	r18, 0x06	; 6
    2826:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    2828:	31 97       	sbiw	r30, 0x01	; 1
    282a:	27 e0       	ldi	r18, 0x07	; 7
    282c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    282e:	31 97       	sbiw	r30, 0x01	; 1
    2830:	28 e0       	ldi	r18, 0x08	; 8
    2832:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    2834:	31 97       	sbiw	r30, 0x01	; 1
    2836:	29 e0       	ldi	r18, 0x09	; 9
    2838:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    283a:	31 97       	sbiw	r30, 0x01	; 1
    283c:	20 e1       	ldi	r18, 0x10	; 16
    283e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    2840:	31 97       	sbiw	r30, 0x01	; 1
    2842:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    2844:	31 97       	sbiw	r30, 0x01	; 1
    2846:	22 e1       	ldi	r18, 0x12	; 18
    2848:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    284a:	31 97       	sbiw	r30, 0x01	; 1
    284c:	23 e1       	ldi	r18, 0x13	; 19
    284e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    2850:	31 97       	sbiw	r30, 0x01	; 1
    2852:	24 e1       	ldi	r18, 0x14	; 20
    2854:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    2856:	31 97       	sbiw	r30, 0x01	; 1
    2858:	25 e1       	ldi	r18, 0x15	; 21
    285a:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    285c:	31 97       	sbiw	r30, 0x01	; 1
    285e:	26 e1       	ldi	r18, 0x16	; 22
    2860:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    2862:	31 97       	sbiw	r30, 0x01	; 1
    2864:	27 e1       	ldi	r18, 0x17	; 23
    2866:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    2868:	31 97       	sbiw	r30, 0x01	; 1
    286a:	28 e1       	ldi	r18, 0x18	; 24
    286c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    286e:	31 97       	sbiw	r30, 0x01	; 1
    2870:	29 e1       	ldi	r18, 0x19	; 25
    2872:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    2874:	31 97       	sbiw	r30, 0x01	; 1
    2876:	20 e2       	ldi	r18, 0x20	; 32
    2878:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    287a:	31 97       	sbiw	r30, 0x01	; 1
    287c:	21 e2       	ldi	r18, 0x21	; 33
    287e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    2880:	31 97       	sbiw	r30, 0x01	; 1
    2882:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    2884:	31 97       	sbiw	r30, 0x01	; 1
    2886:	23 e2       	ldi	r18, 0x23	; 35
    2888:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    288a:	31 97       	sbiw	r30, 0x01	; 1
    288c:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    288e:	31 97       	sbiw	r30, 0x01	; 1
    2890:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    2892:	31 97       	sbiw	r30, 0x01	; 1
    2894:	26 e2       	ldi	r18, 0x26	; 38
    2896:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    2898:	31 97       	sbiw	r30, 0x01	; 1
    289a:	27 e2       	ldi	r18, 0x27	; 39
    289c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    289e:	31 97       	sbiw	r30, 0x01	; 1
    28a0:	28 e2       	ldi	r18, 0x28	; 40
    28a2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    28a4:	31 97       	sbiw	r30, 0x01	; 1
    28a6:	29 e2       	ldi	r18, 0x29	; 41
    28a8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    28aa:	31 97       	sbiw	r30, 0x01	; 1
    28ac:	20 e3       	ldi	r18, 0x30	; 48
    28ae:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    28b0:	31 97       	sbiw	r30, 0x01	; 1
    28b2:	21 e3       	ldi	r18, 0x31	; 49
    28b4:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    28b6:	87 97       	sbiw	r24, 0x27	; 39
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	08 95       	ret

000028be <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    28be:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    28c0:	e0 e7       	ldi	r30, 0x70	; 112
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	83 81       	ldd	r24, Z+3	; 0x03
    28c6:	8a 7f       	andi	r24, 0xFA	; 250
    28c8:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    28ca:	e0 e0       	ldi	r30, 0x00	; 0
    28cc:	f8 e0       	ldi	r31, 0x08	; 8
    28ce:	80 ea       	ldi	r24, 0xA0	; 160
    28d0:	9f e0       	ldi	r25, 0x0F	; 15
    28d2:	86 a3       	std	Z+38, r24	; 0x26
    28d4:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    28da:	a0 ea       	ldi	r26, 0xA0	; 160
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	12 96       	adiw	r26, 0x02	; 2
    28e0:	8c 91       	ld	r24, X
    28e2:	12 97       	sbiw	r26, 0x02	; 2
    28e4:	81 60       	ori	r24, 0x01	; 1
    28e6:	12 96       	adiw	r26, 0x02	; 2
    28e8:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    28ea:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    28ec:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    28ee:	a0 91 3a 24 	lds	r26, 0x243A
    28f2:	b0 91 3b 24 	lds	r27, 0x243B
    28f6:	0d 90       	ld	r0, X+
    28f8:	0d be       	out	0x3d, r0	; 61
    28fa:	0d 90       	ld	r0, X+
    28fc:	0e be       	out	0x3e, r0	; 62
    28fe:	ff 91       	pop	r31
    2900:	ef 91       	pop	r30
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	bf 91       	pop	r27
    2908:	af 91       	pop	r26
    290a:	9f 91       	pop	r25
    290c:	8f 91       	pop	r24
    290e:	7f 91       	pop	r23
    2910:	6f 91       	pop	r22
    2912:	5f 91       	pop	r21
    2914:	4f 91       	pop	r20
    2916:	3f 91       	pop	r19
    2918:	2f 91       	pop	r18
    291a:	1f 91       	pop	r17
    291c:	0f 91       	pop	r16
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	9f 90       	pop	r9
    292c:	8f 90       	pop	r8
    292e:	7f 90       	pop	r7
    2930:	6f 90       	pop	r6
    2932:	5f 90       	pop	r5
    2934:	4f 90       	pop	r4
    2936:	3f 90       	pop	r3
    2938:	2f 90       	pop	r2
    293a:	1f 90       	pop	r1
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    2942:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	08 95       	ret

00002948 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	0f 92       	push	r0
    2950:	1f 92       	push	r1
    2952:	11 24       	eor	r1, r1
    2954:	2f 92       	push	r2
    2956:	3f 92       	push	r3
    2958:	4f 92       	push	r4
    295a:	5f 92       	push	r5
    295c:	6f 92       	push	r6
    295e:	7f 92       	push	r7
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	af 92       	push	r10
    2966:	bf 92       	push	r11
    2968:	cf 92       	push	r12
    296a:	df 92       	push	r13
    296c:	ef 92       	push	r14
    296e:	ff 92       	push	r15
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	ef 93       	push	r30
    298e:	ff 93       	push	r31
    2990:	a0 91 3a 24 	lds	r26, 0x243A
    2994:	b0 91 3b 24 	lds	r27, 0x243B
    2998:	0d b6       	in	r0, 0x3d	; 61
    299a:	0d 92       	st	X+, r0
    299c:	0e b6       	in	r0, 0x3e	; 62
    299e:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    29a0:	76 d3       	rcall	.+1772   	; 0x308e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    29a2:	a0 91 3a 24 	lds	r26, 0x243A
    29a6:	b0 91 3b 24 	lds	r27, 0x243B
    29aa:	0d 90       	ld	r0, X+
    29ac:	0d be       	out	0x3d, r0	; 61
    29ae:	0d 90       	ld	r0, X+
    29b0:	0e be       	out	0x3e, r0	; 62
    29b2:	ff 91       	pop	r31
    29b4:	ef 91       	pop	r30
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	bf 91       	pop	r27
    29bc:	af 91       	pop	r26
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	7f 91       	pop	r23
    29c4:	6f 91       	pop	r22
    29c6:	5f 91       	pop	r21
    29c8:	4f 91       	pop	r20
    29ca:	3f 91       	pop	r19
    29cc:	2f 91       	pop	r18
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	df 90       	pop	r13
    29d8:	cf 90       	pop	r12
    29da:	bf 90       	pop	r11
    29dc:	af 90       	pop	r10
    29de:	9f 90       	pop	r9
    29e0:	8f 90       	pop	r8
    29e2:	7f 90       	pop	r7
    29e4:	6f 90       	pop	r6
    29e6:	5f 90       	pop	r5
    29e8:	4f 90       	pop	r4
    29ea:	3f 90       	pop	r3
    29ec:	2f 90       	pop	r2
    29ee:	1f 90       	pop	r1
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	0f 90       	pop	r0

    asm volatile ( "ret" );
    29f6:	08 95       	ret

000029f8 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    29f8:	0f 92       	push	r0
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	0f 92       	push	r0
    2a00:	1f 92       	push	r1
    2a02:	11 24       	eor	r1, r1
    2a04:	2f 92       	push	r2
    2a06:	3f 92       	push	r3
    2a08:	4f 92       	push	r4
    2a0a:	5f 92       	push	r5
    2a0c:	6f 92       	push	r6
    2a0e:	7f 92       	push	r7
    2a10:	8f 92       	push	r8
    2a12:	9f 92       	push	r9
    2a14:	af 92       	push	r10
    2a16:	bf 92       	push	r11
    2a18:	cf 92       	push	r12
    2a1a:	df 92       	push	r13
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	1f 93       	push	r17
    2a24:	2f 93       	push	r18
    2a26:	3f 93       	push	r19
    2a28:	4f 93       	push	r20
    2a2a:	5f 93       	push	r21
    2a2c:	6f 93       	push	r22
    2a2e:	7f 93       	push	r23
    2a30:	8f 93       	push	r24
    2a32:	9f 93       	push	r25
    2a34:	af 93       	push	r26
    2a36:	bf 93       	push	r27
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	ef 93       	push	r30
    2a3e:	ff 93       	push	r31
    2a40:	a0 91 3a 24 	lds	r26, 0x243A
    2a44:	b0 91 3b 24 	lds	r27, 0x243B
    2a48:	0d b6       	in	r0, 0x3d	; 61
    2a4a:	0d 92       	st	X+, r0
    2a4c:	0e b6       	in	r0, 0x3e	; 62
    2a4e:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    2a50:	b3 d1       	rcall	.+870    	; 0x2db8 <xTaskIncrementTick>
    2a52:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    2a54:	1c d3       	rcall	.+1592   	; 0x308e <vTaskSwitchContext>
        }
        portRESTORE_CONTEXT();
    2a56:	a0 91 3a 24 	lds	r26, 0x243A
    2a5a:	b0 91 3b 24 	lds	r27, 0x243B
    2a5e:	0d 90       	ld	r0, X+
    2a60:	0d be       	out	0x3d, r0	; 61
    2a62:	0d 90       	ld	r0, X+
    2a64:	0e be       	out	0x3e, r0	; 62
    2a66:	ff 91       	pop	r31
    2a68:	ef 91       	pop	r30
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	bf 91       	pop	r27
    2a70:	af 91       	pop	r26
    2a72:	9f 91       	pop	r25
    2a74:	8f 91       	pop	r24
    2a76:	7f 91       	pop	r23
    2a78:	6f 91       	pop	r22
    2a7a:	5f 91       	pop	r21
    2a7c:	4f 91       	pop	r20
    2a7e:	3f 91       	pop	r19
    2a80:	2f 91       	pop	r18
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
    2a8e:	bf 90       	pop	r11
    2a90:	af 90       	pop	r10
    2a92:	9f 90       	pop	r9
    2a94:	8f 90       	pop	r8
    2a96:	7f 90       	pop	r7
    2a98:	6f 90       	pop	r6
    2a9a:	5f 90       	pop	r5
    2a9c:	4f 90       	pop	r4
    2a9e:	3f 90       	pop	r3
    2aa0:	2f 90       	pop	r2
    2aa2:	1f 90       	pop	r1
    2aa4:	0f 90       	pop	r0
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	0f 90       	pop	r0

        asm volatile ( "reti" );
    2aaa:	18 95       	reti

00002aac <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
    2ab2:	7c d1       	rcall	.+760    	; 0x2dac <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	0e 94 58 20 	call	0x40b0	; 0x40b0 <malloc>
    2aba:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2abc:	50 d2       	rcall	.+1184   	; 0x2f5e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2abe:	ce 01       	movw	r24, r28
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
	if( pv )
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	31 f0       	breq	.+12     	; 0x2ada <vPortFree+0x14>
    2ace:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
    2ad0:	6d d1       	rcall	.+730    	; 0x2dac <vTaskSuspendAll>
		{
			free( pv );
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	0e 94 ed 20 	call	0x41da	; 0x41da <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    2ad8:	42 d2       	rcall	.+1156   	; 0x2f5e <xTaskResumeAll>
	}
}
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	08 95       	ret

00002ae0 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2ae0:	cd e0       	ldi	r28, 0x0D	; 13
    2ae2:	d4 e2       	ldi	r29, 0x24	; 36
    2ae4:	88 81       	ld	r24, Y
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	f0 f3       	brcs	.-4      	; 0x2ae6 <prvIdleTask+0x6>
    2aea:	2e df       	rcall	.-420    	; 0x2948 <vPortYield>
    2aec:	fb cf       	rjmp	.-10     	; 0x2ae4 <prvIdleTask+0x4>

00002aee <prvAddCurrentTaskToDelayedList>:
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	ec 01       	movw	r28, r24
    2af4:	e0 91 3a 24 	lds	r30, 0x243A
    2af8:	f0 91 3b 24 	lds	r31, 0x243B
    2afc:	82 83       	std	Z+2, r24	; 0x02
    2afe:	93 83       	std	Z+3, r25	; 0x03
    2b00:	80 91 eb 23 	lds	r24, 0x23EB
    2b04:	90 91 ec 23 	lds	r25, 0x23EC
    2b08:	c8 17       	cp	r28, r24
    2b0a:	d9 07       	cpc	r29, r25
    2b0c:	60 f4       	brcc	.+24     	; 0x2b26 <prvAddCurrentTaskToDelayedList+0x38>
    2b0e:	60 91 3a 24 	lds	r22, 0x243A
    2b12:	70 91 3b 24 	lds	r23, 0x243B
    2b16:	80 91 f7 23 	lds	r24, 0x23F7
    2b1a:	90 91 f8 23 	lds	r25, 0x23F8
    2b1e:	6e 5f       	subi	r22, 0xFE	; 254
    2b20:	7f 4f       	sbci	r23, 0xFF	; 255
    2b22:	ff dd       	rcall	.-1026   	; 0x2722 <vListInsert>
    2b24:	16 c0       	rjmp	.+44     	; 0x2b52 <prvAddCurrentTaskToDelayedList+0x64>
    2b26:	60 91 3a 24 	lds	r22, 0x243A
    2b2a:	70 91 3b 24 	lds	r23, 0x243B
    2b2e:	80 91 f9 23 	lds	r24, 0x23F9
    2b32:	90 91 fa 23 	lds	r25, 0x23FA
    2b36:	6e 5f       	subi	r22, 0xFE	; 254
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	f3 dd       	rcall	.-1050   	; 0x2722 <vListInsert>
    2b3c:	80 91 0e 20 	lds	r24, 0x200E
    2b40:	90 91 0f 20 	lds	r25, 0x200F
    2b44:	c8 17       	cp	r28, r24
    2b46:	d9 07       	cpc	r29, r25
    2b48:	20 f4       	brcc	.+8      	; 0x2b52 <prvAddCurrentTaskToDelayedList+0x64>
    2b4a:	c0 93 0e 20 	sts	0x200E, r28
    2b4e:	d0 93 0f 20 	sts	0x200F, r29
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	08 95       	ret

00002b58 <xTaskGenericCreate>:
    2b58:	4f 92       	push	r4
    2b5a:	5f 92       	push	r5
    2b5c:	6f 92       	push	r6
    2b5e:	7f 92       	push	r7
    2b60:	8f 92       	push	r8
    2b62:	9f 92       	push	r9
    2b64:	af 92       	push	r10
    2b66:	bf 92       	push	r11
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	4c 01       	movw	r8, r24
    2b7a:	eb 01       	movw	r28, r22
    2b7c:	5a 01       	movw	r10, r20
    2b7e:	29 01       	movw	r4, r18
    2b80:	81 e2       	ldi	r24, 0x21	; 33
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	93 df       	rcall	.-218    	; 0x2aac <pvPortMalloc>
    2b86:	3c 01       	movw	r6, r24
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <xTaskGenericCreate+0x36>
    2b8c:	d4 c0       	rjmp	.+424    	; 0x2d36 <xTaskGenericCreate+0x1de>
    2b8e:	c1 14       	cp	r12, r1
    2b90:	d1 04       	cpc	r13, r1
    2b92:	09 f0       	breq	.+2      	; 0x2b96 <xTaskGenericCreate+0x3e>
    2b94:	cc c0       	rjmp	.+408    	; 0x2d2e <xTaskGenericCreate+0x1d6>
    2b96:	c5 01       	movw	r24, r10
    2b98:	89 df       	rcall	.-238    	; 0x2aac <pvPortMalloc>
    2b9a:	f3 01       	movw	r30, r6
    2b9c:	87 8b       	std	Z+23, r24	; 0x17
    2b9e:	90 8f       	std	Z+24, r25	; 0x18
    2ba0:	89 2b       	or	r24, r25
    2ba2:	19 f4       	brne	.+6      	; 0x2baa <xTaskGenericCreate+0x52>
    2ba4:	c3 01       	movw	r24, r6
    2ba6:	8f df       	rcall	.-226    	; 0x2ac6 <vPortFree>
    2ba8:	c6 c0       	rjmp	.+396    	; 0x2d36 <xTaskGenericCreate+0x1de>
    2baa:	f1 e0       	ldi	r31, 0x01	; 1
    2bac:	af 1a       	sub	r10, r31
    2bae:	b1 08       	sbc	r11, r1
    2bb0:	f3 01       	movw	r30, r6
    2bb2:	87 89       	ldd	r24, Z+23	; 0x17
    2bb4:	90 8d       	ldd	r25, Z+24	; 0x18
    2bb6:	a8 0e       	add	r10, r24
    2bb8:	b9 1e       	adc	r11, r25
    2bba:	88 81       	ld	r24, Y
    2bbc:	81 8f       	std	Z+25, r24	; 0x19
    2bbe:	88 81       	ld	r24, Y
    2bc0:	88 23       	and	r24, r24
    2bc2:	81 f0       	breq	.+32     	; 0x2be4 <xTaskGenericCreate+0x8c>
    2bc4:	d3 01       	movw	r26, r6
    2bc6:	5a 96       	adiw	r26, 0x1a	; 26
    2bc8:	fe 01       	movw	r30, r28
    2bca:	31 96       	adiw	r30, 0x01	; 1
    2bcc:	9e 01       	movw	r18, r28
    2bce:	28 5f       	subi	r18, 0xF8	; 248
    2bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd2:	ef 01       	movw	r28, r30
    2bd4:	81 91       	ld	r24, Z+
    2bd6:	8d 93       	st	X+, r24
    2bd8:	88 81       	ld	r24, Y
    2bda:	88 23       	and	r24, r24
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <xTaskGenericCreate+0x8c>
    2bde:	e2 17       	cp	r30, r18
    2be0:	f3 07       	cpc	r31, r19
    2be2:	b9 f7       	brne	.-18     	; 0x2bd2 <xTaskGenericCreate+0x7a>
    2be4:	f3 01       	movw	r30, r6
    2be6:	10 a2       	std	Z+32, r1	; 0x20
    2be8:	10 2f       	mov	r17, r16
    2bea:	05 30       	cpi	r16, 0x05	; 5
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <xTaskGenericCreate+0x98>
    2bee:	14 e0       	ldi	r17, 0x04	; 4
    2bf0:	f3 01       	movw	r30, r6
    2bf2:	16 8b       	std	Z+22, r17	; 0x16
    2bf4:	e3 01       	movw	r28, r6
    2bf6:	22 96       	adiw	r28, 0x02	; 2
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	6e dd       	rcall	.-1316   	; 0x26d8 <vListInitialiseItem>
    2bfc:	c3 01       	movw	r24, r6
    2bfe:	0c 96       	adiw	r24, 0x0c	; 12
    2c00:	6b dd       	rcall	.-1322   	; 0x26d8 <vListInitialiseItem>
    2c02:	f3 01       	movw	r30, r6
    2c04:	60 86       	std	Z+8, r6	; 0x08
    2c06:	71 86       	std	Z+9, r7	; 0x09
    2c08:	85 e0       	ldi	r24, 0x05	; 5
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	81 1b       	sub	r24, r17
    2c0e:	91 09       	sbc	r25, r1
    2c10:	84 87       	std	Z+12, r24	; 0x0c
    2c12:	95 87       	std	Z+13, r25	; 0x0d
    2c14:	62 8a       	std	Z+18, r6	; 0x12
    2c16:	73 8a       	std	Z+19, r7	; 0x13
    2c18:	a2 01       	movw	r20, r4
    2c1a:	b4 01       	movw	r22, r8
    2c1c:	c5 01       	movw	r24, r10
    2c1e:	d8 dd       	rcall	.-1104   	; 0x27d0 <pxPortInitialiseStack>
    2c20:	f3 01       	movw	r30, r6
    2c22:	80 83       	st	Z, r24
    2c24:	91 83       	std	Z+1, r25	; 0x01
    2c26:	e1 14       	cp	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	19 f0       	breq	.+6      	; 0x2c32 <xTaskGenericCreate+0xda>
    2c2c:	f7 01       	movw	r30, r14
    2c2e:	60 82       	st	Z, r6
    2c30:	71 82       	std	Z+1, r7	; 0x01
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	0f 92       	push	r0
    2c38:	80 91 ed 23 	lds	r24, 0x23ED
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	80 93 ed 23 	sts	0x23ED, r24
    2c42:	80 91 3a 24 	lds	r24, 0x243A
    2c46:	90 91 3b 24 	lds	r25, 0x243B
    2c4a:	89 2b       	or	r24, r25
    2c4c:	91 f5       	brne	.+100    	; 0x2cb2 <xTaskGenericCreate+0x15a>
    2c4e:	60 92 3a 24 	sts	0x243A, r6
    2c52:	70 92 3b 24 	sts	0x243B, r7
    2c56:	80 91 ed 23 	lds	r24, 0x23ED
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	c9 f5       	brne	.+114    	; 0x2cd0 <xTaskGenericCreate+0x178>
    2c5e:	0f 2e       	mov	r0, r31
    2c60:	fd e0       	ldi	r31, 0x0D	; 13
    2c62:	ef 2e       	mov	r14, r31
    2c64:	f4 e2       	ldi	r31, 0x24	; 36
    2c66:	ff 2e       	mov	r15, r31
    2c68:	f0 2d       	mov	r31, r0
    2c6a:	0f 2e       	mov	r0, r31
    2c6c:	fa e3       	ldi	r31, 0x3A	; 58
    2c6e:	cf 2e       	mov	r12, r31
    2c70:	f4 e2       	ldi	r31, 0x24	; 36
    2c72:	df 2e       	mov	r13, r31
    2c74:	f0 2d       	mov	r31, r0
    2c76:	c7 01       	movw	r24, r14
    2c78:	21 dd       	rcall	.-1470   	; 0x26bc <vListInitialise>
    2c7a:	f9 e0       	ldi	r31, 0x09	; 9
    2c7c:	ef 0e       	add	r14, r31
    2c7e:	f1 1c       	adc	r15, r1
    2c80:	ec 14       	cp	r14, r12
    2c82:	fd 04       	cpc	r15, r13
    2c84:	c1 f7       	brne	.-16     	; 0x2c76 <xTaskGenericCreate+0x11e>
    2c86:	84 e0       	ldi	r24, 0x04	; 4
    2c88:	94 e2       	ldi	r25, 0x24	; 36
    2c8a:	18 dd       	rcall	.-1488   	; 0x26bc <vListInitialise>
    2c8c:	8b ef       	ldi	r24, 0xFB	; 251
    2c8e:	93 e2       	ldi	r25, 0x23	; 35
    2c90:	15 dd       	rcall	.-1494   	; 0x26bc <vListInitialise>
    2c92:	8e ee       	ldi	r24, 0xEE	; 238
    2c94:	93 e2       	ldi	r25, 0x23	; 35
    2c96:	12 dd       	rcall	.-1500   	; 0x26bc <vListInitialise>
    2c98:	84 e0       	ldi	r24, 0x04	; 4
    2c9a:	94 e2       	ldi	r25, 0x24	; 36
    2c9c:	80 93 f9 23 	sts	0x23F9, r24
    2ca0:	90 93 fa 23 	sts	0x23FA, r25
    2ca4:	8b ef       	ldi	r24, 0xFB	; 251
    2ca6:	93 e2       	ldi	r25, 0x23	; 35
    2ca8:	80 93 f7 23 	sts	0x23F7, r24
    2cac:	90 93 f8 23 	sts	0x23F8, r25
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <xTaskGenericCreate+0x178>
    2cb2:	80 91 e9 23 	lds	r24, 0x23E9
    2cb6:	81 11       	cpse	r24, r1
    2cb8:	0b c0       	rjmp	.+22     	; 0x2cd0 <xTaskGenericCreate+0x178>
    2cba:	e0 91 3a 24 	lds	r30, 0x243A
    2cbe:	f0 91 3b 24 	lds	r31, 0x243B
    2cc2:	86 89       	ldd	r24, Z+22	; 0x16
    2cc4:	08 17       	cp	r16, r24
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <xTaskGenericCreate+0x178>
    2cc8:	60 92 3a 24 	sts	0x243A, r6
    2ccc:	70 92 3b 24 	sts	0x243B, r7
    2cd0:	80 91 e5 23 	lds	r24, 0x23E5
    2cd4:	8f 5f       	subi	r24, 0xFF	; 255
    2cd6:	80 93 e5 23 	sts	0x23E5, r24
    2cda:	f3 01       	movw	r30, r6
    2cdc:	86 89       	ldd	r24, Z+22	; 0x16
    2cde:	90 91 ea 23 	lds	r25, 0x23EA
    2ce2:	98 17       	cp	r25, r24
    2ce4:	10 f4       	brcc	.+4      	; 0x2cea <xTaskGenericCreate+0x192>
    2ce6:	80 93 ea 23 	sts	0x23EA, r24
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9c 01       	movw	r18, r24
    2cee:	22 0f       	add	r18, r18
    2cf0:	33 1f       	adc	r19, r19
    2cf2:	22 0f       	add	r18, r18
    2cf4:	33 1f       	adc	r19, r19
    2cf6:	22 0f       	add	r18, r18
    2cf8:	33 1f       	adc	r19, r19
    2cfa:	82 0f       	add	r24, r18
    2cfc:	93 1f       	adc	r25, r19
    2cfe:	be 01       	movw	r22, r28
    2d00:	83 5f       	subi	r24, 0xF3	; 243
    2d02:	9b 4d       	sbci	r25, 0xDB	; 219
    2d04:	ed dc       	rcall	.-1574   	; 0x26e0 <vListInsertEnd>
    2d06:	0f 90       	pop	r0
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	80 91 e9 23 	lds	r24, 0x23E9
    2d0e:	88 23       	and	r24, r24
    2d10:	51 f0       	breq	.+20     	; 0x2d26 <xTaskGenericCreate+0x1ce>
    2d12:	e0 91 3a 24 	lds	r30, 0x243A
    2d16:	f0 91 3b 24 	lds	r31, 0x243B
    2d1a:	86 89       	ldd	r24, Z+22	; 0x16
    2d1c:	80 17       	cp	r24, r16
    2d1e:	28 f4       	brcc	.+10     	; 0x2d2a <xTaskGenericCreate+0x1d2>
    2d20:	13 de       	rcall	.-986    	; 0x2948 <vPortYield>
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	09 c0       	rjmp	.+18     	; 0x2d38 <xTaskGenericCreate+0x1e0>
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <xTaskGenericCreate+0x1e0>
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	05 c0       	rjmp	.+10     	; 0x2d38 <xTaskGenericCreate+0x1e0>
    2d2e:	fc 01       	movw	r30, r24
    2d30:	c7 8a       	std	Z+23, r12	; 0x17
    2d32:	d0 8e       	std	Z+24, r13	; 0x18
    2d34:	3a cf       	rjmp	.-396    	; 0x2baa <xTaskGenericCreate+0x52>
    2d36:	8f ef       	ldi	r24, 0xFF	; 255
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	df 90       	pop	r13
    2d46:	cf 90       	pop	r12
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	7f 90       	pop	r7
    2d52:	6f 90       	pop	r6
    2d54:	5f 90       	pop	r5
    2d56:	4f 90       	pop	r4
    2d58:	08 95       	ret

00002d5a <vTaskStartScheduler>:
    2d5a:	af 92       	push	r10
    2d5c:	bf 92       	push	r11
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	a1 2c       	mov	r10, r1
    2d6a:	b1 2c       	mov	r11, r1
    2d6c:	c1 2c       	mov	r12, r1
    2d6e:	d1 2c       	mov	r13, r1
    2d70:	e1 2c       	mov	r14, r1
    2d72:	f1 2c       	mov	r15, r1
    2d74:	00 e0       	ldi	r16, 0x00	; 0
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	45 e5       	ldi	r20, 0x55	; 85
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
    2d7e:	60 e1       	ldi	r22, 0x10	; 16
    2d80:	70 e2       	ldi	r23, 0x20	; 32
    2d82:	80 e7       	ldi	r24, 0x70	; 112
    2d84:	95 e1       	ldi	r25, 0x15	; 21
    2d86:	e8 de       	rcall	.-560    	; 0x2b58 <xTaskGenericCreate>
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	41 f4       	brne	.+16     	; 0x2d9c <vTaskStartScheduler+0x42>
    2d8c:	f8 94       	cli
    2d8e:	80 93 e9 23 	sts	0x23E9, r24
    2d92:	10 92 eb 23 	sts	0x23EB, r1
    2d96:	10 92 ec 23 	sts	0x23EC, r1
    2d9a:	91 dd       	rcall	.-1246   	; 0x28be <xPortStartScheduler>
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	bf 90       	pop	r11
    2da8:	af 90       	pop	r10
    2daa:	08 95       	ret

00002dac <vTaskSuspendAll>:
    2dac:	80 91 e4 23 	lds	r24, 0x23E4
    2db0:	8f 5f       	subi	r24, 0xFF	; 255
    2db2:	80 93 e4 23 	sts	0x23E4, r24
    2db6:	08 95       	ret

00002db8 <xTaskIncrementTick>:
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	80 91 e4 23 	lds	r24, 0x23E4
    2dca:	81 11       	cpse	r24, r1
    2dcc:	b3 c0       	rjmp	.+358    	; 0x2f34 <xTaskIncrementTick+0x17c>
    2dce:	80 91 eb 23 	lds	r24, 0x23EB
    2dd2:	90 91 ec 23 	lds	r25, 0x23EC
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	80 93 eb 23 	sts	0x23EB, r24
    2ddc:	90 93 ec 23 	sts	0x23EC, r25
    2de0:	e0 90 eb 23 	lds	r14, 0x23EB
    2de4:	f0 90 ec 23 	lds	r15, 0x23EC
    2de8:	e1 14       	cp	r14, r1
    2dea:	f1 04       	cpc	r15, r1
    2dec:	99 f5       	brne	.+102    	; 0x2e54 <xTaskIncrementTick+0x9c>
    2dee:	80 91 f9 23 	lds	r24, 0x23F9
    2df2:	90 91 fa 23 	lds	r25, 0x23FA
    2df6:	20 91 f7 23 	lds	r18, 0x23F7
    2dfa:	30 91 f8 23 	lds	r19, 0x23F8
    2dfe:	20 93 f9 23 	sts	0x23F9, r18
    2e02:	30 93 fa 23 	sts	0x23FA, r19
    2e06:	80 93 f7 23 	sts	0x23F7, r24
    2e0a:	90 93 f8 23 	sts	0x23F8, r25
    2e0e:	80 91 e6 23 	lds	r24, 0x23E6
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	80 93 e6 23 	sts	0x23E6, r24
    2e18:	e0 91 f9 23 	lds	r30, 0x23F9
    2e1c:	f0 91 fa 23 	lds	r31, 0x23FA
    2e20:	80 81       	ld	r24, Z
    2e22:	81 11       	cpse	r24, r1
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <xTaskIncrementTick+0x7c>
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	9f ef       	ldi	r25, 0xFF	; 255
    2e2a:	80 93 0e 20 	sts	0x200E, r24
    2e2e:	90 93 0f 20 	sts	0x200F, r25
    2e32:	10 c0       	rjmp	.+32     	; 0x2e54 <xTaskIncrementTick+0x9c>
    2e34:	e0 91 f9 23 	lds	r30, 0x23F9
    2e38:	f0 91 fa 23 	lds	r31, 0x23FA
    2e3c:	05 80       	ldd	r0, Z+5	; 0x05
    2e3e:	f6 81       	ldd	r31, Z+6	; 0x06
    2e40:	e0 2d       	mov	r30, r0
    2e42:	06 80       	ldd	r0, Z+6	; 0x06
    2e44:	f7 81       	ldd	r31, Z+7	; 0x07
    2e46:	e0 2d       	mov	r30, r0
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	80 93 0e 20 	sts	0x200E, r24
    2e50:	90 93 0f 20 	sts	0x200F, r25
    2e54:	80 91 0e 20 	lds	r24, 0x200E
    2e58:	90 91 0f 20 	lds	r25, 0x200F
    2e5c:	e8 16       	cp	r14, r24
    2e5e:	f9 06       	cpc	r15, r25
    2e60:	10 f4       	brcc	.+4      	; 0x2e66 <xTaskIncrementTick+0xae>
    2e62:	d1 2c       	mov	r13, r1
    2e64:	4f c0       	rjmp	.+158    	; 0x2f04 <xTaskIncrementTick+0x14c>
    2e66:	d1 2c       	mov	r13, r1
    2e68:	e0 91 f9 23 	lds	r30, 0x23F9
    2e6c:	f0 91 fa 23 	lds	r31, 0x23FA
    2e70:	90 81       	ld	r25, Z
    2e72:	91 11       	cpse	r25, r1
    2e74:	07 c0       	rjmp	.+14     	; 0x2e84 <xTaskIncrementTick+0xcc>
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	9f ef       	ldi	r25, 0xFF	; 255
    2e7a:	80 93 0e 20 	sts	0x200E, r24
    2e7e:	90 93 0f 20 	sts	0x200F, r25
    2e82:	40 c0       	rjmp	.+128    	; 0x2f04 <xTaskIncrementTick+0x14c>
    2e84:	e0 91 f9 23 	lds	r30, 0x23F9
    2e88:	f0 91 fa 23 	lds	r31, 0x23FA
    2e8c:	05 80       	ldd	r0, Z+5	; 0x05
    2e8e:	f6 81       	ldd	r31, Z+6	; 0x06
    2e90:	e0 2d       	mov	r30, r0
    2e92:	c6 81       	ldd	r28, Z+6	; 0x06
    2e94:	d7 81       	ldd	r29, Z+7	; 0x07
    2e96:	2a 81       	ldd	r18, Y+2	; 0x02
    2e98:	3b 81       	ldd	r19, Y+3	; 0x03
    2e9a:	e2 16       	cp	r14, r18
    2e9c:	f3 06       	cpc	r15, r19
    2e9e:	28 f4       	brcc	.+10     	; 0x2eaa <xTaskIncrementTick+0xf2>
    2ea0:	20 93 0e 20 	sts	0x200E, r18
    2ea4:	30 93 0f 20 	sts	0x200F, r19
    2ea8:	2d c0       	rjmp	.+90     	; 0x2f04 <xTaskIncrementTick+0x14c>
    2eaa:	8e 01       	movw	r16, r28
    2eac:	0e 5f       	subi	r16, 0xFE	; 254
    2eae:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb0:	c8 01       	movw	r24, r16
    2eb2:	68 dc       	rcall	.-1840   	; 0x2784 <uxListRemove>
    2eb4:	8c 89       	ldd	r24, Y+20	; 0x14
    2eb6:	9d 89       	ldd	r25, Y+21	; 0x15
    2eb8:	89 2b       	or	r24, r25
    2eba:	19 f0       	breq	.+6      	; 0x2ec2 <xTaskIncrementTick+0x10a>
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	0c 96       	adiw	r24, 0x0c	; 12
    2ec0:	61 dc       	rcall	.-1854   	; 0x2784 <uxListRemove>
    2ec2:	2e 89       	ldd	r18, Y+22	; 0x16
    2ec4:	80 91 ea 23 	lds	r24, 0x23EA
    2ec8:	82 17       	cp	r24, r18
    2eca:	10 f4       	brcc	.+4      	; 0x2ed0 <xTaskIncrementTick+0x118>
    2ecc:	20 93 ea 23 	sts	0x23EA, r18
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	c9 01       	movw	r24, r18
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	82 0f       	add	r24, r18
    2ee2:	93 1f       	adc	r25, r19
    2ee4:	b8 01       	movw	r22, r16
    2ee6:	83 5f       	subi	r24, 0xF3	; 243
    2ee8:	9b 4d       	sbci	r25, 0xDB	; 219
    2eea:	fa db       	rcall	.-2060   	; 0x26e0 <vListInsertEnd>
    2eec:	e0 91 3a 24 	lds	r30, 0x243A
    2ef0:	f0 91 3b 24 	lds	r31, 0x243B
    2ef4:	9e 89       	ldd	r25, Y+22	; 0x16
    2ef6:	86 89       	ldd	r24, Z+22	; 0x16
    2ef8:	98 17       	cp	r25, r24
    2efa:	08 f4       	brcc	.+2      	; 0x2efe <xTaskIncrementTick+0x146>
    2efc:	b5 cf       	rjmp	.-150    	; 0x2e68 <xTaskIncrementTick+0xb0>
    2efe:	dd 24       	eor	r13, r13
    2f00:	d3 94       	inc	r13
    2f02:	b2 cf       	rjmp	.-156    	; 0x2e68 <xTaskIncrementTick+0xb0>
    2f04:	e0 91 3a 24 	lds	r30, 0x243A
    2f08:	f0 91 3b 24 	lds	r31, 0x243B
    2f0c:	86 89       	ldd	r24, Z+22	; 0x16
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	fc 01       	movw	r30, r24
    2f12:	ee 0f       	add	r30, r30
    2f14:	ff 1f       	adc	r31, r31
    2f16:	ee 0f       	add	r30, r30
    2f18:	ff 1f       	adc	r31, r31
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	ff 1f       	adc	r31, r31
    2f1e:	8e 0f       	add	r24, r30
    2f20:	9f 1f       	adc	r25, r31
    2f22:	fc 01       	movw	r30, r24
    2f24:	e3 5f       	subi	r30, 0xF3	; 243
    2f26:	fb 4d       	sbci	r31, 0xDB	; 219
    2f28:	80 81       	ld	r24, Z
    2f2a:	82 30       	cpi	r24, 0x02	; 2
    2f2c:	48 f0       	brcs	.+18     	; 0x2f40 <xTaskIncrementTick+0x188>
    2f2e:	dd 24       	eor	r13, r13
    2f30:	d3 94       	inc	r13
    2f32:	06 c0       	rjmp	.+12     	; 0x2f40 <xTaskIncrementTick+0x188>
    2f34:	80 91 e8 23 	lds	r24, 0x23E8
    2f38:	8f 5f       	subi	r24, 0xFF	; 255
    2f3a:	80 93 e8 23 	sts	0x23E8, r24
    2f3e:	d1 2c       	mov	r13, r1
    2f40:	80 91 e7 23 	lds	r24, 0x23E7
    2f44:	88 23       	and	r24, r24
    2f46:	11 f0       	breq	.+4      	; 0x2f4c <xTaskIncrementTick+0x194>
    2f48:	dd 24       	eor	r13, r13
    2f4a:	d3 94       	inc	r13
    2f4c:	8d 2d       	mov	r24, r13
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	ff 90       	pop	r15
    2f58:	ef 90       	pop	r14
    2f5a:	df 90       	pop	r13
    2f5c:	08 95       	ret

00002f5e <xTaskResumeAll>:
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	0f 93       	push	r16
    2f66:	1f 93       	push	r17
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	0f 92       	push	r0
    2f72:	80 91 e4 23 	lds	r24, 0x23E4
    2f76:	81 50       	subi	r24, 0x01	; 1
    2f78:	80 93 e4 23 	sts	0x23E4, r24
    2f7c:	80 91 e4 23 	lds	r24, 0x23E4
    2f80:	81 11       	cpse	r24, r1
    2f82:	5d c0       	rjmp	.+186    	; 0x303e <xTaskResumeAll+0xe0>
    2f84:	80 91 ed 23 	lds	r24, 0x23ED
    2f88:	81 11       	cpse	r24, r1
    2f8a:	30 c0       	rjmp	.+96     	; 0x2fec <xTaskResumeAll+0x8e>
    2f8c:	5b c0       	rjmp	.+182    	; 0x3044 <xTaskResumeAll+0xe6>
    2f8e:	d7 01       	movw	r26, r14
    2f90:	15 96       	adiw	r26, 0x05	; 5
    2f92:	ed 91       	ld	r30, X+
    2f94:	fc 91       	ld	r31, X
    2f96:	16 97       	sbiw	r26, 0x06	; 6
    2f98:	c6 81       	ldd	r28, Z+6	; 0x06
    2f9a:	d7 81       	ldd	r29, Z+7	; 0x07
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	0c 96       	adiw	r24, 0x0c	; 12
    2fa0:	f1 db       	rcall	.-2078   	; 0x2784 <uxListRemove>
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	0e 5f       	subi	r16, 0xFE	; 254
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	c8 01       	movw	r24, r16
    2faa:	ec db       	rcall	.-2088   	; 0x2784 <uxListRemove>
    2fac:	2e 89       	ldd	r18, Y+22	; 0x16
    2fae:	80 91 ea 23 	lds	r24, 0x23EA
    2fb2:	82 17       	cp	r24, r18
    2fb4:	10 f4       	brcc	.+4      	; 0x2fba <xTaskResumeAll+0x5c>
    2fb6:	20 93 ea 23 	sts	0x23EA, r18
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	c9 01       	movw	r24, r18
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	88 0f       	add	r24, r24
    2fc4:	99 1f       	adc	r25, r25
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	82 0f       	add	r24, r18
    2fcc:	93 1f       	adc	r25, r19
    2fce:	b8 01       	movw	r22, r16
    2fd0:	83 5f       	subi	r24, 0xF3	; 243
    2fd2:	9b 4d       	sbci	r25, 0xDB	; 219
    2fd4:	85 db       	rcall	.-2294   	; 0x26e0 <vListInsertEnd>
    2fd6:	e0 91 3a 24 	lds	r30, 0x243A
    2fda:	f0 91 3b 24 	lds	r31, 0x243B
    2fde:	9e 89       	ldd	r25, Y+22	; 0x16
    2fe0:	86 89       	ldd	r24, Z+22	; 0x16
    2fe2:	98 17       	cp	r25, r24
    2fe4:	58 f0       	brcs	.+22     	; 0x2ffc <xTaskResumeAll+0x9e>
    2fe6:	d0 92 e7 23 	sts	0x23E7, r13
    2fea:	08 c0       	rjmp	.+16     	; 0x2ffc <xTaskResumeAll+0x9e>
    2fec:	0f 2e       	mov	r0, r31
    2fee:	fe ee       	ldi	r31, 0xEE	; 238
    2ff0:	ef 2e       	mov	r14, r31
    2ff2:	f3 e2       	ldi	r31, 0x23	; 35
    2ff4:	ff 2e       	mov	r15, r31
    2ff6:	f0 2d       	mov	r31, r0
    2ff8:	dd 24       	eor	r13, r13
    2ffa:	d3 94       	inc	r13
    2ffc:	f7 01       	movw	r30, r14
    2ffe:	80 81       	ld	r24, Z
    3000:	81 11       	cpse	r24, r1
    3002:	c5 cf       	rjmp	.-118    	; 0x2f8e <xTaskResumeAll+0x30>
    3004:	80 91 e8 23 	lds	r24, 0x23E8
    3008:	88 23       	and	r24, r24
    300a:	91 f0       	breq	.+36     	; 0x3030 <xTaskResumeAll+0xd2>
    300c:	80 91 e8 23 	lds	r24, 0x23E8
    3010:	88 23       	and	r24, r24
    3012:	71 f0       	breq	.+28     	; 0x3030 <xTaskResumeAll+0xd2>
    3014:	c1 e0       	ldi	r28, 0x01	; 1
    3016:	d0 de       	rcall	.-608    	; 0x2db8 <xTaskIncrementTick>
    3018:	81 11       	cpse	r24, r1
    301a:	c0 93 e7 23 	sts	0x23E7, r28
    301e:	80 91 e8 23 	lds	r24, 0x23E8
    3022:	81 50       	subi	r24, 0x01	; 1
    3024:	80 93 e8 23 	sts	0x23E8, r24
    3028:	80 91 e8 23 	lds	r24, 0x23E8
    302c:	81 11       	cpse	r24, r1
    302e:	f3 cf       	rjmp	.-26     	; 0x3016 <xTaskResumeAll+0xb8>
    3030:	80 91 e7 23 	lds	r24, 0x23E7
    3034:	81 30       	cpi	r24, 0x01	; 1
    3036:	29 f4       	brne	.+10     	; 0x3042 <xTaskResumeAll+0xe4>
    3038:	87 dc       	rcall	.-1778   	; 0x2948 <vPortYield>
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	03 c0       	rjmp	.+6      	; 0x3044 <xTaskResumeAll+0xe6>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <xTaskResumeAll+0xe6>
    3042:	80 e0       	ldi	r24, 0x00	; 0
    3044:	0f 90       	pop	r0
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	08 95       	ret

00003058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3058:	cf 93       	push	r28
    305a:	df 93       	push	r29
    305c:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    305e:	89 2b       	or	r24, r25
    3060:	91 f0       	breq	.+36     	; 0x3086 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3062:	a4 de       	rcall	.-696    	; 0x2dac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3064:	80 91 eb 23 	lds	r24, 0x23EB
    3068:	90 91 ec 23 	lds	r25, 0x23EC
    306c:	c8 0f       	add	r28, r24
    306e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    3070:	80 91 3a 24 	lds	r24, 0x243A
    3074:	90 91 3b 24 	lds	r25, 0x243B
    3078:	02 96       	adiw	r24, 0x02	; 2
    307a:	84 db       	rcall	.-2296   	; 0x2784 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    307c:	ce 01       	movw	r24, r28
    307e:	37 dd       	rcall	.-1426   	; 0x2aee <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3080:	6e df       	rcall	.-292    	; 0x2f5e <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3082:	81 11       	cpse	r24, r1
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    3086:	60 dc       	rcall	.-1856   	; 0x2948 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    308e:	80 91 e4 23 	lds	r24, 0x23E4
    3092:	88 23       	and	r24, r24
    3094:	21 f0       	breq	.+8      	; 0x309e <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 e7 23 	sts	0x23E7, r24
    309c:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    309e:	10 92 e7 23 	sts	0x23E7, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    30a2:	80 91 ea 23 	lds	r24, 0x23EA
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	fc 01       	movw	r30, r24
    30aa:	ee 0f       	add	r30, r30
    30ac:	ff 1f       	adc	r31, r31
    30ae:	ee 0f       	add	r30, r30
    30b0:	ff 1f       	adc	r31, r31
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	8e 0f       	add	r24, r30
    30b8:	9f 1f       	adc	r25, r31
    30ba:	fc 01       	movw	r30, r24
    30bc:	e3 5f       	subi	r30, 0xF3	; 243
    30be:	fb 4d       	sbci	r31, 0xDB	; 219
    30c0:	80 81       	ld	r24, Z
    30c2:	81 11       	cpse	r24, r1
    30c4:	17 c0       	rjmp	.+46     	; 0x30f4 <vTaskSwitchContext+0x66>
    30c6:	80 91 ea 23 	lds	r24, 0x23EA
    30ca:	81 50       	subi	r24, 0x01	; 1
    30cc:	80 93 ea 23 	sts	0x23EA, r24
    30d0:	80 91 ea 23 	lds	r24, 0x23EA
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	fc 01       	movw	r30, r24
    30d8:	ee 0f       	add	r30, r30
    30da:	ff 1f       	adc	r31, r31
    30dc:	ee 0f       	add	r30, r30
    30de:	ff 1f       	adc	r31, r31
    30e0:	ee 0f       	add	r30, r30
    30e2:	ff 1f       	adc	r31, r31
    30e4:	8e 0f       	add	r24, r30
    30e6:	9f 1f       	adc	r25, r31
    30e8:	fc 01       	movw	r30, r24
    30ea:	e3 5f       	subi	r30, 0xF3	; 243
    30ec:	fb 4d       	sbci	r31, 0xDB	; 219
    30ee:	80 81       	ld	r24, Z
    30f0:	88 23       	and	r24, r24
    30f2:	49 f3       	breq	.-46     	; 0x30c6 <vTaskSwitchContext+0x38>
    30f4:	80 91 ea 23 	lds	r24, 0x23EA
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9c 01       	movw	r18, r24
    30fc:	22 0f       	add	r18, r18
    30fe:	33 1f       	adc	r19, r19
    3100:	22 0f       	add	r18, r18
    3102:	33 1f       	adc	r19, r19
    3104:	22 0f       	add	r18, r18
    3106:	33 1f       	adc	r19, r19
    3108:	28 0f       	add	r18, r24
    310a:	39 1f       	adc	r19, r25
    310c:	d9 01       	movw	r26, r18
    310e:	a3 5f       	subi	r26, 0xF3	; 243
    3110:	bb 4d       	sbci	r27, 0xDB	; 219
    3112:	11 96       	adiw	r26, 0x01	; 1
    3114:	ed 91       	ld	r30, X+
    3116:	fc 91       	ld	r31, X
    3118:	12 97       	sbiw	r26, 0x02	; 2
    311a:	02 80       	ldd	r0, Z+2	; 0x02
    311c:	f3 81       	ldd	r31, Z+3	; 0x03
    311e:	e0 2d       	mov	r30, r0
    3120:	11 96       	adiw	r26, 0x01	; 1
    3122:	ed 93       	st	X+, r30
    3124:	fc 93       	st	X, r31
    3126:	12 97       	sbiw	r26, 0x02	; 2
    3128:	20 5f       	subi	r18, 0xF0	; 240
    312a:	3b 4d       	sbci	r19, 0xDB	; 219
    312c:	e2 17       	cp	r30, r18
    312e:	f3 07       	cpc	r31, r19
    3130:	29 f4       	brne	.+10     	; 0x313c <vTaskSwitchContext+0xae>
    3132:	22 81       	ldd	r18, Z+2	; 0x02
    3134:	33 81       	ldd	r19, Z+3	; 0x03
    3136:	fd 01       	movw	r30, r26
    3138:	21 83       	std	Z+1, r18	; 0x01
    313a:	32 83       	std	Z+2, r19	; 0x02
    313c:	fc 01       	movw	r30, r24
    313e:	ee 0f       	add	r30, r30
    3140:	ff 1f       	adc	r31, r31
    3142:	ee 0f       	add	r30, r30
    3144:	ff 1f       	adc	r31, r31
    3146:	ee 0f       	add	r30, r30
    3148:	ff 1f       	adc	r31, r31
    314a:	8e 0f       	add	r24, r30
    314c:	9f 1f       	adc	r25, r31
    314e:	fc 01       	movw	r30, r24
    3150:	e3 5f       	subi	r30, 0xF3	; 243
    3152:	fb 4d       	sbci	r31, 0xDB	; 219
    3154:	01 80       	ldd	r0, Z+1	; 0x01
    3156:	f2 81       	ldd	r31, Z+2	; 0x02
    3158:	e0 2d       	mov	r30, r0
    315a:	86 81       	ldd	r24, Z+6	; 0x06
    315c:	97 81       	ldd	r25, Z+7	; 0x07
    315e:	80 93 3a 24 	sts	0x243A, r24
    3162:	90 93 3b 24 	sts	0x243B, r25
    3166:	08 95       	ret

00003168 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    3168:	8f ef       	ldi	r24, 0xFF	; 255
    316a:	80 93 70 00 	sts	0x0070, r24
    316e:	80 93 71 00 	sts	0x0071, r24
    3172:	80 93 72 00 	sts	0x0072, r24
    3176:	80 93 73 00 	sts	0x0073, r24
    317a:	80 93 74 00 	sts	0x0074, r24
    317e:	80 93 75 00 	sts	0x0075, r24
    3182:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3186:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3188:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    318a:	e0 e5       	ldi	r30, 0x50	; 80
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3194:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    3196:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    3198:	81 ff       	sbrs	r24, 1
    319a:	fd cf       	rjmp	.-6      	; 0x3196 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    319c:	61 e0       	ldi	r22, 0x01	; 1
    319e:	80 e4       	ldi	r24, 0x40	; 64
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	83 d0       	rcall	.+262    	; 0x32aa <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    31a4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    31a6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    31a8:	e0 e5       	ldi	r30, 0x50	; 80
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8e 7f       	andi	r24, 0xFE	; 254
    31b0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31b2:	9f bf       	out	0x3f, r25	; 63
    31b4:	08 95       	ret

000031b6 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    31b6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    31b8:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    31ba:	e8 2f       	mov	r30, r24
    31bc:	f0 e0       	ldi	r31, 0x00	; 0
    31be:	e0 59       	subi	r30, 0x90	; 144
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 95       	com	r22
    31c4:	80 81       	ld	r24, Z
    31c6:	68 23       	and	r22, r24
    31c8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31ca:	9f bf       	out	0x3f, r25	; 63
    31cc:	08 95       	ret

000031ce <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    31ce:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    31d0:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    31d2:	e8 2f       	mov	r30, r24
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	e0 59       	subi	r30, 0x90	; 144
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	80 81       	ld	r24, Z
    31dc:	68 2b       	or	r22, r24
    31de:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    31e0:	9f bf       	out	0x3f, r25	; 63
    31e2:	08 95       	ret

000031e4 <nvm_eeprom_read_byte>:
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
	eeprom_disable_mapping();
}
    31e4:	dc 01       	movw	r26, r24
    31e6:	e0 ec       	ldi	r30, 0xC0	; 192
    31e8:	f1 e0       	ldi	r31, 0x01	; 1
    31ea:	97 85       	ldd	r25, Z+15	; 0x0f
    31ec:	99 23       	and	r25, r25
    31ee:	ec f3       	brlt	.-6      	; 0x31ea <nvm_eeprom_read_byte+0x6>
    31f0:	ec ec       	ldi	r30, 0xCC	; 204
    31f2:	f1 e0       	ldi	r31, 0x01	; 1
    31f4:	80 81       	ld	r24, Z
    31f6:	88 60       	ori	r24, 0x08	; 8
    31f8:	80 83       	st	Z, r24
    31fa:	b0 5f       	subi	r27, 0xF0	; 240
    31fc:	8c 91       	ld	r24, X
    31fe:	90 81       	ld	r25, Z
    3200:	97 7f       	andi	r25, 0xF7	; 247
    3202:	90 83       	st	Z, r25
    3204:	08 95       	ret

00003206 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3206:	e0 ec       	ldi	r30, 0xC0	; 192
    3208:	f1 e0       	ldi	r31, 0x01	; 1
    320a:	87 85       	ldd	r24, Z+15	; 0x0f
    320c:	88 23       	and	r24, r24
    320e:	ec f3       	brlt	.-6      	; 0x320a <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3210:	80 91 cf 01 	lds	r24, 0x01CF
    3214:	81 ff       	sbrs	r24, 1
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3218:	86 e3       	ldi	r24, 0x36	; 54
    321a:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	8b ec       	ldi	r24, 0xCB	; 203
    3222:	91 e0       	ldi	r25, 0x01	; 1
    3224:	42 c0       	rjmp	.+132    	; 0x32aa <ccp_write_io>
    3226:	08 95       	ret

00003228 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3228:	e0 ec       	ldi	r30, 0xC0	; 192
    322a:	f1 e0       	ldi	r31, 0x01	; 1
    322c:	97 85       	ldd	r25, Z+15	; 0x0f
    322e:	99 23       	and	r25, r25
    3230:	ec f3       	brlt	.-6      	; 0x322c <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    3232:	ac ec       	ldi	r26, 0xCC	; 204
    3234:	b1 e0       	ldi	r27, 0x01	; 1
    3236:	9c 91       	ld	r25, X
    3238:	98 60       	ori	r25, 0x08	; 8
    323a:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    323c:	e8 2f       	mov	r30, r24
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	f0 5f       	subi	r31, 0xF0	; 240
    3242:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    3244:	8c 91       	ld	r24, X
    3246:	87 7f       	andi	r24, 0xF7	; 247
    3248:	8c 93       	st	X, r24
    324a:	08 95       	ret

0000324c <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	18 2f       	mov	r17, r24
    3258:	f9 2e       	mov	r15, r25
    325a:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    325c:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    3260:	d2 df       	rcall	.-92     	; 0x3206 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3262:	e0 ec       	ldi	r30, 0xC0	; 192
    3264:	f1 e0       	ldi	r31, 0x01	; 1
    3266:	27 85       	ldd	r18, Z+15	; 0x0f
    3268:	22 23       	and	r18, r18
    326a:	ec f3       	brlt	.-6      	; 0x3266 <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    326c:	6c 2f       	mov	r22, r28
    326e:	81 2f       	mov	r24, r17
    3270:	db df       	rcall	.-74     	; 0x3228 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    3272:	c0 ec       	ldi	r28, 0xC0	; 192
    3274:	d1 e0       	ldi	r29, 0x01	; 1
    3276:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    3278:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    327a:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    327c:	85 e3       	ldi	r24, 0x35	; 53
    327e:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3280:	61 e0       	ldi	r22, 0x01	; 1
    3282:	8b ec       	ldi	r24, 0xCB	; 203
    3284:	91 e0       	ldi	r25, 0x01	; 1
    3286:	11 d0       	rcall	.+34     	; 0x32aa <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    3288:	0a 87       	std	Y+10, r16	; 0x0a
}
    328a:	df 91       	pop	r29
    328c:	cf 91       	pop	r28
    328e:	1f 91       	pop	r17
    3290:	0f 91       	pop	r16
    3292:	ff 90       	pop	r15
    3294:	08 95       	ret

00003296 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3296:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    329a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    329c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    329e:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    32a2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    32a4:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    32a8:	08 95       	ret

000032aa <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    32aa:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    32ac:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    32ae:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    32b0:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    32b2:	60 83       	st	Z, r22
	ret                             // Return to caller
    32b4:	08 95       	ret

000032b6 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    32b6:	cf 93       	push	r28
    32b8:	df 93       	push	r29
    32ba:	fc 01       	movw	r30, r24
    32bc:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    32c2:	c6 2f       	mov	r28, r22
    32c4:	d0 e0       	ldi	r29, 0x00	; 0
    32c6:	de 01       	movw	r26, r28
    32c8:	02 2e       	mov	r0, r18
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <ioport_configure_port_pin+0x1a>
    32cc:	b5 95       	asr	r27
    32ce:	a7 95       	ror	r26
    32d0:	0a 94       	dec	r0
    32d2:	e2 f7       	brpl	.-8      	; 0x32cc <ioport_configure_port_pin+0x16>
    32d4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    32d6:	50 83       	st	Z, r21
    32d8:	2f 5f       	subi	r18, 0xFF	; 255
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
    32dc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    32de:	28 30       	cpi	r18, 0x08	; 8
    32e0:	31 05       	cpc	r19, r1
    32e2:	89 f7       	brne	.-30     	; 0x32c6 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    32e4:	40 ff       	sbrs	r20, 0
    32e6:	0a c0       	rjmp	.+20     	; 0x32fc <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    32e8:	41 ff       	sbrs	r20, 1
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    32ec:	fc 01       	movw	r30, r24
    32ee:	65 83       	std	Z+5, r22	; 0x05
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    32f2:	fc 01       	movw	r30, r24
    32f4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    32f6:	fc 01       	movw	r30, r24
    32f8:	61 83       	std	Z+1, r22	; 0x01
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    32fc:	fc 01       	movw	r30, r24
    32fe:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3300:	df 91       	pop	r29
    3302:	cf 91       	pop	r28
    3304:	08 95       	ret

00003306 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    3306:	43 e0       	ldi	r20, 0x03	; 3
    3308:	50 e0       	ldi	r21, 0x00	; 0
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	80 ee       	ldi	r24, 0xE0	; 224
    330e:	97 e0       	ldi	r25, 0x07	; 7
    3310:	d2 df       	rcall	.-92     	; 0x32b6 <ioport_configure_port_pin>
    3312:	43 e0       	ldi	r20, 0x03	; 3
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	62 e0       	ldi	r22, 0x02	; 2
    3318:	80 ee       	ldi	r24, 0xE0	; 224
    331a:	97 e0       	ldi	r25, 0x07	; 7
    331c:	cc df       	rcall	.-104    	; 0x32b6 <ioport_configure_port_pin>
    331e:	43 e0       	ldi	r20, 0x03	; 3
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	60 e1       	ldi	r22, 0x10	; 16
    3324:	80 e6       	ldi	r24, 0x60	; 96
    3326:	96 e0       	ldi	r25, 0x06	; 6
    3328:	c6 df       	rcall	.-116    	; 0x32b6 <ioport_configure_port_pin>
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	50 e4       	ldi	r21, 0x40	; 64
    332e:	60 e2       	ldi	r22, 0x20	; 32
    3330:	80 e6       	ldi	r24, 0x60	; 96
    3332:	96 e0       	ldi	r25, 0x06	; 6
    3334:	c0 df       	rcall	.-128    	; 0x32b6 <ioport_configure_port_pin>
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	5b e1       	ldi	r21, 0x1B	; 27
    333a:	60 e2       	ldi	r22, 0x20	; 32
    333c:	80 e8       	ldi	r24, 0x80	; 128
    333e:	96 e0       	ldi	r25, 0x06	; 6
    3340:	ba df       	rcall	.-140    	; 0x32b6 <ioport_configure_port_pin>
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	5b e1       	ldi	r21, 0x1B	; 27
    3346:	62 e0       	ldi	r22, 0x02	; 2
    3348:	80 ea       	ldi	r24, 0xA0	; 160
    334a:	96 e0       	ldi	r25, 0x06	; 6
    334c:	b4 df       	rcall	.-152    	; 0x32b6 <ioport_configure_port_pin>
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	5b e1       	ldi	r21, 0x1B	; 27
    3352:	64 e0       	ldi	r22, 0x04	; 4
    3354:	80 ea       	ldi	r24, 0xA0	; 160
    3356:	96 e0       	ldi	r25, 0x06	; 6
    3358:	ae df       	rcall	.-164    	; 0x32b6 <ioport_configure_port_pin>
    335a:	43 e0       	ldi	r20, 0x03	; 3
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	62 e0       	ldi	r22, 0x02	; 2
    3360:	80 e6       	ldi	r24, 0x60	; 96
    3362:	96 e0       	ldi	r25, 0x06	; 6
    3364:	a8 df       	rcall	.-176    	; 0x32b6 <ioport_configure_port_pin>
    3366:	43 e0       	ldi	r20, 0x03	; 3
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	68 e0       	ldi	r22, 0x08	; 8
    336c:	80 e6       	ldi	r24, 0x60	; 96
    336e:	96 e0       	ldi	r25, 0x06	; 6
    3370:	a2 df       	rcall	.-188    	; 0x32b6 <ioport_configure_port_pin>
    3372:	43 e0       	ldi	r20, 0x03	; 3
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	68 e0       	ldi	r22, 0x08	; 8
    3378:	80 ea       	ldi	r24, 0xA0	; 160
    337a:	96 e0       	ldi	r25, 0x06	; 6
    337c:	9c df       	rcall	.-200    	; 0x32b6 <ioport_configure_port_pin>
    337e:	43 e0       	ldi	r20, 0x03	; 3
    3380:	50 e0       	ldi	r21, 0x00	; 0
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	80 e6       	ldi	r24, 0x60	; 96
    3386:	96 e0       	ldi	r25, 0x06	; 6
    3388:	96 df       	rcall	.-212    	; 0x32b6 <ioport_configure_port_pin>
    338a:	43 e0       	ldi	r20, 0x03	; 3
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	68 e0       	ldi	r22, 0x08	; 8
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	96 e0       	ldi	r25, 0x06	; 6
    3394:	90 df       	rcall	.-224    	; 0x32b6 <ioport_configure_port_pin>
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	60 e1       	ldi	r22, 0x10	; 16
    339c:	80 e8       	ldi	r24, 0x80	; 128
    339e:	96 e0       	ldi	r25, 0x06	; 6
    33a0:	8a cf       	rjmp	.-236    	; 0x32b6 <ioport_configure_port_pin>
    33a2:	08 95       	ret

000033a4 <setWaterDebit>:
	}
	waterUsage = nvm_eeprom_read_byte(index);
}

void setMaxWater(int max) {
	maxWater = max;
    33a4:	c0 e0       	ldi	r28, 0x00	; 0
    33a6:	d2 e0       	ldi	r29, 0x02	; 2
    33a8:	11 e0       	ldi	r17, 0x01	; 1
    33aa:	ce 01       	movw	r24, r28
    33ac:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <adc_enable>
    33b0:	9f b7       	in	r25, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	88 81       	ld	r24, Y
    33b6:	84 60       	ori	r24, 0x04	; 4
    33b8:	88 83       	st	Y, r24
    33ba:	9f bf       	out	0x3f, r25	; 63
    33bc:	9e 81       	ldd	r25, Y+6	; 0x06
    33be:	90 ff       	sbrs	r25, 0
    33c0:	fd cf       	rjmp	.-6      	; 0x33bc <setWaterDebit+0x18>
    33c2:	1e 83       	std	Y+6, r17	; 0x06
    33c4:	2c a1       	ldd	r18, Y+36	; 0x24
    33c6:	3d a1       	ldd	r19, Y+37	; 0x25
    33c8:	36 95       	lsr	r19
    33ca:	27 95       	ror	r18
    33cc:	36 95       	lsr	r19
    33ce:	27 95       	ror	r18
    33d0:	36 95       	lsr	r19
    33d2:	27 95       	ror	r18
    33d4:	a5 ec       	ldi	r26, 0xC5	; 197
    33d6:	b0 e2       	ldi	r27, 0x20	; 32
    33d8:	17 d6       	rcall	.+3118   	; 0x4008 <__umulhisi3>
    33da:	92 95       	swap	r25
    33dc:	82 95       	swap	r24
    33de:	8f 70       	andi	r24, 0x0F	; 15
    33e0:	89 27       	eor	r24, r25
    33e2:	9f 70       	andi	r25, 0x0F	; 15
    33e4:	89 27       	eor	r24, r25
    33e6:	80 93 42 24 	sts	0x2442, r24
    33ea:	90 93 43 24 	sts	0x2443, r25
    33ee:	84 ef       	ldi	r24, 0xF4	; 244
    33f0:	91 e0       	ldi	r25, 0x01	; 1
    33f2:	32 de       	rcall	.-924    	; 0x3058 <vTaskDelay>
    33f4:	da cf       	rjmp	.-76     	; 0x33aa <setWaterDebit+0x6>

000033f6 <vLightAndTemp>:
    33f6:	c0 e0       	ldi	r28, 0x00	; 0
    33f8:	d2 e0       	ldi	r29, 0x02	; 2
    33fa:	9f b7       	in	r25, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	88 81       	ld	r24, Y
    3400:	84 60       	ori	r24, 0x04	; 4
    3402:	88 83       	st	Y, r24
    3404:	9f bf       	out	0x3f, r25	; 63
    3406:	0e 94 58 08 	call	0x10b0	; 0x10b0 <lightsensor_data_is_ready>
    340a:	88 23       	and	r24, r24
    340c:	71 f0       	breq	.+28     	; 0x342a <vLightAndTemp+0x34>
    340e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lightsensor_get_raw_value>
    3412:	09 2e       	mov	r0, r25
    3414:	00 0c       	add	r0, r0
    3416:	aa 0b       	sbc	r26, r26
    3418:	bb 0b       	sbc	r27, r27
    341a:	80 93 48 24 	sts	0x2448, r24
    341e:	90 93 49 24 	sts	0x2449, r25
    3422:	a0 93 4a 24 	sts	0x244A, r26
    3426:	b0 93 4b 24 	sts	0x244B, r27
    342a:	9f b7       	in	r25, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	88 81       	ld	r24, Y
    3430:	88 60       	ori	r24, 0x08	; 8
    3432:	88 83       	st	Y, r24
    3434:	9f bf       	out	0x3f, r25	; 63
    3436:	0e 94 4c 08 	call	0x1098	; 0x1098 <ntc_data_is_ready>
    343a:	88 23       	and	r24, r24
    343c:	e1 f3       	breq	.-8      	; 0x3436 <vLightAndTemp+0x40>
    343e:	0e 94 b1 08 	call	0x1162	; 0x1162 <ntc_get_temperature>
    3442:	80 93 4c 24 	sts	0x244C, r24
    3446:	8a e0       	ldi	r24, 0x0A	; 10
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	06 de       	rcall	.-1012   	; 0x3058 <vTaskDelay>
    344c:	d6 cf       	rjmp	.-84     	; 0x33fa <vLightAndTemp+0x4>

0000344e <adc_init>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	2b 97       	sbiw	r28, 0x0b	; 11
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	be 01       	movw	r22, r28
    345e:	6f 5f       	subi	r22, 0xFF	; 255
    3460:	7f 4f       	sbci	r23, 0xFF	; 255
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	92 e0       	ldi	r25, 0x02	; 2
    3466:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <adc_read_configuration>
    346a:	ae 01       	movw	r20, r28
    346c:	48 5f       	subi	r20, 0xF8	; 248
    346e:	5f 4f       	sbci	r21, 0xFF	; 255
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	92 e0       	ldi	r25, 0x02	; 2
    3476:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <adcch_read_configuration>
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	8f 78       	andi	r24, 0x8F	; 143
    3480:	80 61       	ori	r24, 0x10	; 16
    3482:	8b 83       	std	Y+3, r24	; 0x03
    3484:	89 2f       	mov	r24, r25
    3486:	81 7e       	andi	r24, 0xE1	; 225
    3488:	8a 83       	std	Y+2, r24	; 0x02
    348a:	1c 82       	std	Y+4, r1	; 0x04
    348c:	86 e0       	ldi	r24, 0x06	; 6
    348e:	8d 83       	std	Y+5, r24	; 0x05
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	88 87       	std	Y+8, r24	; 0x08
    3494:	19 86       	std	Y+9, r1	; 0x09
    3496:	be 01       	movw	r22, r28
    3498:	6f 5f       	subi	r22, 0xFF	; 255
    349a:	7f 4f       	sbci	r23, 0xFF	; 255
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	92 e0       	ldi	r25, 0x02	; 2
    34a0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <adc_write_configuration>
    34a4:	ae 01       	movw	r20, r28
    34a6:	48 5f       	subi	r20, 0xF8	; 248
    34a8:	5f 4f       	sbci	r21, 0xFF	; 255
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	92 e0       	ldi	r25, 0x02	; 2
    34b0:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <adcch_write_configuration>
    34b4:	2b 96       	adiw	r28, 0x0b	; 11
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <setUpSerial>:
    34c0:	10 92 a7 08 	sts	0x08A7, r1
    34c4:	8c e0       	ldi	r24, 0x0C	; 12
    34c6:	80 93 a6 08 	sts	0x08A6, r24
    34ca:	10 92 a3 08 	sts	0x08A3, r1
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	80 93 a5 08 	sts	0x08A5, r24
    34d4:	88 e1       	ldi	r24, 0x18	; 24
    34d6:	80 93 a4 08 	sts	0x08A4, r24
    34da:	08 95       	ret

000034dc <sendChar>:
    34dc:	e1 ea       	ldi	r30, 0xA1	; 161
    34de:	f8 e0       	ldi	r31, 0x08	; 8
    34e0:	90 81       	ld	r25, Z
    34e2:	95 ff       	sbrs	r25, 5
    34e4:	fd cf       	rjmp	.-6      	; 0x34e0 <sendChar+0x4>
    34e6:	80 93 a0 08 	sts	0x08A0, r24
    34ea:	08 95       	ret

000034ec <receiveChar>:
    34ec:	e1 ea       	ldi	r30, 0xA1	; 161
    34ee:	f8 e0       	ldi	r31, 0x08	; 8
    34f0:	80 81       	ld	r24, Z
    34f2:	88 23       	and	r24, r24
    34f4:	ec f7       	brge	.-6      	; 0x34f0 <receiveChar+0x4>
    34f6:	80 91 a0 08 	lds	r24, 0x08A0
    34fa:	08 95       	ret

000034fc <getWaterUsageFromEEPROM>:
    34fc:	cf 93       	push	r28
    34fe:	df 93       	push	r29
    3500:	ce e0       	ldi	r28, 0x0E	; 14
    3502:	d0 e0       	ldi	r29, 0x00	; 0
    3504:	ce 01       	movw	r24, r28
    3506:	6e de       	rcall	.-804    	; 0x31e4 <nvm_eeprom_read_byte>
    3508:	28 2f       	mov	r18, r24
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	2f 3f       	cpi	r18, 0xFF	; 255
    350e:	31 05       	cpc	r19, r1
    3510:	14 f0       	brlt	.+4      	; 0x3516 <getWaterUsageFromEEPROM+0x1a>
    3512:	21 96       	adiw	r28, 0x01	; 1
    3514:	f7 cf       	rjmp	.-18     	; 0x3504 <getWaterUsageFromEEPROM+0x8>
    3516:	ce 01       	movw	r24, r28
    3518:	65 de       	rcall	.-822    	; 0x31e4 <nvm_eeprom_read_byte>
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	80 93 46 24 	sts	0x2446, r24
    3520:	90 93 47 24 	sts	0x2447, r25
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	08 95       	ret

0000352a <setRainTankVolume>:
}

void setRainTankVolume(int vol) {
    352a:	bf 92       	push	r11
    352c:	cf 92       	push	r12
    352e:	df 92       	push	r13
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
	rainTankVolume = vol;
    353c:	80 93 40 24 	sts	0x2440, r24
    3540:	90 93 41 24 	sts	0x2441, r25

	int i = vol/255;
    3544:	6f ef       	ldi	r22, 0xFF	; 255
    3546:	70 e0       	ldi	r23, 0x00	; 0
    3548:	2a d5       	rcall	.+2644   	; 0x3f9e <__divmodhi4>
    354a:	6b 01       	movw	r12, r22
    354c:	b8 2e       	mov	r11, r24
    354e:	8b 01       	movw	r16, r22
	int remainder = vol%255;
    3550:	e8 2e       	mov	r14, r24
    3552:	f9 2e       	mov	r15, r25
	int a;
	for(a = 1; a <= i; a++){
    3554:	16 16       	cp	r1, r22
    3556:	17 06       	cpc	r1, r23
    3558:	4c f4       	brge	.+18     	; 0x356c <setRainTankVolume+0x42>
    355a:	c1 e0       	ldi	r28, 0x01	; 1
    355c:	d0 e0       	ldi	r29, 0x00	; 0
		nvm_eeprom_write_byte(a, 255);
    355e:	6f ef       	ldi	r22, 0xFF	; 255
    3560:	ce 01       	movw	r24, r28
    3562:	74 de       	rcall	.-792    	; 0x324c <nvm_eeprom_write_byte>
	rainTankVolume = vol;

	int i = vol/255;
	int remainder = vol%255;
	int a;
	for(a = 1; a <= i; a++){
    3564:	21 96       	adiw	r28, 0x01	; 1
    3566:	0c 17       	cp	r16, r28
    3568:	1d 07       	cpc	r17, r29
    356a:	cc f7       	brge	.-14     	; 0x355e <setRainTankVolume+0x34>
		nvm_eeprom_write_byte(a, 255);
	}
	
	if(remainder!=0) {
    356c:	ef 28       	or	r14, r15
    356e:	21 f0       	breq	.+8      	; 0x3578 <setRainTankVolume+0x4e>
		nvm_eeprom_write_byte(i+1, remainder);
    3570:	6b 2d       	mov	r22, r11
    3572:	c6 01       	movw	r24, r12
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	6a de       	rcall	.-812    	; 0x324c <nvm_eeprom_write_byte>
	}
	
}
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	df 90       	pop	r13
    3586:	cf 90       	pop	r12
    3588:	bf 90       	pop	r11
    358a:	08 95       	ret

0000358c <watering>:
static void watering(void *vpParameters) {
	while(1) {
		if(isAutoWatering==1 && lightIntensity>=150  && lightIntensity<=200) {
			
			int wateringVol = 500;
			isWateringTapOpened = 1;	//triggering openCloseTap()
    358c:	01 e0       	ldi	r16, 0x01	; 1
    358e:	10 e0       	ldi	r17, 0x00	; 0
    3590:	0f 2e       	mov	r0, r31
    3592:	f5 ef       	ldi	r31, 0xF5	; 245
    3594:	ef 2e       	mov	r14, r31
    3596:	f0 2d       	mov	r31, r0
    3598:	ff 24       	eor	r15, r15
    359a:	f3 94       	inc	r15
	}
}

static void watering(void *vpParameters) {
	while(1) {
		if(isAutoWatering==1 && lightIntensity>=150  && lightIntensity<=200) {
    359c:	80 91 3e 24 	lds	r24, 0x243E
    35a0:	90 91 3f 24 	lds	r25, 0x243F
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	91 05       	cpc	r25, r1
    35a8:	51 f5       	brne	.+84     	; 0x35fe <watering+0x72>
    35aa:	80 91 48 24 	lds	r24, 0x2448
    35ae:	90 91 49 24 	lds	r25, 0x2449
    35b2:	a0 91 4a 24 	lds	r26, 0x244A
    35b6:	b0 91 4b 24 	lds	r27, 0x244B
    35ba:	86 59       	subi	r24, 0x96	; 150
    35bc:	91 09       	sbc	r25, r1
    35be:	a1 09       	sbc	r26, r1
    35c0:	b1 09       	sbc	r27, r1
    35c2:	c3 97       	sbiw	r24, 0x33	; 51
    35c4:	a1 05       	cpc	r26, r1
    35c6:	b1 05       	cpc	r27, r1
    35c8:	48 f7       	brcc	.-46     	; 0x359c <watering+0x10>
			
			int wateringVol = 500;
			isWateringTapOpened = 1;	//triggering openCloseTap()
    35ca:	00 93 4d 24 	sts	0x244D, r16
    35ce:	10 93 4e 24 	sts	0x244E, r17
    35d2:	ce 2d       	mov	r28, r14
    35d4:	df 2d       	mov	r29, r15
			
			while(wateringVol>=0) {
				wateringVol--;
				vTaskDelay(5);
    35d6:	85 e0       	ldi	r24, 0x05	; 5
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	3e dd       	rcall	.-1412   	; 0x3058 <vTaskDelay>
    35dc:	21 97       	sbiw	r28, 0x01	; 1
		if(isAutoWatering==1 && lightIntensity>=150  && lightIntensity<=200) {
			
			int wateringVol = 500;
			isWateringTapOpened = 1;	//triggering openCloseTap()
			
			while(wateringVol>=0) {
    35de:	d9 f7       	brne	.-10     	; 0x35d6 <watering+0x4a>
				wateringVol--;
				vTaskDelay(5);
			}
			
			rainTankVolume -= wateringVol;
    35e0:	80 91 40 24 	lds	r24, 0x2440
    35e4:	90 91 41 24 	lds	r25, 0x2441
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	80 93 40 24 	sts	0x2440, r24
    35ee:	90 93 41 24 	sts	0x2441, r25
			setRainTankVolume(rainTankVolume);
    35f2:	9b df       	rcall	.-202    	; 0x352a <setRainTankVolume>
			isWateringTapOpened=0;
    35f4:	10 92 4d 24 	sts	0x244D, r1
    35f8:	10 92 4e 24 	sts	0x244E, r1
	}
}

static void watering(void *vpParameters) {
	while(1) {
		if(isAutoWatering==1 && lightIntensity>=150  && lightIntensity<=200) {
    35fc:	cf cf       	rjmp	.-98     	; 0x359c <watering+0x10>
			
			rainTankVolume -= wateringVol;
			setRainTankVolume(rainTankVolume);
			isWateringTapOpened=0;
			
			} else if(isAutoWatering==0 && isWateringTapOpened==1) {
    35fe:	89 2b       	or	r24, r25
    3600:	69 f6       	brne	.-102    	; 0x359c <watering+0x10>
    3602:	80 91 4d 24 	lds	r24, 0x244D
    3606:	90 91 4e 24 	lds	r25, 0x244E
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	39 f6       	brne	.-114    	; 0x359c <watering+0x10>
			
			while(rainTankVolume>=0 && isWateringTapOpened==1) {
    360e:	80 91 40 24 	lds	r24, 0x2440
    3612:	90 91 41 24 	lds	r25, 0x2441
    3616:	99 23       	and	r25, r25
    3618:	ac f0       	brlt	.+42     	; 0x3644 <watering+0xb8>
				rainTankVolume--;
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	80 93 40 24 	sts	0x2440, r24
    3620:	90 93 41 24 	sts	0x2441, r25
				vTaskDelay(5);
    3624:	85 e0       	ldi	r24, 0x05	; 5
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	17 dd       	rcall	.-1490   	; 0x3058 <vTaskDelay>
			setRainTankVolume(rainTankVolume);
			isWateringTapOpened=0;
			
			} else if(isAutoWatering==0 && isWateringTapOpened==1) {
			
			while(rainTankVolume>=0 && isWateringTapOpened==1) {
    362a:	80 91 40 24 	lds	r24, 0x2440
    362e:	90 91 41 24 	lds	r25, 0x2441
    3632:	99 23       	and	r25, r25
    3634:	3c f0       	brlt	.+14     	; 0x3644 <watering+0xb8>
    3636:	20 91 4d 24 	lds	r18, 0x244D
    363a:	30 91 4e 24 	lds	r19, 0x244E
    363e:	21 30       	cpi	r18, 0x01	; 1
    3640:	31 05       	cpc	r19, r1
    3642:	59 f3       	breq	.-42     	; 0x361a <watering+0x8e>
				rainTankVolume--;
				vTaskDelay(5);
			}
			
			setRainTankVolume(rainTankVolume);
    3644:	72 df       	rcall	.-284    	; 0x352a <setRainTankVolume>
    3646:	aa cf       	rjmp	.-172    	; 0x359c <watering+0x10>

00003648 <getDelayBasedOnDebit>:
		
	}
}

void getDelayBasedOnDebit(void) {
	if(debit==0) delay = 250;
    3648:	80 91 42 24 	lds	r24, 0x2442
    364c:	90 91 43 24 	lds	r25, 0x2443
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	39 f4       	brne	.+14     	; 0x3662 <getDelayBasedOnDebit+0x1a>
    3654:	8a ef       	ldi	r24, 0xFA	; 250
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	80 93 3c 24 	sts	0x243C, r24
    365c:	90 93 3d 24 	sts	0x243D, r25
    3660:	08 95       	ret
	else if(debit==1) delay = 200;
    3662:	81 30       	cpi	r24, 0x01	; 1
    3664:	91 05       	cpc	r25, r1
    3666:	39 f4       	brne	.+14     	; 0x3676 <getDelayBasedOnDebit+0x2e>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	80 93 3c 24 	sts	0x243C, r24
    3670:	90 93 3d 24 	sts	0x243D, r25
    3674:	08 95       	ret
	else if(debit==2) delay = 150;
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	91 05       	cpc	r25, r1
    367a:	39 f4       	brne	.+14     	; 0x368a <getDelayBasedOnDebit+0x42>
    367c:	86 e9       	ldi	r24, 0x96	; 150
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	80 93 3c 24 	sts	0x243C, r24
    3684:	90 93 3d 24 	sts	0x243D, r25
    3688:	08 95       	ret
	else if(debit==3) delay = 100;
    368a:	83 30       	cpi	r24, 0x03	; 3
    368c:	91 05       	cpc	r25, r1
    368e:	39 f4       	brne	.+14     	; 0x369e <getDelayBasedOnDebit+0x56>
    3690:	84 e6       	ldi	r24, 0x64	; 100
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	80 93 3c 24 	sts	0x243C, r24
    3698:	90 93 3d 24 	sts	0x243D, r25
    369c:	08 95       	ret
	else if(debit==4) delay = 50;
    369e:	04 97       	sbiw	r24, 0x04	; 4
    36a0:	31 f4       	brne	.+12     	; 0x36ae <getDelayBasedOnDebit+0x66>
    36a2:	82 e3       	ldi	r24, 0x32	; 50
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	80 93 3c 24 	sts	0x243C, r24
    36aa:	90 93 3d 24 	sts	0x243D, r25
    36ae:	08 95       	ret

000036b0 <countWaterUsage>:
	
}

static void countWaterUsage(void *vpParameters) {
	while(1) {
		if(isTap1Opened==1 || isTap2Opened==1 || isTap3Opened==1 || isTap4Opened==1) {
    36b0:	80 91 55 24 	lds	r24, 0x2455
    36b4:	90 91 56 24 	lds	r25, 0x2456
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	b9 f0       	breq	.+46     	; 0x36ea <countWaterUsage+0x3a>
    36bc:	80 91 53 24 	lds	r24, 0x2453
    36c0:	90 91 54 24 	lds	r25, 0x2454
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	b1 f0       	breq	.+44     	; 0x36f4 <countWaterUsage+0x44>
    36c8:	80 91 51 24 	lds	r24, 0x2451
    36cc:	90 91 52 24 	lds	r25, 0x2452
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	a9 f0       	breq	.+42     	; 0x36fe <countWaterUsage+0x4e>
    36d4:	80 91 4f 24 	lds	r24, 0x244F
    36d8:	90 91 50 24 	lds	r25, 0x2450
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f4       	brne	.+60     	; 0x371c <countWaterUsage+0x6c>
    36e0:	00 e0       	ldi	r16, 0x00	; 0
    36e2:	10 e0       	ldi	r17, 0x00	; 0
    36e4:	ce e0       	ldi	r28, 0x0E	; 14
    36e6:	d0 e0       	ldi	r29, 0x00	; 0
    36e8:	0e c0       	rjmp	.+28     	; 0x3706 <countWaterUsage+0x56>
    36ea:	00 e0       	ldi	r16, 0x00	; 0
    36ec:	10 e0       	ldi	r17, 0x00	; 0
    36ee:	ce e0       	ldi	r28, 0x0E	; 14
    36f0:	d0 e0       	ldi	r29, 0x00	; 0
    36f2:	09 c0       	rjmp	.+18     	; 0x3706 <countWaterUsage+0x56>
    36f4:	00 e0       	ldi	r16, 0x00	; 0
    36f6:	10 e0       	ldi	r17, 0x00	; 0
    36f8:	ce e0       	ldi	r28, 0x0E	; 14
    36fa:	d0 e0       	ldi	r29, 0x00	; 0
    36fc:	04 c0       	rjmp	.+8      	; 0x3706 <countWaterUsage+0x56>
    36fe:	00 e0       	ldi	r16, 0x00	; 0
    3700:	10 e0       	ldi	r17, 0x00	; 0
    3702:	ce e0       	ldi	r28, 0x0E	; 14
    3704:	d0 e0       	ldi	r29, 0x00	; 0
			int Subtotal=0;
			int total=0;
			int index=0;
			bool habis = false;
			while(!habis){
				Subtotal = nvm_eeprom_read_byte(i);
    3706:	ce 01       	movw	r24, r28
    3708:	6d dd       	rcall	.-1318   	; 0x31e4 <nvm_eeprom_read_byte>
    370a:	68 2f       	mov	r22, r24
    370c:	70 e0       	ldi	r23, 0x00	; 0
				if(Subtotal>=255){
    370e:	6f 3f       	cpi	r22, 0xFF	; 255
    3710:	71 05       	cpc	r23, r1
    3712:	5c f0       	brlt	.+22     	; 0x372a <countWaterUsage+0x7a>
					i++;
    3714:	21 96       	adiw	r28, 0x01	; 1
				}
				else{
					habis=true;
				}
				total+=Subtotal;
    3716:	06 0f       	add	r16, r22
    3718:	17 1f       	adc	r17, r23
    371a:	f5 cf       	rjmp	.-22     	; 0x3706 <countWaterUsage+0x56>
				index = i;
			}
			waterUsage = total;
			nvm_eeprom_write_byte(index, total);
		}
		getDelayBasedOnDebit();
    371c:	95 df       	rcall	.-214    	; 0x3648 <getDelayBasedOnDebit>
		vTaskDelay(delay);
    371e:	80 91 3c 24 	lds	r24, 0x243C
    3722:	90 91 3d 24 	lds	r25, 0x243D
    3726:	98 dc       	rcall	.-1744   	; 0x3058 <vTaskDelay>
	}
    3728:	c3 cf       	rjmp	.-122    	; 0x36b0 <countWaterUsage>
					i++;
				}
				else{
					habis=true;
				}
				total+=Subtotal;
    372a:	60 0f       	add	r22, r16
    372c:	71 1f       	adc	r23, r17
				Subtotal=0;
				index = i;
			}
			waterUsage = total;
    372e:	60 93 46 24 	sts	0x2446, r22
    3732:	70 93 47 24 	sts	0x2447, r23
			nvm_eeprom_write_byte(index, total);
    3736:	ce 01       	movw	r24, r28
    3738:	89 dd       	rcall	.-1262   	; 0x324c <nvm_eeprom_write_byte>
    373a:	f0 cf       	rjmp	.-32     	; 0x371c <countWaterUsage+0x6c>

0000373c <closeTap>:
		vTaskDelay(10);
	}
}

void closeTap(void){
	PORTC.DIR |= PIN0_bm;
    373c:	e0 e4       	ldi	r30, 0x40	; 64
    373e:	f6 e0       	ldi	r31, 0x06	; 6
    3740:	80 81       	ld	r24, Z
    3742:	81 60       	ori	r24, 0x01	; 1
    3744:	80 83       	st	Z, r24
	
	TCC0.CTRLA = (PIN2_bm) | (PIN0_bm);
    3746:	e0 e0       	ldi	r30, 0x00	; 0
    3748:	f8 e0       	ldi	r31, 0x08	; 8
    374a:	85 e0       	ldi	r24, 0x05	; 5
    374c:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    374e:	86 e1       	ldi	r24, 0x16	; 22
    3750:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.PER = 8000;
    3752:	80 e4       	ldi	r24, 0x40	; 64
    3754:	9f e1       	ldi	r25, 0x1F	; 31
    3756:	86 a3       	std	Z+38, r24	; 0x26
    3758:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = 1;
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	80 a7       	std	Z+40, r24	; 0x28
    3760:	91 a7       	std	Z+41, r25	; 0x29
    3762:	08 95       	ret

00003764 <openTap>:
}

void openTap(void){
	PORTC.DIR |= PIN0_bm;
    3764:	e0 e4       	ldi	r30, 0x40	; 64
    3766:	f6 e0       	ldi	r31, 0x06	; 6
    3768:	80 81       	ld	r24, Z
    376a:	81 60       	ori	r24, 0x01	; 1
    376c:	80 83       	st	Z, r24
	
	TCC0.CTRLA = (PIN2_bm) | (PIN0_bm);
    376e:	e0 e0       	ldi	r30, 0x00	; 0
    3770:	f8 e0       	ldi	r31, 0x08	; 8
    3772:	85 e0       	ldi	r24, 0x05	; 5
    3774:	80 83       	st	Z, r24
	TCC0.CTRLB = (PIN4_bm) | (PIN2_bm) | (PIN1_bm);
    3776:	86 e1       	ldi	r24, 0x16	; 22
    3778:	81 83       	std	Z+1, r24	; 0x01
	
	TCC0.PER = 8000;
    377a:	80 e4       	ldi	r24, 0x40	; 64
    377c:	9f e1       	ldi	r25, 0x1F	; 31
    377e:	86 a3       	std	Z+38, r24	; 0x26
    3780:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA = 375;
    3782:	87 e7       	ldi	r24, 0x77	; 119
    3784:	91 e0       	ldi	r25, 0x01	; 1
    3786:	80 a7       	std	Z+40, r24	; 0x28
    3788:	91 a7       	std	Z+41, r25	; 0x29
    378a:	08 95       	ret

0000378c <vServo>:
	TCC0.CCA = 375;
}

static void vServo(void *pvParameters) {
	while(1) {
		openTap();
    378c:	eb df       	rcall	.-42     	; 0x3764 <openTap>
		vTaskDelay(50);
    378e:	82 e3       	ldi	r24, 0x32	; 50
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	62 dc       	rcall	.-1852   	; 0x3058 <vTaskDelay>
		closeTap();
    3794:	d3 df       	rcall	.-90     	; 0x373c <closeTap>
		vTaskDelay(50);
    3796:	82 e3       	ldi	r24, 0x32	; 50
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	5e dc       	rcall	.-1860   	; 0x3058 <vTaskDelay>
	}
    379c:	f7 cf       	rjmp	.-18     	; 0x378c <vServo>

0000379e <waterAlertOn>:
	TCC0.PER = 8000;
	TCC0.CCA = 375;
}

void waterAlertOn(void) {
	PORTE_DIR=0b00000001;
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	80 93 80 06 	sts	0x0680, r24
	PORTE_OUT=0b00000001;
    37a4:	80 93 84 06 	sts	0x0684, r24
    37a8:	08 95       	ret

000037aa <waterAlertOff>:
}

void waterAlertOff(void) {
	PORTE_DIR=0b00000001;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	80 93 80 06 	sts	0x0680, r24
	PORTE_OUT=0b00000000;
    37b0:	10 92 84 06 	sts	0x0684, r1
    37b4:	08 95       	ret

000037b6 <waterAlertTask>:
    37b6:	00 e8       	ldi	r16, 0x80	; 128
    37b8:	16 e0       	ldi	r17, 0x06	; 6
    37ba:	c0 e1       	ldi	r28, 0x10	; 16
    37bc:	f8 01       	movw	r30, r16
    37be:	c5 83       	std	Z+5, r28	; 0x05
}

static void waterAlertTask(void *pvParameters) {
	while(1) {
		gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
		if(waterUsage > maxWater && (isTap1Opened==1 || isTap2Opened==1 || isTap3Opened==1 || isTap4Opened==1)) {
    37c0:	20 91 46 24 	lds	r18, 0x2446
    37c4:	30 91 47 24 	lds	r19, 0x2447
    37c8:	80 91 44 24 	lds	r24, 0x2444
    37cc:	90 91 45 24 	lds	r25, 0x2445
    37d0:	82 17       	cp	r24, r18
    37d2:	93 07       	cpc	r25, r19
    37d4:	ec f4       	brge	.+58     	; 0x3810 <waterAlertTask+0x5a>
    37d6:	80 91 55 24 	lds	r24, 0x2455
    37da:	90 91 56 24 	lds	r25, 0x2456
    37de:	01 97       	sbiw	r24, 0x01	; 1
    37e0:	91 f0       	breq	.+36     	; 0x3806 <waterAlertTask+0x50>
    37e2:	80 91 53 24 	lds	r24, 0x2453
    37e6:	90 91 54 24 	lds	r25, 0x2454
    37ea:	01 97       	sbiw	r24, 0x01	; 1
    37ec:	61 f0       	breq	.+24     	; 0x3806 <waterAlertTask+0x50>
    37ee:	80 91 51 24 	lds	r24, 0x2451
    37f2:	90 91 52 24 	lds	r25, 0x2452
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	31 f0       	breq	.+12     	; 0x3806 <waterAlertTask+0x50>
    37fa:	80 91 4f 24 	lds	r24, 0x244F
    37fe:	90 91 50 24 	lds	r25, 0x2450
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	29 f4       	brne	.+10     	; 0x3810 <waterAlertTask+0x5a>
			waterAlertOn();
    3806:	cb df       	rcall	.-106    	; 0x379e <waterAlertOn>
			vTaskDelay(50);
    3808:	82 e3       	ldi	r24, 0x32	; 50
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	25 dc       	rcall	.-1974   	; 0x3058 <vTaskDelay>
			waterAlertOff();
    380e:	cd df       	rcall	.-102    	; 0x37aa <waterAlertOff>
		}
		vTaskDelay(10);
    3810:	8a e0       	ldi	r24, 0x0A	; 10
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	21 dc       	rcall	.-1982   	; 0x3058 <vTaskDelay>
	}
    3816:	d2 cf       	rjmp	.-92     	; 0x37bc <waterAlertTask+0x6>

00003818 <clearLCD>:
	PORTE_DIR=0b00000001;
	PORTE_OUT=0b00000000;
}

void clearLCD(void){
	gfx_mono_draw_string("                    ",0,0,&sysfont);
    3818:	27 e0       	ldi	r18, 0x07	; 7
    381a:	30 e2       	ldi	r19, 0x20	; 32
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	60 e0       	ldi	r22, 0x00	; 0
    3820:	85 e1       	ldi	r24, 0x15	; 21
    3822:	90 e2       	ldi	r25, 0x20	; 32
    3824:	0c 94 35 13 	jmp	0x266a	; 0x266a <gfx_mono_draw_string>
    3828:	08 95       	ret

0000382a <vReceiver>:
    382a:	80 e1       	ldi	r24, 0x10	; 16
    382c:	80 93 85 06 	sts	0x0685, r24
    3830:	00 ee       	ldi	r16, 0xE0	; 224
    3832:	17 e0       	ldi	r17, 0x07	; 7
    3834:	dd 24       	eor	r13, r13
    3836:	d3 94       	inc	r13
    3838:	68 94       	set
    383a:	cc 24       	eor	r12, r12
    383c:	c1 f8       	bld	r12, 1
				gfx_mono_draw_string("Open Watering Tap",0,0,&sysfont);
				if (isAutoWatering==0) {
					LED_On(LED0);
					LED_On(LED1);
					openTap();
					isWateringTapOpened = 1;
    383e:	c1 e0       	ldi	r28, 0x01	; 1
    3840:	d0 e0       	ldi	r29, 0x00	; 0
    3842:	0f 2e       	mov	r0, r31
    3844:	f0 e6       	ldi	r31, 0x60	; 96
    3846:	ef 2e       	mov	r14, r31
    3848:	f6 e0       	ldi	r31, 0x06	; 6
    384a:	ff 2e       	mov	r15, r31
    384c:	f0 2d       	mov	r31, r0
    384e:	68 94       	set
    3850:	aa 24       	eor	r10, r10
    3852:	a5 f8       	bld	r10, 5
    3854:	68 94       	set
    3856:	bb 24       	eor	r11, r11
    3858:	b4 f8       	bld	r11, 4

static void vReceiver(void *pvParameters){
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	while (1){
		
		char cmd = receiveChar();
    385a:	48 de       	rcall	.-880    	; 0x34ec <receiveChar>
		
		if(cmd=='a'){
    385c:	81 36       	cpi	r24, 0x61	; 97
    385e:	09 f5       	brne	.+66     	; 0x38a2 <vReceiver+0x78>
			if (isTap1Opened==0)
    3860:	80 91 55 24 	lds	r24, 0x2455
    3864:	90 91 56 24 	lds	r25, 0x2456
    3868:	89 2b       	or	r24, r25
    386a:	89 f4       	brne	.+34     	; 0x388e <vReceiver+0x64>
			{
				clearLCD();
    386c:	d5 df       	rcall	.-86     	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Open Tap 1",0,0,&sysfont);
    386e:	27 e0       	ldi	r18, 0x07	; 7
    3870:	30 e2       	ldi	r19, 0x20	; 32
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	8a e2       	ldi	r24, 0x2A	; 42
    3878:	90 e2       	ldi	r25, 0x20	; 32
    387a:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    387e:	f8 01       	movw	r30, r16
    3880:	d6 82       	std	Z+6, r13	; 0x06
				LED_On(LED0);
				openTap();
    3882:	70 df       	rcall	.-288    	; 0x3764 <openTap>
				isTap1Opened = 1;
    3884:	c0 93 55 24 	sts	0x2455, r28
    3888:	d0 93 56 24 	sts	0x2456, r29
    388c:	7a c1       	rjmp	.+756    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    388e:	c4 df       	rcall	.-120    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 1 had opened",0,0,&sysfont);
    3890:	27 e0       	ldi	r18, 0x07	; 7
    3892:	30 e2       	ldi	r19, 0x20	; 32
    3894:	40 e0       	ldi	r20, 0x00	; 0
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	85 e3       	ldi	r24, 0x35	; 53
    389a:	90 e2       	ldi	r25, 0x20	; 32
    389c:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    38a0:	70 c1       	rjmp	.+736    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='1'){
    38a2:	81 33       	cpi	r24, 0x31	; 49
    38a4:	09 f5       	brne	.+66     	; 0x38e8 <vReceiver+0xbe>
			if (isTap1Opened==1)
    38a6:	80 91 55 24 	lds	r24, 0x2455
    38aa:	90 91 56 24 	lds	r25, 0x2456
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	89 f4       	brne	.+34     	; 0x38d4 <vReceiver+0xaa>
			{
				clearLCD();
    38b2:	b2 df       	rcall	.-156    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Close Tap 1",0,0,&sysfont);
    38b4:	27 e0       	ldi	r18, 0x07	; 7
    38b6:	30 e2       	ldi	r19, 0x20	; 32
    38b8:	40 e0       	ldi	r20, 0x00	; 0
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	86 e4       	ldi	r24, 0x46	; 70
    38be:	90 e2       	ldi	r25, 0x20	; 32
    38c0:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    38c4:	f8 01       	movw	r30, r16
    38c6:	d5 82       	std	Z+5, r13	; 0x05
				LED_Off(LED0);
				closeTap();
    38c8:	39 df       	rcall	.-398    	; 0x373c <closeTap>
				isTap1Opened = 0;
    38ca:	10 92 55 24 	sts	0x2455, r1
    38ce:	10 92 56 24 	sts	0x2456, r1
    38d2:	57 c1       	rjmp	.+686    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    38d4:	a1 df       	rcall	.-190    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 1 had closed",0,0,&sysfont);
    38d6:	27 e0       	ldi	r18, 0x07	; 7
    38d8:	30 e2       	ldi	r19, 0x20	; 32
    38da:	40 e0       	ldi	r20, 0x00	; 0
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	82 e5       	ldi	r24, 0x52	; 82
    38e0:	90 e2       	ldi	r25, 0x20	; 32
    38e2:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    38e6:	4d c1       	rjmp	.+666    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='b'){
    38e8:	82 36       	cpi	r24, 0x62	; 98
    38ea:	09 f5       	brne	.+66     	; 0x392e <vReceiver+0x104>
			if (isTap2Opened==0)
    38ec:	80 91 53 24 	lds	r24, 0x2453
    38f0:	90 91 54 24 	lds	r25, 0x2454
    38f4:	89 2b       	or	r24, r25
    38f6:	89 f4       	brne	.+34     	; 0x391a <vReceiver+0xf0>
			{
				clearLCD();
    38f8:	8f df       	rcall	.-226    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Open Tap 2",0,0,&sysfont);
    38fa:	27 e0       	ldi	r18, 0x07	; 7
    38fc:	30 e2       	ldi	r19, 0x20	; 32
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	83 e6       	ldi	r24, 0x63	; 99
    3904:	90 e2       	ldi	r25, 0x20	; 32
    3906:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    390a:	f8 01       	movw	r30, r16
    390c:	c6 82       	std	Z+6, r12	; 0x06
				LED_On(LED1);
				openTap();
    390e:	2a df       	rcall	.-428    	; 0x3764 <openTap>
				isTap2Opened = 1;
    3910:	c0 93 53 24 	sts	0x2453, r28
    3914:	d0 93 54 24 	sts	0x2454, r29
    3918:	34 c1       	rjmp	.+616    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    391a:	7e df       	rcall	.-260    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 2 had opened",0,0,&sysfont);
    391c:	27 e0       	ldi	r18, 0x07	; 7
    391e:	30 e2       	ldi	r19, 0x20	; 32
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	8e e6       	ldi	r24, 0x6E	; 110
    3926:	90 e2       	ldi	r25, 0x20	; 32
    3928:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    392c:	2a c1       	rjmp	.+596    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='2'){
    392e:	82 33       	cpi	r24, 0x32	; 50
    3930:	09 f5       	brne	.+66     	; 0x3974 <vReceiver+0x14a>
			if (isTap2Opened==1)
    3932:	80 91 53 24 	lds	r24, 0x2453
    3936:	90 91 54 24 	lds	r25, 0x2454
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	89 f4       	brne	.+34     	; 0x3960 <vReceiver+0x136>
			{
				clearLCD();
    393e:	6c df       	rcall	.-296    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Close Tap 2",0,0,&sysfont);
    3940:	27 e0       	ldi	r18, 0x07	; 7
    3942:	30 e2       	ldi	r19, 0x20	; 32
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	8f e7       	ldi	r24, 0x7F	; 127
    394a:	90 e2       	ldi	r25, 0x20	; 32
    394c:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3950:	f8 01       	movw	r30, r16
    3952:	c5 82       	std	Z+5, r12	; 0x05
				LED_Off(LED1);
				closeTap();
    3954:	f3 de       	rcall	.-538    	; 0x373c <closeTap>
				isTap2Opened = 0;
    3956:	10 92 53 24 	sts	0x2453, r1
    395a:	10 92 54 24 	sts	0x2454, r1
    395e:	11 c1       	rjmp	.+546    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    3960:	5b df       	rcall	.-330    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 2 had closed",0,0,&sysfont);
    3962:	27 e0       	ldi	r18, 0x07	; 7
    3964:	30 e2       	ldi	r19, 0x20	; 32
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	8b e8       	ldi	r24, 0x8B	; 139
    396c:	90 e2       	ldi	r25, 0x20	; 32
    396e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3972:	07 c1       	rjmp	.+526    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='c'){
    3974:	83 36       	cpi	r24, 0x63	; 99
    3976:	09 f5       	brne	.+66     	; 0x39ba <vReceiver+0x190>
			if (isTap3Opened==0)
    3978:	80 91 51 24 	lds	r24, 0x2451
    397c:	90 91 52 24 	lds	r25, 0x2452
    3980:	89 2b       	or	r24, r25
    3982:	89 f4       	brne	.+34     	; 0x39a6 <vReceiver+0x17c>
			{
				clearLCD();
    3984:	49 df       	rcall	.-366    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Open Tap 3",0,0,&sysfont);
    3986:	27 e0       	ldi	r18, 0x07	; 7
    3988:	30 e2       	ldi	r19, 0x20	; 32
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	8c e9       	ldi	r24, 0x9C	; 156
    3990:	90 e2       	ldi	r25, 0x20	; 32
    3992:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3996:	f7 01       	movw	r30, r14
    3998:	b6 82       	std	Z+6, r11	; 0x06
				LED_On(LED2);
				openTap();
    399a:	e4 de       	rcall	.-568    	; 0x3764 <openTap>
				isTap3Opened = 1;
    399c:	c0 93 51 24 	sts	0x2451, r28
    39a0:	d0 93 52 24 	sts	0x2452, r29
    39a4:	ee c0       	rjmp	.+476    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    39a6:	38 df       	rcall	.-400    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 3 had opened",0,0,&sysfont);
    39a8:	27 e0       	ldi	r18, 0x07	; 7
    39aa:	30 e2       	ldi	r19, 0x20	; 32
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	87 ea       	ldi	r24, 0xA7	; 167
    39b2:	90 e2       	ldi	r25, 0x20	; 32
    39b4:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    39b8:	e4 c0       	rjmp	.+456    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='3'){
    39ba:	83 33       	cpi	r24, 0x33	; 51
    39bc:	09 f5       	brne	.+66     	; 0x3a00 <vReceiver+0x1d6>
			if (isTap1Opened==1)
    39be:	80 91 55 24 	lds	r24, 0x2455
    39c2:	90 91 56 24 	lds	r25, 0x2456
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	89 f4       	brne	.+34     	; 0x39ec <vReceiver+0x1c2>
			{
				clearLCD();
    39ca:	26 df       	rcall	.-436    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Close Tap 3",0,0,&sysfont);
    39cc:	27 e0       	ldi	r18, 0x07	; 7
    39ce:	30 e2       	ldi	r19, 0x20	; 32
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	88 eb       	ldi	r24, 0xB8	; 184
    39d6:	90 e2       	ldi	r25, 0x20	; 32
    39d8:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    39dc:	f7 01       	movw	r30, r14
    39de:	b5 82       	std	Z+5, r11	; 0x05
				LED_Off(LED2);
				closeTap();
    39e0:	ad de       	rcall	.-678    	; 0x373c <closeTap>
				isTap3Opened = 0;
    39e2:	10 92 51 24 	sts	0x2451, r1
    39e6:	10 92 52 24 	sts	0x2452, r1
    39ea:	cb c0       	rjmp	.+406    	; 0x3b82 <vReceiver+0x358>
			}
			else
			{
				clearLCD();
    39ec:	15 df       	rcall	.-470    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Tap 3 had closed",0,0,&sysfont);
    39ee:	27 e0       	ldi	r18, 0x07	; 7
    39f0:	30 e2       	ldi	r19, 0x20	; 32
    39f2:	40 e0       	ldi	r20, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	84 ec       	ldi	r24, 0xC4	; 196
    39f8:	90 e2       	ldi	r25, 0x20	; 32
    39fa:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    39fe:	c1 c0       	rjmp	.+386    	; 0x3b82 <vReceiver+0x358>
			}
		} else if(cmd=='d'){
    3a00:	84 36       	cpi	r24, 0x64	; 100
    3a02:	09 f5       	brne	.+66     	; 0x3a46 <vReceiver+0x21c>
				if (isTap4Opened==0)
    3a04:	80 91 4f 24 	lds	r24, 0x244F
    3a08:	90 91 50 24 	lds	r25, 0x2450
    3a0c:	89 2b       	or	r24, r25
    3a0e:	89 f4       	brne	.+34     	; 0x3a32 <vReceiver+0x208>
				{
					clearLCD();
    3a10:	03 df       	rcall	.-506    	; 0x3818 <clearLCD>
					gfx_mono_draw_string("Open Tap 4",0,0,&sysfont);
    3a12:	27 e0       	ldi	r18, 0x07	; 7
    3a14:	30 e2       	ldi	r19, 0x20	; 32
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	60 e0       	ldi	r22, 0x00	; 0
    3a1a:	85 ed       	ldi	r24, 0xD5	; 213
    3a1c:	90 e2       	ldi	r25, 0x20	; 32
    3a1e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3a22:	f7 01       	movw	r30, r14
    3a24:	a6 82       	std	Z+6, r10	; 0x06
					LED_On(LED3);
					openTap();
    3a26:	9e de       	rcall	.-708    	; 0x3764 <openTap>
					isTap4Opened = 1;
    3a28:	c0 93 4f 24 	sts	0x244F, r28
    3a2c:	d0 93 50 24 	sts	0x2450, r29
    3a30:	a8 c0       	rjmp	.+336    	; 0x3b82 <vReceiver+0x358>
				}
				else
				{
					clearLCD();
    3a32:	f2 de       	rcall	.-540    	; 0x3818 <clearLCD>
					gfx_mono_draw_string("Tap 4 had opened",0,0,&sysfont);
    3a34:	27 e0       	ldi	r18, 0x07	; 7
    3a36:	30 e2       	ldi	r19, 0x20	; 32
    3a38:	40 e0       	ldi	r20, 0x00	; 0
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	80 ee       	ldi	r24, 0xE0	; 224
    3a3e:	90 e2       	ldi	r25, 0x20	; 32
    3a40:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3a44:	9e c0       	rjmp	.+316    	; 0x3b82 <vReceiver+0x358>
				}
		} else if(cmd=='4'){
    3a46:	84 33       	cpi	r24, 0x34	; 52
    3a48:	09 f5       	brne	.+66     	; 0x3a8c <vReceiver+0x262>
				if (isTap4Opened==1)
    3a4a:	80 91 4f 24 	lds	r24, 0x244F
    3a4e:	90 91 50 24 	lds	r25, 0x2450
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	89 f4       	brne	.+34     	; 0x3a78 <vReceiver+0x24e>
				{
					clearLCD();
    3a56:	e0 de       	rcall	.-576    	; 0x3818 <clearLCD>
					gfx_mono_draw_string("Close Tap 4",0,0,&sysfont);
    3a58:	27 e0       	ldi	r18, 0x07	; 7
    3a5a:	30 e2       	ldi	r19, 0x20	; 32
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	60 e0       	ldi	r22, 0x00	; 0
    3a60:	81 ef       	ldi	r24, 0xF1	; 241
    3a62:	90 e2       	ldi	r25, 0x20	; 32
    3a64:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3a68:	f7 01       	movw	r30, r14
    3a6a:	a5 82       	std	Z+5, r10	; 0x05
					LED_Off(LED3);
					closeTap();
    3a6c:	67 de       	rcall	.-818    	; 0x373c <closeTap>
					isTap4Opened = 0;
    3a6e:	10 92 4f 24 	sts	0x244F, r1
    3a72:	10 92 50 24 	sts	0x2450, r1
    3a76:	85 c0       	rjmp	.+266    	; 0x3b82 <vReceiver+0x358>
				}
				else
				{
					clearLCD();
    3a78:	cf de       	rcall	.-610    	; 0x3818 <clearLCD>
					gfx_mono_draw_string("Tap 4 had closed",0,0,&sysfont);
    3a7a:	27 e0       	ldi	r18, 0x07	; 7
    3a7c:	30 e2       	ldi	r19, 0x20	; 32
    3a7e:	40 e0       	ldi	r20, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	8d ef       	ldi	r24, 0xFD	; 253
    3a84:	90 e2       	ldi	r25, 0x20	; 32
    3a86:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3a8a:	7b c0       	rjmp	.+246    	; 0x3b82 <vReceiver+0x358>
				}
		} else if(cmd=='e') {
    3a8c:	85 36       	cpi	r24, 0x65	; 101
    3a8e:	51 f4       	brne	.+20     	; 0x3aa4 <vReceiver+0x27a>
			
				clearLCD();
    3a90:	c3 de       	rcall	.-634    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Water Discharge",0,0,&sysfont);
    3a92:	27 e0       	ldi	r18, 0x07	; 7
    3a94:	30 e2       	ldi	r19, 0x20	; 32
    3a96:	40 e0       	ldi	r20, 0x00	; 0
    3a98:	60 e0       	ldi	r22, 0x00	; 0
    3a9a:	8e e0       	ldi	r24, 0x0E	; 14
    3a9c:	91 e2       	ldi	r25, 0x21	; 33
    3a9e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3aa2:	6f c0       	rjmp	.+222    	; 0x3b82 <vReceiver+0x358>
			
		} else if(cmd=='5') {
    3aa4:	85 33       	cpi	r24, 0x35	; 53
    3aa6:	51 f4       	brne	.+20     	; 0x3abc <vReceiver+0x292>
			
				clearLCD();
    3aa8:	b7 de       	rcall	.-658    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Water Discharge",0,0,&sysfont);
    3aaa:	27 e0       	ldi	r18, 0x07	; 7
    3aac:	30 e2       	ldi	r19, 0x20	; 32
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	8e e0       	ldi	r24, 0x0E	; 14
    3ab4:	91 e2       	ldi	r25, 0x21	; 33
    3ab6:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3aba:	63 c0       	rjmp	.+198    	; 0x3b82 <vReceiver+0x358>
			
		} else if(cmd=='f') {
    3abc:	86 36       	cpi	r24, 0x66	; 102
    3abe:	71 f4       	brne	.+28     	; 0x3adc <vReceiver+0x2b2>
			
				clearLCD();
    3ac0:	ab de       	rcall	.-682    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Manual Watering",0,0,&sysfont);
    3ac2:	27 e0       	ldi	r18, 0x07	; 7
    3ac4:	30 e2       	ldi	r19, 0x20	; 32
    3ac6:	40 e0       	ldi	r20, 0x00	; 0
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	8e e1       	ldi	r24, 0x1E	; 30
    3acc:	91 e2       	ldi	r25, 0x21	; 33
    3ace:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
				isAutoWatering = 0;
    3ad2:	10 92 3e 24 	sts	0x243E, r1
    3ad6:	10 92 3f 24 	sts	0x243F, r1
    3ada:	53 c0       	rjmp	.+166    	; 0x3b82 <vReceiver+0x358>
			
		} else if(cmd=='6') {
    3adc:	86 33       	cpi	r24, 0x36	; 54
    3ade:	71 f4       	brne	.+28     	; 0x3afc <vReceiver+0x2d2>
			
				clearLCD();
    3ae0:	9b de       	rcall	.-714    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Auto Watering",0,0,&sysfont);
    3ae2:	27 e0       	ldi	r18, 0x07	; 7
    3ae4:	30 e2       	ldi	r19, 0x20	; 32
    3ae6:	40 e0       	ldi	r20, 0x00	; 0
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	8e e2       	ldi	r24, 0x2E	; 46
    3aec:	91 e2       	ldi	r25, 0x21	; 33
    3aee:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
				isAutoWatering = 1;
    3af2:	c0 93 3e 24 	sts	0x243E, r28
    3af6:	d0 93 3f 24 	sts	0x243F, r29
    3afa:	43 c0       	rjmp	.+134    	; 0x3b82 <vReceiver+0x358>
			
		} else if(cmd=='g') {
    3afc:	87 36       	cpi	r24, 0x67	; 103
    3afe:	11 f5       	brne	.+68     	; 0x3b44 <vReceiver+0x31a>
			
				clearLCD();
    3b00:	8b de       	rcall	.-746    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Open Watering Tap",0,0,&sysfont);
    3b02:	27 e0       	ldi	r18, 0x07	; 7
    3b04:	30 e2       	ldi	r19, 0x20	; 32
    3b06:	40 e0       	ldi	r20, 0x00	; 0
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	8c e3       	ldi	r24, 0x3C	; 60
    3b0c:	91 e2       	ldi	r25, 0x21	; 33
    3b0e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
				if (isAutoWatering==0) {
    3b12:	80 91 3e 24 	lds	r24, 0x243E
    3b16:	90 91 3f 24 	lds	r25, 0x243F
    3b1a:	89 2b       	or	r24, r25
    3b1c:	49 f4       	brne	.+18     	; 0x3b30 <vReceiver+0x306>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3b1e:	f8 01       	movw	r30, r16
    3b20:	d6 82       	std	Z+6, r13	; 0x06
    3b22:	c6 82       	std	Z+6, r12	; 0x06
					LED_On(LED0);
					LED_On(LED1);
					openTap();
    3b24:	1f de       	rcall	.-962    	; 0x3764 <openTap>
					isWateringTapOpened = 1;
    3b26:	c0 93 4d 24 	sts	0x244D, r28
    3b2a:	d0 93 4e 24 	sts	0x244E, r29
    3b2e:	29 c0       	rjmp	.+82     	; 0x3b82 <vReceiver+0x358>
				} else {
					clearLCD();
    3b30:	73 de       	rcall	.-794    	; 0x3818 <clearLCD>
					gfx_mono_draw_string("Auto Watering Mode ON",0,0,&sysfont);
    3b32:	27 e0       	ldi	r18, 0x07	; 7
    3b34:	30 e2       	ldi	r19, 0x20	; 32
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	8e e4       	ldi	r24, 0x4E	; 78
    3b3c:	91 e2       	ldi	r25, 0x21	; 33
    3b3e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
    3b42:	1f c0       	rjmp	.+62     	; 0x3b82 <vReceiver+0x358>
				}
			
		} else if(cmd=='7') {
    3b44:	87 33       	cpi	r24, 0x37	; 55
    3b46:	91 f4       	brne	.+36     	; 0x3b6c <vReceiver+0x342>
			
				clearLCD();
    3b48:	67 de       	rcall	.-818    	; 0x3818 <clearLCD>
				gfx_mono_draw_string("Close Watering Tap",0,0,&sysfont);
    3b4a:	27 e0       	ldi	r18, 0x07	; 7
    3b4c:	30 e2       	ldi	r19, 0x20	; 32
    3b4e:	40 e0       	ldi	r20, 0x00	; 0
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	84 e6       	ldi	r24, 0x64	; 100
    3b54:	91 e2       	ldi	r25, 0x21	; 33
    3b56:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	d5 82       	std	Z+5, r13	; 0x05
    3b5e:	c5 82       	std	Z+5, r12	; 0x05
				LED_Off(LED0);
				LED_Off(LED1);
				closeTap();
    3b60:	ed dd       	rcall	.-1062   	; 0x373c <closeTap>
				isWateringTapOpened = 0;
    3b62:	10 92 4d 24 	sts	0x244D, r1
    3b66:	10 92 4e 24 	sts	0x244E, r1
    3b6a:	0b c0       	rjmp	.+22     	; 0x3b82 <vReceiver+0x358>
			
		} else if(cmd=='p') {
    3b6c:	80 37       	cpi	r24, 0x70	; 112
    3b6e:	49 f4       	brne	.+18     	; 0x3b82 <vReceiver+0x358>
			
				sendChar('p');
    3b70:	b5 dc       	rcall	.-1686   	; 0x34dc <sendChar>
				gfx_mono_draw_string("Send PING",0,0,&sysfont);
    3b72:	27 e0       	ldi	r18, 0x07	; 7
    3b74:	30 e2       	ldi	r19, 0x20	; 32
    3b76:	40 e0       	ldi	r20, 0x00	; 0
    3b78:	60 e0       	ldi	r22, 0x00	; 0
    3b7a:	87 e7       	ldi	r24, 0x77	; 119
    3b7c:	91 e2       	ldi	r25, 0x21	; 33
    3b7e:	0e 94 35 13 	call	0x266a	; 0x266a <gfx_mono_draw_string>
				
		}
		
		vTaskDelay(1);
    3b82:	ce 01       	movw	r24, r28
    3b84:	69 da       	rcall	.-2862   	; 0x3058 <vTaskDelay>
		
	}
    3b86:	69 ce       	rjmp	.-814    	; 0x385a <vReceiver+0x30>

00003b88 <main>:
	}
	vTaskDelay(50);
}

int main (void)
{
    3b88:	af 92       	push	r10
    3b8a:	bf 92       	push	r11
    3b8c:	cf 92       	push	r12
    3b8e:	df 92       	push	r13
    3b90:	ef 92       	push	r14
    3b92:	ff 92       	push	r15
    3b94:	0f 93       	push	r16
	board_init(); //konfigurasi awal board
    3b96:	b7 db       	rcall	.-2194   	; 0x3306 <board_init>
	sysclk_init(); //konfigurasi awal system clock
    3b98:	e7 da       	rcall	.-2610   	; 0x3168 <sysclk_init>
	adc_sensors_init();// konfigurasi adc
    3b9a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <adc_sensors_init>
	gfx_mono_init(); //konfigurasi awal LCD monochrom
    3b9e:	0e 94 5f 0b 	call	0x16be	; 0x16be <gfx_mono_st7565r_init>
	tb_init(); //konfigurasi touch button
    3ba2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <tb_init>
	cpu_irq_enable(); // konfigurasi untuk menghidupkan interrupt
    3ba6:	78 94       	sei
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    3ba8:	87 e0       	ldi	r24, 0x07	; 7
    3baa:	80 93 a2 00 	sts	0x00A2, r24
	pmic_init(); //konfigurasi untuk menyalakan semua interrupt dan mengatur prioritas task
	//pwm_init();
	adc_init();
    3bae:	4f dc       	rcall	.-1890   	; 0x344e <adc_init>
    3bb0:	80 e1       	ldi	r24, 0x10	; 16
    3bb2:	80 93 85 06 	sts	0x0685, r24
	
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	
	PORTC_OUTSET = PIN3_bm;
    3bb6:	88 e0       	ldi	r24, 0x08	; 8
    3bb8:	80 93 45 06 	sts	0x0645, r24
	PORTC_DIRSET = PIN3_bm;
    3bbc:	80 93 41 06 	sts	0x0641, r24
	
	PORTC_OUTCLR = PIN2_bm;
    3bc0:	84 e0       	ldi	r24, 0x04	; 4
    3bc2:	80 93 46 06 	sts	0x0646, r24
	PORTC_DIRCLR = PIN2_bm;
    3bc6:	80 93 42 06 	sts	0x0642, r24
	
	setUpSerial();
    3bca:	7a dc       	rcall	.-1804   	; 0x34c0 <setUpSerial>
	
	getWaterUsageFromEEPROM();
    3bcc:	97 dc       	rcall	.-1746   	; 0x34fc <getWaterUsageFromEEPROM>
	}
	waterUsage = nvm_eeprom_read_byte(index);
}

void setMaxWater(int max) {
	maxWater = max;
    3bce:	88 e8       	ldi	r24, 0x88	; 136
    3bd0:	93 e1       	ldi	r25, 0x13	; 19
    3bd2:	80 93 44 24 	sts	0x2444, r24
    3bd6:	90 93 45 24 	sts	0x2445, r25
	
	setUpSerial();
	
	getWaterUsageFromEEPROM();
	setMaxWater(5000);
	setRainTankVolume(2550);
    3bda:	86 ef       	ldi	r24, 0xF6	; 246
    3bdc:	99 e0       	ldi	r25, 0x09	; 9
    3bde:	a5 dc       	rcall	.-1718   	; 0x352a <setRainTankVolume>
	
	xTaskCreate(vReceiver, "", 200, NULL, 1, NULL);				// task to receive command
    3be0:	a1 2c       	mov	r10, r1
    3be2:	b1 2c       	mov	r11, r1
    3be4:	c1 2c       	mov	r12, r1
    3be6:	d1 2c       	mov	r13, r1
    3be8:	e1 2c       	mov	r14, r1
    3bea:	f1 2c       	mov	r15, r1
    3bec:	01 e0       	ldi	r16, 0x01	; 1
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	48 ec       	ldi	r20, 0xC8	; 200
    3bf4:	50 e0       	ldi	r21, 0x00	; 0
    3bf6:	69 e2       	ldi	r22, 0x29	; 41
    3bf8:	70 e2       	ldi	r23, 0x20	; 32
    3bfa:	85 e1       	ldi	r24, 0x15	; 21
    3bfc:	9c e1       	ldi	r25, 0x1C	; 28
    3bfe:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(watering, "", 200, NULL, 1, NULL);				// watering from rain tank triggered by isAutoWatering
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	48 ec       	ldi	r20, 0xC8	; 200
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	69 e2       	ldi	r22, 0x29	; 41
    3c0c:	70 e2       	ldi	r23, 0x20	; 32
    3c0e:	86 ec       	ldi	r24, 0xC6	; 198
    3c10:	9a e1       	ldi	r25, 0x1A	; 26
    3c12:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(vLightAndTemp, "", 200, NULL, 1, NULL);			// light intensity 
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	48 ec       	ldi	r20, 0xC8	; 200
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	69 e2       	ldi	r22, 0x29	; 41
    3c20:	70 e2       	ldi	r23, 0x20	; 32
    3c22:	8b ef       	ldi	r24, 0xFB	; 251
    3c24:	99 e1       	ldi	r25, 0x19	; 25
    3c26:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(countWaterUsage, "", 400, NULL, 1, NULL);		// triggered when isTapXOpened=1, X = {1, 2, 3, 4}
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	40 e9       	ldi	r20, 0x90	; 144
    3c30:	51 e0       	ldi	r21, 0x01	; 1
    3c32:	69 e2       	ldi	r22, 0x29	; 41
    3c34:	70 e2       	ldi	r23, 0x20	; 32
    3c36:	88 e5       	ldi	r24, 0x58	; 88
    3c38:	9b e1       	ldi	r25, 0x1B	; 27
    3c3a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(setWaterDebit, "", 200, NULL, 1, NULL);			// set debit from potensiometer
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	48 ec       	ldi	r20, 0xC8	; 200
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	69 e2       	ldi	r22, 0x29	; 41
    3c48:	70 e2       	ldi	r23, 0x20	; 32
    3c4a:	82 ed       	ldi	r24, 0xD2	; 210
    3c4c:	99 e1       	ldi	r25, 0x19	; 25
    3c4e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(waterAlertTask, "", 400, NULL, 1, NULL);		// alert when water usage more than maxwater	
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e9       	ldi	r20, 0x90	; 144
    3c58:	51 e0       	ldi	r21, 0x01	; 1
    3c5a:	69 e2       	ldi	r22, 0x29	; 41
    3c5c:	70 e2       	ldi	r23, 0x20	; 32
    3c5e:	8b ed       	ldi	r24, 0xDB	; 219
    3c60:	9b e1       	ldi	r25, 0x1B	; 27
    3c62:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	xTaskCreate(vServo, "", 400, NULL, 1, NULL);		// alert when water usage more than maxwater		
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e9       	ldi	r20, 0x90	; 144
    3c6c:	51 e0       	ldi	r21, 0x01	; 1
    3c6e:	69 e2       	ldi	r22, 0x29	; 41
    3c70:	70 e2       	ldi	r23, 0x20	; 32
    3c72:	86 ec       	ldi	r24, 0xC6	; 198
    3c74:	9b e1       	ldi	r25, 0x1B	; 27
    3c76:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <xTaskGenericCreate>
	
	vTaskStartScheduler();
    3c7a:	6f d8       	rcall	.-3874   	; 0x2d5a <vTaskStartScheduler>
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	08 95       	ret

00003c90 <__subsf3>:
    3c90:	50 58       	subi	r21, 0x80	; 128

00003c92 <__addsf3>:
    3c92:	bb 27       	eor	r27, r27
    3c94:	aa 27       	eor	r26, r26
    3c96:	0e d0       	rcall	.+28     	; 0x3cb4 <__addsf3x>
    3c98:	e5 c0       	rjmp	.+458    	; 0x3e64 <__fp_round>
    3c9a:	d6 d0       	rcall	.+428    	; 0x3e48 <__fp_pscA>
    3c9c:	30 f0       	brcs	.+12     	; 0x3caa <__addsf3+0x18>
    3c9e:	db d0       	rcall	.+438    	; 0x3e56 <__fp_pscB>
    3ca0:	20 f0       	brcs	.+8      	; 0x3caa <__addsf3+0x18>
    3ca2:	31 f4       	brne	.+12     	; 0x3cb0 <__addsf3+0x1e>
    3ca4:	9f 3f       	cpi	r25, 0xFF	; 255
    3ca6:	11 f4       	brne	.+4      	; 0x3cac <__addsf3+0x1a>
    3ca8:	1e f4       	brtc	.+6      	; 0x3cb0 <__addsf3+0x1e>
    3caa:	cb c0       	rjmp	.+406    	; 0x3e42 <__fp_nan>
    3cac:	0e f4       	brtc	.+2      	; 0x3cb0 <__addsf3+0x1e>
    3cae:	e0 95       	com	r30
    3cb0:	e7 fb       	bst	r30, 7
    3cb2:	c1 c0       	rjmp	.+386    	; 0x3e36 <__fp_inf>

00003cb4 <__addsf3x>:
    3cb4:	e9 2f       	mov	r30, r25
    3cb6:	e7 d0       	rcall	.+462    	; 0x3e86 <__fp_split3>
    3cb8:	80 f3       	brcs	.-32     	; 0x3c9a <__addsf3+0x8>
    3cba:	ba 17       	cp	r27, r26
    3cbc:	62 07       	cpc	r22, r18
    3cbe:	73 07       	cpc	r23, r19
    3cc0:	84 07       	cpc	r24, r20
    3cc2:	95 07       	cpc	r25, r21
    3cc4:	18 f0       	brcs	.+6      	; 0x3ccc <__addsf3x+0x18>
    3cc6:	71 f4       	brne	.+28     	; 0x3ce4 <__addsf3x+0x30>
    3cc8:	9e f5       	brtc	.+102    	; 0x3d30 <__addsf3x+0x7c>
    3cca:	ff c0       	rjmp	.+510    	; 0x3eca <__fp_zero>
    3ccc:	0e f4       	brtc	.+2      	; 0x3cd0 <__addsf3x+0x1c>
    3cce:	e0 95       	com	r30
    3cd0:	0b 2e       	mov	r0, r27
    3cd2:	ba 2f       	mov	r27, r26
    3cd4:	a0 2d       	mov	r26, r0
    3cd6:	0b 01       	movw	r0, r22
    3cd8:	b9 01       	movw	r22, r18
    3cda:	90 01       	movw	r18, r0
    3cdc:	0c 01       	movw	r0, r24
    3cde:	ca 01       	movw	r24, r20
    3ce0:	a0 01       	movw	r20, r0
    3ce2:	11 24       	eor	r1, r1
    3ce4:	ff 27       	eor	r31, r31
    3ce6:	59 1b       	sub	r21, r25
    3ce8:	99 f0       	breq	.+38     	; 0x3d10 <__addsf3x+0x5c>
    3cea:	59 3f       	cpi	r21, 0xF9	; 249
    3cec:	50 f4       	brcc	.+20     	; 0x3d02 <__addsf3x+0x4e>
    3cee:	50 3e       	cpi	r21, 0xE0	; 224
    3cf0:	68 f1       	brcs	.+90     	; 0x3d4c <__addsf3x+0x98>
    3cf2:	1a 16       	cp	r1, r26
    3cf4:	f0 40       	sbci	r31, 0x00	; 0
    3cf6:	a2 2f       	mov	r26, r18
    3cf8:	23 2f       	mov	r18, r19
    3cfa:	34 2f       	mov	r19, r20
    3cfc:	44 27       	eor	r20, r20
    3cfe:	58 5f       	subi	r21, 0xF8	; 248
    3d00:	f3 cf       	rjmp	.-26     	; 0x3ce8 <__addsf3x+0x34>
    3d02:	46 95       	lsr	r20
    3d04:	37 95       	ror	r19
    3d06:	27 95       	ror	r18
    3d08:	a7 95       	ror	r26
    3d0a:	f0 40       	sbci	r31, 0x00	; 0
    3d0c:	53 95       	inc	r21
    3d0e:	c9 f7       	brne	.-14     	; 0x3d02 <__addsf3x+0x4e>
    3d10:	7e f4       	brtc	.+30     	; 0x3d30 <__addsf3x+0x7c>
    3d12:	1f 16       	cp	r1, r31
    3d14:	ba 0b       	sbc	r27, r26
    3d16:	62 0b       	sbc	r22, r18
    3d18:	73 0b       	sbc	r23, r19
    3d1a:	84 0b       	sbc	r24, r20
    3d1c:	ba f0       	brmi	.+46     	; 0x3d4c <__addsf3x+0x98>
    3d1e:	91 50       	subi	r25, 0x01	; 1
    3d20:	a1 f0       	breq	.+40     	; 0x3d4a <__addsf3x+0x96>
    3d22:	ff 0f       	add	r31, r31
    3d24:	bb 1f       	adc	r27, r27
    3d26:	66 1f       	adc	r22, r22
    3d28:	77 1f       	adc	r23, r23
    3d2a:	88 1f       	adc	r24, r24
    3d2c:	c2 f7       	brpl	.-16     	; 0x3d1e <__addsf3x+0x6a>
    3d2e:	0e c0       	rjmp	.+28     	; 0x3d4c <__addsf3x+0x98>
    3d30:	ba 0f       	add	r27, r26
    3d32:	62 1f       	adc	r22, r18
    3d34:	73 1f       	adc	r23, r19
    3d36:	84 1f       	adc	r24, r20
    3d38:	48 f4       	brcc	.+18     	; 0x3d4c <__addsf3x+0x98>
    3d3a:	87 95       	ror	r24
    3d3c:	77 95       	ror	r23
    3d3e:	67 95       	ror	r22
    3d40:	b7 95       	ror	r27
    3d42:	f7 95       	ror	r31
    3d44:	9e 3f       	cpi	r25, 0xFE	; 254
    3d46:	08 f0       	brcs	.+2      	; 0x3d4a <__addsf3x+0x96>
    3d48:	b3 cf       	rjmp	.-154    	; 0x3cb0 <__addsf3+0x1e>
    3d4a:	93 95       	inc	r25
    3d4c:	88 0f       	add	r24, r24
    3d4e:	08 f0       	brcs	.+2      	; 0x3d52 <__addsf3x+0x9e>
    3d50:	99 27       	eor	r25, r25
    3d52:	ee 0f       	add	r30, r30
    3d54:	97 95       	ror	r25
    3d56:	87 95       	ror	r24
    3d58:	08 95       	ret

00003d5a <__fixsfsi>:
    3d5a:	04 d0       	rcall	.+8      	; 0x3d64 <__fixunssfsi>
    3d5c:	68 94       	set
    3d5e:	b1 11       	cpse	r27, r1
    3d60:	b5 c0       	rjmp	.+362    	; 0x3ecc <__fp_szero>
    3d62:	08 95       	ret

00003d64 <__fixunssfsi>:
    3d64:	98 d0       	rcall	.+304    	; 0x3e96 <__fp_splitA>
    3d66:	88 f0       	brcs	.+34     	; 0x3d8a <__fixunssfsi+0x26>
    3d68:	9f 57       	subi	r25, 0x7F	; 127
    3d6a:	90 f0       	brcs	.+36     	; 0x3d90 <__fixunssfsi+0x2c>
    3d6c:	b9 2f       	mov	r27, r25
    3d6e:	99 27       	eor	r25, r25
    3d70:	b7 51       	subi	r27, 0x17	; 23
    3d72:	a0 f0       	brcs	.+40     	; 0x3d9c <__fixunssfsi+0x38>
    3d74:	d1 f0       	breq	.+52     	; 0x3daa <__fixunssfsi+0x46>
    3d76:	66 0f       	add	r22, r22
    3d78:	77 1f       	adc	r23, r23
    3d7a:	88 1f       	adc	r24, r24
    3d7c:	99 1f       	adc	r25, r25
    3d7e:	1a f0       	brmi	.+6      	; 0x3d86 <__fixunssfsi+0x22>
    3d80:	ba 95       	dec	r27
    3d82:	c9 f7       	brne	.-14     	; 0x3d76 <__fixunssfsi+0x12>
    3d84:	12 c0       	rjmp	.+36     	; 0x3daa <__fixunssfsi+0x46>
    3d86:	b1 30       	cpi	r27, 0x01	; 1
    3d88:	81 f0       	breq	.+32     	; 0x3daa <__fixunssfsi+0x46>
    3d8a:	9f d0       	rcall	.+318    	; 0x3eca <__fp_zero>
    3d8c:	b1 e0       	ldi	r27, 0x01	; 1
    3d8e:	08 95       	ret
    3d90:	9c c0       	rjmp	.+312    	; 0x3eca <__fp_zero>
    3d92:	67 2f       	mov	r22, r23
    3d94:	78 2f       	mov	r23, r24
    3d96:	88 27       	eor	r24, r24
    3d98:	b8 5f       	subi	r27, 0xF8	; 248
    3d9a:	39 f0       	breq	.+14     	; 0x3daa <__fixunssfsi+0x46>
    3d9c:	b9 3f       	cpi	r27, 0xF9	; 249
    3d9e:	cc f3       	brlt	.-14     	; 0x3d92 <__fixunssfsi+0x2e>
    3da0:	86 95       	lsr	r24
    3da2:	77 95       	ror	r23
    3da4:	67 95       	ror	r22
    3da6:	b3 95       	inc	r27
    3da8:	d9 f7       	brne	.-10     	; 0x3da0 <__fixunssfsi+0x3c>
    3daa:	3e f4       	brtc	.+14     	; 0x3dba <__fixunssfsi+0x56>
    3dac:	90 95       	com	r25
    3dae:	80 95       	com	r24
    3db0:	70 95       	com	r23
    3db2:	61 95       	neg	r22
    3db4:	7f 4f       	sbci	r23, 0xFF	; 255
    3db6:	8f 4f       	sbci	r24, 0xFF	; 255
    3db8:	9f 4f       	sbci	r25, 0xFF	; 255
    3dba:	08 95       	ret

00003dbc <__floatunsisf>:
    3dbc:	e8 94       	clt
    3dbe:	09 c0       	rjmp	.+18     	; 0x3dd2 <__floatsisf+0x12>

00003dc0 <__floatsisf>:
    3dc0:	97 fb       	bst	r25, 7
    3dc2:	3e f4       	brtc	.+14     	; 0x3dd2 <__floatsisf+0x12>
    3dc4:	90 95       	com	r25
    3dc6:	80 95       	com	r24
    3dc8:	70 95       	com	r23
    3dca:	61 95       	neg	r22
    3dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dce:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd2:	99 23       	and	r25, r25
    3dd4:	a9 f0       	breq	.+42     	; 0x3e00 <__floatsisf+0x40>
    3dd6:	f9 2f       	mov	r31, r25
    3dd8:	96 e9       	ldi	r25, 0x96	; 150
    3dda:	bb 27       	eor	r27, r27
    3ddc:	93 95       	inc	r25
    3dde:	f6 95       	lsr	r31
    3de0:	87 95       	ror	r24
    3de2:	77 95       	ror	r23
    3de4:	67 95       	ror	r22
    3de6:	b7 95       	ror	r27
    3de8:	f1 11       	cpse	r31, r1
    3dea:	f8 cf       	rjmp	.-16     	; 0x3ddc <__floatsisf+0x1c>
    3dec:	fa f4       	brpl	.+62     	; 0x3e2c <__floatsisf+0x6c>
    3dee:	bb 0f       	add	r27, r27
    3df0:	11 f4       	brne	.+4      	; 0x3df6 <__floatsisf+0x36>
    3df2:	60 ff       	sbrs	r22, 0
    3df4:	1b c0       	rjmp	.+54     	; 0x3e2c <__floatsisf+0x6c>
    3df6:	6f 5f       	subi	r22, 0xFF	; 255
    3df8:	7f 4f       	sbci	r23, 0xFF	; 255
    3dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    3dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dfe:	16 c0       	rjmp	.+44     	; 0x3e2c <__floatsisf+0x6c>
    3e00:	88 23       	and	r24, r24
    3e02:	11 f0       	breq	.+4      	; 0x3e08 <__floatsisf+0x48>
    3e04:	96 e9       	ldi	r25, 0x96	; 150
    3e06:	11 c0       	rjmp	.+34     	; 0x3e2a <__floatsisf+0x6a>
    3e08:	77 23       	and	r23, r23
    3e0a:	21 f0       	breq	.+8      	; 0x3e14 <__floatsisf+0x54>
    3e0c:	9e e8       	ldi	r25, 0x8E	; 142
    3e0e:	87 2f       	mov	r24, r23
    3e10:	76 2f       	mov	r23, r22
    3e12:	05 c0       	rjmp	.+10     	; 0x3e1e <__floatsisf+0x5e>
    3e14:	66 23       	and	r22, r22
    3e16:	71 f0       	breq	.+28     	; 0x3e34 <__floatsisf+0x74>
    3e18:	96 e8       	ldi	r25, 0x86	; 134
    3e1a:	86 2f       	mov	r24, r22
    3e1c:	70 e0       	ldi	r23, 0x00	; 0
    3e1e:	60 e0       	ldi	r22, 0x00	; 0
    3e20:	2a f0       	brmi	.+10     	; 0x3e2c <__floatsisf+0x6c>
    3e22:	9a 95       	dec	r25
    3e24:	66 0f       	add	r22, r22
    3e26:	77 1f       	adc	r23, r23
    3e28:	88 1f       	adc	r24, r24
    3e2a:	da f7       	brpl	.-10     	; 0x3e22 <__floatsisf+0x62>
    3e2c:	88 0f       	add	r24, r24
    3e2e:	96 95       	lsr	r25
    3e30:	87 95       	ror	r24
    3e32:	97 f9       	bld	r25, 7
    3e34:	08 95       	ret

00003e36 <__fp_inf>:
    3e36:	97 f9       	bld	r25, 7
    3e38:	9f 67       	ori	r25, 0x7F	; 127
    3e3a:	80 e8       	ldi	r24, 0x80	; 128
    3e3c:	70 e0       	ldi	r23, 0x00	; 0
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	08 95       	ret

00003e42 <__fp_nan>:
    3e42:	9f ef       	ldi	r25, 0xFF	; 255
    3e44:	80 ec       	ldi	r24, 0xC0	; 192
    3e46:	08 95       	ret

00003e48 <__fp_pscA>:
    3e48:	00 24       	eor	r0, r0
    3e4a:	0a 94       	dec	r0
    3e4c:	16 16       	cp	r1, r22
    3e4e:	17 06       	cpc	r1, r23
    3e50:	18 06       	cpc	r1, r24
    3e52:	09 06       	cpc	r0, r25
    3e54:	08 95       	ret

00003e56 <__fp_pscB>:
    3e56:	00 24       	eor	r0, r0
    3e58:	0a 94       	dec	r0
    3e5a:	12 16       	cp	r1, r18
    3e5c:	13 06       	cpc	r1, r19
    3e5e:	14 06       	cpc	r1, r20
    3e60:	05 06       	cpc	r0, r21
    3e62:	08 95       	ret

00003e64 <__fp_round>:
    3e64:	09 2e       	mov	r0, r25
    3e66:	03 94       	inc	r0
    3e68:	00 0c       	add	r0, r0
    3e6a:	11 f4       	brne	.+4      	; 0x3e70 <__fp_round+0xc>
    3e6c:	88 23       	and	r24, r24
    3e6e:	52 f0       	brmi	.+20     	; 0x3e84 <__fp_round+0x20>
    3e70:	bb 0f       	add	r27, r27
    3e72:	40 f4       	brcc	.+16     	; 0x3e84 <__fp_round+0x20>
    3e74:	bf 2b       	or	r27, r31
    3e76:	11 f4       	brne	.+4      	; 0x3e7c <__fp_round+0x18>
    3e78:	60 ff       	sbrs	r22, 0
    3e7a:	04 c0       	rjmp	.+8      	; 0x3e84 <__fp_round+0x20>
    3e7c:	6f 5f       	subi	r22, 0xFF	; 255
    3e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e80:	8f 4f       	sbci	r24, 0xFF	; 255
    3e82:	9f 4f       	sbci	r25, 0xFF	; 255
    3e84:	08 95       	ret

00003e86 <__fp_split3>:
    3e86:	57 fd       	sbrc	r21, 7
    3e88:	90 58       	subi	r25, 0x80	; 128
    3e8a:	44 0f       	add	r20, r20
    3e8c:	55 1f       	adc	r21, r21
    3e8e:	59 f0       	breq	.+22     	; 0x3ea6 <__fp_splitA+0x10>
    3e90:	5f 3f       	cpi	r21, 0xFF	; 255
    3e92:	71 f0       	breq	.+28     	; 0x3eb0 <__fp_splitA+0x1a>
    3e94:	47 95       	ror	r20

00003e96 <__fp_splitA>:
    3e96:	88 0f       	add	r24, r24
    3e98:	97 fb       	bst	r25, 7
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	61 f0       	breq	.+24     	; 0x3eb6 <__fp_splitA+0x20>
    3e9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3ea0:	79 f0       	breq	.+30     	; 0x3ec0 <__fp_splitA+0x2a>
    3ea2:	87 95       	ror	r24
    3ea4:	08 95       	ret
    3ea6:	12 16       	cp	r1, r18
    3ea8:	13 06       	cpc	r1, r19
    3eaa:	14 06       	cpc	r1, r20
    3eac:	55 1f       	adc	r21, r21
    3eae:	f2 cf       	rjmp	.-28     	; 0x3e94 <__fp_split3+0xe>
    3eb0:	46 95       	lsr	r20
    3eb2:	f1 df       	rcall	.-30     	; 0x3e96 <__fp_splitA>
    3eb4:	08 c0       	rjmp	.+16     	; 0x3ec6 <__fp_splitA+0x30>
    3eb6:	16 16       	cp	r1, r22
    3eb8:	17 06       	cpc	r1, r23
    3eba:	18 06       	cpc	r1, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	f1 cf       	rjmp	.-30     	; 0x3ea2 <__fp_splitA+0xc>
    3ec0:	86 95       	lsr	r24
    3ec2:	71 05       	cpc	r23, r1
    3ec4:	61 05       	cpc	r22, r1
    3ec6:	08 94       	sec
    3ec8:	08 95       	ret

00003eca <__fp_zero>:
    3eca:	e8 94       	clt

00003ecc <__fp_szero>:
    3ecc:	bb 27       	eor	r27, r27
    3ece:	66 27       	eor	r22, r22
    3ed0:	77 27       	eor	r23, r23
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	97 f9       	bld	r25, 7
    3ed6:	08 95       	ret

00003ed8 <__mulsf3>:
    3ed8:	0b d0       	rcall	.+22     	; 0x3ef0 <__mulsf3x>
    3eda:	c4 cf       	rjmp	.-120    	; 0x3e64 <__fp_round>
    3edc:	b5 df       	rcall	.-150    	; 0x3e48 <__fp_pscA>
    3ede:	28 f0       	brcs	.+10     	; 0x3eea <__mulsf3+0x12>
    3ee0:	ba df       	rcall	.-140    	; 0x3e56 <__fp_pscB>
    3ee2:	18 f0       	brcs	.+6      	; 0x3eea <__mulsf3+0x12>
    3ee4:	95 23       	and	r25, r21
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <__mulsf3+0x12>
    3ee8:	a6 cf       	rjmp	.-180    	; 0x3e36 <__fp_inf>
    3eea:	ab cf       	rjmp	.-170    	; 0x3e42 <__fp_nan>
    3eec:	11 24       	eor	r1, r1
    3eee:	ee cf       	rjmp	.-36     	; 0x3ecc <__fp_szero>

00003ef0 <__mulsf3x>:
    3ef0:	ca df       	rcall	.-108    	; 0x3e86 <__fp_split3>
    3ef2:	a0 f3       	brcs	.-24     	; 0x3edc <__mulsf3+0x4>

00003ef4 <__mulsf3_pse>:
    3ef4:	95 9f       	mul	r25, r21
    3ef6:	d1 f3       	breq	.-12     	; 0x3eec <__mulsf3+0x14>
    3ef8:	95 0f       	add	r25, r21
    3efa:	50 e0       	ldi	r21, 0x00	; 0
    3efc:	55 1f       	adc	r21, r21
    3efe:	62 9f       	mul	r22, r18
    3f00:	f0 01       	movw	r30, r0
    3f02:	72 9f       	mul	r23, r18
    3f04:	bb 27       	eor	r27, r27
    3f06:	f0 0d       	add	r31, r0
    3f08:	b1 1d       	adc	r27, r1
    3f0a:	63 9f       	mul	r22, r19
    3f0c:	aa 27       	eor	r26, r26
    3f0e:	f0 0d       	add	r31, r0
    3f10:	b1 1d       	adc	r27, r1
    3f12:	aa 1f       	adc	r26, r26
    3f14:	64 9f       	mul	r22, r20
    3f16:	66 27       	eor	r22, r22
    3f18:	b0 0d       	add	r27, r0
    3f1a:	a1 1d       	adc	r26, r1
    3f1c:	66 1f       	adc	r22, r22
    3f1e:	82 9f       	mul	r24, r18
    3f20:	22 27       	eor	r18, r18
    3f22:	b0 0d       	add	r27, r0
    3f24:	a1 1d       	adc	r26, r1
    3f26:	62 1f       	adc	r22, r18
    3f28:	73 9f       	mul	r23, r19
    3f2a:	b0 0d       	add	r27, r0
    3f2c:	a1 1d       	adc	r26, r1
    3f2e:	62 1f       	adc	r22, r18
    3f30:	83 9f       	mul	r24, r19
    3f32:	a0 0d       	add	r26, r0
    3f34:	61 1d       	adc	r22, r1
    3f36:	22 1f       	adc	r18, r18
    3f38:	74 9f       	mul	r23, r20
    3f3a:	33 27       	eor	r19, r19
    3f3c:	a0 0d       	add	r26, r0
    3f3e:	61 1d       	adc	r22, r1
    3f40:	23 1f       	adc	r18, r19
    3f42:	84 9f       	mul	r24, r20
    3f44:	60 0d       	add	r22, r0
    3f46:	21 1d       	adc	r18, r1
    3f48:	82 2f       	mov	r24, r18
    3f4a:	76 2f       	mov	r23, r22
    3f4c:	6a 2f       	mov	r22, r26
    3f4e:	11 24       	eor	r1, r1
    3f50:	9f 57       	subi	r25, 0x7F	; 127
    3f52:	50 40       	sbci	r21, 0x00	; 0
    3f54:	8a f0       	brmi	.+34     	; 0x3f78 <__mulsf3_pse+0x84>
    3f56:	e1 f0       	breq	.+56     	; 0x3f90 <__mulsf3_pse+0x9c>
    3f58:	88 23       	and	r24, r24
    3f5a:	4a f0       	brmi	.+18     	; 0x3f6e <__mulsf3_pse+0x7a>
    3f5c:	ee 0f       	add	r30, r30
    3f5e:	ff 1f       	adc	r31, r31
    3f60:	bb 1f       	adc	r27, r27
    3f62:	66 1f       	adc	r22, r22
    3f64:	77 1f       	adc	r23, r23
    3f66:	88 1f       	adc	r24, r24
    3f68:	91 50       	subi	r25, 0x01	; 1
    3f6a:	50 40       	sbci	r21, 0x00	; 0
    3f6c:	a9 f7       	brne	.-22     	; 0x3f58 <__mulsf3_pse+0x64>
    3f6e:	9e 3f       	cpi	r25, 0xFE	; 254
    3f70:	51 05       	cpc	r21, r1
    3f72:	70 f0       	brcs	.+28     	; 0x3f90 <__mulsf3_pse+0x9c>
    3f74:	60 cf       	rjmp	.-320    	; 0x3e36 <__fp_inf>
    3f76:	aa cf       	rjmp	.-172    	; 0x3ecc <__fp_szero>
    3f78:	5f 3f       	cpi	r21, 0xFF	; 255
    3f7a:	ec f3       	brlt	.-6      	; 0x3f76 <__mulsf3_pse+0x82>
    3f7c:	98 3e       	cpi	r25, 0xE8	; 232
    3f7e:	dc f3       	brlt	.-10     	; 0x3f76 <__mulsf3_pse+0x82>
    3f80:	86 95       	lsr	r24
    3f82:	77 95       	ror	r23
    3f84:	67 95       	ror	r22
    3f86:	b7 95       	ror	r27
    3f88:	f7 95       	ror	r31
    3f8a:	e7 95       	ror	r30
    3f8c:	9f 5f       	subi	r25, 0xFF	; 255
    3f8e:	c1 f7       	brne	.-16     	; 0x3f80 <__mulsf3_pse+0x8c>
    3f90:	fe 2b       	or	r31, r30
    3f92:	88 0f       	add	r24, r24
    3f94:	91 1d       	adc	r25, r1
    3f96:	96 95       	lsr	r25
    3f98:	87 95       	ror	r24
    3f9a:	97 f9       	bld	r25, 7
    3f9c:	08 95       	ret

00003f9e <__divmodhi4>:
    3f9e:	97 fb       	bst	r25, 7
    3fa0:	07 2e       	mov	r0, r23
    3fa2:	16 f4       	brtc	.+4      	; 0x3fa8 <__divmodhi4+0xa>
    3fa4:	00 94       	com	r0
    3fa6:	06 d0       	rcall	.+12     	; 0x3fb4 <__divmodhi4_neg1>
    3fa8:	77 fd       	sbrc	r23, 7
    3faa:	08 d0       	rcall	.+16     	; 0x3fbc <__divmodhi4_neg2>
    3fac:	6d d0       	rcall	.+218    	; 0x4088 <__udivmodhi4>
    3fae:	07 fc       	sbrc	r0, 7
    3fb0:	05 d0       	rcall	.+10     	; 0x3fbc <__divmodhi4_neg2>
    3fb2:	3e f4       	brtc	.+14     	; 0x3fc2 <__divmodhi4_exit>

00003fb4 <__divmodhi4_neg1>:
    3fb4:	90 95       	com	r25
    3fb6:	81 95       	neg	r24
    3fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3fba:	08 95       	ret

00003fbc <__divmodhi4_neg2>:
    3fbc:	70 95       	com	r23
    3fbe:	61 95       	neg	r22
    3fc0:	7f 4f       	sbci	r23, 0xFF	; 255

00003fc2 <__divmodhi4_exit>:
    3fc2:	08 95       	ret

00003fc4 <__udivmodsi4>:
    3fc4:	a1 e2       	ldi	r26, 0x21	; 33
    3fc6:	1a 2e       	mov	r1, r26
    3fc8:	aa 1b       	sub	r26, r26
    3fca:	bb 1b       	sub	r27, r27
    3fcc:	fd 01       	movw	r30, r26
    3fce:	0d c0       	rjmp	.+26     	; 0x3fea <__udivmodsi4_ep>

00003fd0 <__udivmodsi4_loop>:
    3fd0:	aa 1f       	adc	r26, r26
    3fd2:	bb 1f       	adc	r27, r27
    3fd4:	ee 1f       	adc	r30, r30
    3fd6:	ff 1f       	adc	r31, r31
    3fd8:	a2 17       	cp	r26, r18
    3fda:	b3 07       	cpc	r27, r19
    3fdc:	e4 07       	cpc	r30, r20
    3fde:	f5 07       	cpc	r31, r21
    3fe0:	20 f0       	brcs	.+8      	; 0x3fea <__udivmodsi4_ep>
    3fe2:	a2 1b       	sub	r26, r18
    3fe4:	b3 0b       	sbc	r27, r19
    3fe6:	e4 0b       	sbc	r30, r20
    3fe8:	f5 0b       	sbc	r31, r21

00003fea <__udivmodsi4_ep>:
    3fea:	66 1f       	adc	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	88 1f       	adc	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	1a 94       	dec	r1
    3ff4:	69 f7       	brne	.-38     	; 0x3fd0 <__udivmodsi4_loop>
    3ff6:	60 95       	com	r22
    3ff8:	70 95       	com	r23
    3ffa:	80 95       	com	r24
    3ffc:	90 95       	com	r25
    3ffe:	9b 01       	movw	r18, r22
    4000:	ac 01       	movw	r20, r24
    4002:	bd 01       	movw	r22, r26
    4004:	cf 01       	movw	r24, r30
    4006:	08 95       	ret

00004008 <__umulhisi3>:
    4008:	a2 9f       	mul	r26, r18
    400a:	b0 01       	movw	r22, r0
    400c:	b3 9f       	mul	r27, r19
    400e:	c0 01       	movw	r24, r0
    4010:	a3 9f       	mul	r26, r19
    4012:	70 0d       	add	r23, r0
    4014:	81 1d       	adc	r24, r1
    4016:	11 24       	eor	r1, r1
    4018:	91 1d       	adc	r25, r1
    401a:	b2 9f       	mul	r27, r18
    401c:	70 0d       	add	r23, r0
    401e:	81 1d       	adc	r24, r1
    4020:	11 24       	eor	r1, r1
    4022:	91 1d       	adc	r25, r1
    4024:	08 95       	ret

00004026 <__prologue_saves__>:
    4026:	2f 92       	push	r2
    4028:	3f 92       	push	r3
    402a:	4f 92       	push	r4
    402c:	5f 92       	push	r5
    402e:	6f 92       	push	r6
    4030:	7f 92       	push	r7
    4032:	8f 92       	push	r8
    4034:	9f 92       	push	r9
    4036:	af 92       	push	r10
    4038:	bf 92       	push	r11
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	ca 1b       	sub	r28, r26
    4050:	db 0b       	sbc	r29, r27
    4052:	cd bf       	out	0x3d, r28	; 61
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	19 94       	eijmp

00004058 <__epilogue_restores__>:
    4058:	2a 88       	ldd	r2, Y+18	; 0x12
    405a:	39 88       	ldd	r3, Y+17	; 0x11
    405c:	48 88       	ldd	r4, Y+16	; 0x10
    405e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4060:	6e 84       	ldd	r6, Y+14	; 0x0e
    4062:	7d 84       	ldd	r7, Y+13	; 0x0d
    4064:	8c 84       	ldd	r8, Y+12	; 0x0c
    4066:	9b 84       	ldd	r9, Y+11	; 0x0b
    4068:	aa 84       	ldd	r10, Y+10	; 0x0a
    406a:	b9 84       	ldd	r11, Y+9	; 0x09
    406c:	c8 84       	ldd	r12, Y+8	; 0x08
    406e:	df 80       	ldd	r13, Y+7	; 0x07
    4070:	ee 80       	ldd	r14, Y+6	; 0x06
    4072:	fd 80       	ldd	r15, Y+5	; 0x05
    4074:	0c 81       	ldd	r16, Y+4	; 0x04
    4076:	1b 81       	ldd	r17, Y+3	; 0x03
    4078:	aa 81       	ldd	r26, Y+2	; 0x02
    407a:	b9 81       	ldd	r27, Y+1	; 0x01
    407c:	ce 0f       	add	r28, r30
    407e:	d1 1d       	adc	r29, r1
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	ed 01       	movw	r28, r26
    4086:	08 95       	ret

00004088 <__udivmodhi4>:
    4088:	aa 1b       	sub	r26, r26
    408a:	bb 1b       	sub	r27, r27
    408c:	51 e1       	ldi	r21, 0x11	; 17
    408e:	07 c0       	rjmp	.+14     	; 0x409e <__udivmodhi4_ep>

00004090 <__udivmodhi4_loop>:
    4090:	aa 1f       	adc	r26, r26
    4092:	bb 1f       	adc	r27, r27
    4094:	a6 17       	cp	r26, r22
    4096:	b7 07       	cpc	r27, r23
    4098:	10 f0       	brcs	.+4      	; 0x409e <__udivmodhi4_ep>
    409a:	a6 1b       	sub	r26, r22
    409c:	b7 0b       	sbc	r27, r23

0000409e <__udivmodhi4_ep>:
    409e:	88 1f       	adc	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	5a 95       	dec	r21
    40a4:	a9 f7       	brne	.-22     	; 0x4090 <__udivmodhi4_loop>
    40a6:	80 95       	com	r24
    40a8:	90 95       	com	r25
    40aa:	bc 01       	movw	r22, r24
    40ac:	cd 01       	movw	r24, r26
    40ae:	08 95       	ret

000040b0 <malloc>:
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    40b4:	82 30       	cpi	r24, 0x02	; 2
    40b6:	91 05       	cpc	r25, r1
    40b8:	10 f4       	brcc	.+4      	; 0x40be <malloc+0xe>
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	e0 91 63 24 	lds	r30, 0x2463
    40c2:	f0 91 64 24 	lds	r31, 0x2464
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	30 e0       	ldi	r19, 0x00	; 0
    40ca:	c0 e0       	ldi	r28, 0x00	; 0
    40cc:	d0 e0       	ldi	r29, 0x00	; 0
    40ce:	30 97       	sbiw	r30, 0x00	; 0
    40d0:	11 f1       	breq	.+68     	; 0x4116 <malloc+0x66>
    40d2:	40 81       	ld	r20, Z
    40d4:	51 81       	ldd	r21, Z+1	; 0x01
    40d6:	48 17       	cp	r20, r24
    40d8:	59 07       	cpc	r21, r25
    40da:	c0 f0       	brcs	.+48     	; 0x410c <malloc+0x5c>
    40dc:	48 17       	cp	r20, r24
    40de:	59 07       	cpc	r21, r25
    40e0:	61 f4       	brne	.+24     	; 0x40fa <malloc+0x4a>
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 97       	sbiw	r28, 0x00	; 0
    40e8:	19 f0       	breq	.+6      	; 0x40f0 <malloc+0x40>
    40ea:	8a 83       	std	Y+2, r24	; 0x02
    40ec:	9b 83       	std	Y+3, r25	; 0x03
    40ee:	2b c0       	rjmp	.+86     	; 0x4146 <malloc+0x96>
    40f0:	80 93 63 24 	sts	0x2463, r24
    40f4:	90 93 64 24 	sts	0x2464, r25
    40f8:	26 c0       	rjmp	.+76     	; 0x4146 <malloc+0x96>
    40fa:	21 15       	cp	r18, r1
    40fc:	31 05       	cpc	r19, r1
    40fe:	19 f0       	breq	.+6      	; 0x4106 <malloc+0x56>
    4100:	42 17       	cp	r20, r18
    4102:	53 07       	cpc	r21, r19
    4104:	18 f4       	brcc	.+6      	; 0x410c <malloc+0x5c>
    4106:	9a 01       	movw	r18, r20
    4108:	be 01       	movw	r22, r28
    410a:	df 01       	movw	r26, r30
    410c:	ef 01       	movw	r28, r30
    410e:	02 80       	ldd	r0, Z+2	; 0x02
    4110:	f3 81       	ldd	r31, Z+3	; 0x03
    4112:	e0 2d       	mov	r30, r0
    4114:	dc cf       	rjmp	.-72     	; 0x40ce <malloc+0x1e>
    4116:	21 15       	cp	r18, r1
    4118:	31 05       	cpc	r19, r1
    411a:	09 f1       	breq	.+66     	; 0x415e <malloc+0xae>
    411c:	28 1b       	sub	r18, r24
    411e:	39 0b       	sbc	r19, r25
    4120:	24 30       	cpi	r18, 0x04	; 4
    4122:	31 05       	cpc	r19, r1
    4124:	90 f4       	brcc	.+36     	; 0x414a <malloc+0x9a>
    4126:	12 96       	adiw	r26, 0x02	; 2
    4128:	8d 91       	ld	r24, X+
    412a:	9c 91       	ld	r25, X
    412c:	13 97       	sbiw	r26, 0x03	; 3
    412e:	61 15       	cp	r22, r1
    4130:	71 05       	cpc	r23, r1
    4132:	21 f0       	breq	.+8      	; 0x413c <malloc+0x8c>
    4134:	fb 01       	movw	r30, r22
    4136:	82 83       	std	Z+2, r24	; 0x02
    4138:	93 83       	std	Z+3, r25	; 0x03
    413a:	04 c0       	rjmp	.+8      	; 0x4144 <malloc+0x94>
    413c:	80 93 63 24 	sts	0x2463, r24
    4140:	90 93 64 24 	sts	0x2464, r25
    4144:	fd 01       	movw	r30, r26
    4146:	32 96       	adiw	r30, 0x02	; 2
    4148:	44 c0       	rjmp	.+136    	; 0x41d2 <malloc+0x122>
    414a:	fd 01       	movw	r30, r26
    414c:	e2 0f       	add	r30, r18
    414e:	f3 1f       	adc	r31, r19
    4150:	81 93       	st	Z+, r24
    4152:	91 93       	st	Z+, r25
    4154:	22 50       	subi	r18, 0x02	; 2
    4156:	31 09       	sbc	r19, r1
    4158:	2d 93       	st	X+, r18
    415a:	3c 93       	st	X, r19
    415c:	3a c0       	rjmp	.+116    	; 0x41d2 <malloc+0x122>
    415e:	20 91 61 24 	lds	r18, 0x2461
    4162:	30 91 62 24 	lds	r19, 0x2462
    4166:	23 2b       	or	r18, r19
    4168:	41 f4       	brne	.+16     	; 0x417a <malloc+0xca>
    416a:	20 91 03 20 	lds	r18, 0x2003
    416e:	30 91 04 20 	lds	r19, 0x2004
    4172:	20 93 61 24 	sts	0x2461, r18
    4176:	30 93 62 24 	sts	0x2462, r19
    417a:	20 91 01 20 	lds	r18, 0x2001
    417e:	30 91 02 20 	lds	r19, 0x2002
    4182:	21 15       	cp	r18, r1
    4184:	31 05       	cpc	r19, r1
    4186:	41 f4       	brne	.+16     	; 0x4198 <malloc+0xe8>
    4188:	2d b7       	in	r18, 0x3d	; 61
    418a:	3e b7       	in	r19, 0x3e	; 62
    418c:	40 91 05 20 	lds	r20, 0x2005
    4190:	50 91 06 20 	lds	r21, 0x2006
    4194:	24 1b       	sub	r18, r20
    4196:	35 0b       	sbc	r19, r21
    4198:	e0 91 61 24 	lds	r30, 0x2461
    419c:	f0 91 62 24 	lds	r31, 0x2462
    41a0:	e2 17       	cp	r30, r18
    41a2:	f3 07       	cpc	r31, r19
    41a4:	a0 f4       	brcc	.+40     	; 0x41ce <malloc+0x11e>
    41a6:	2e 1b       	sub	r18, r30
    41a8:	3f 0b       	sbc	r19, r31
    41aa:	28 17       	cp	r18, r24
    41ac:	39 07       	cpc	r19, r25
    41ae:	78 f0       	brcs	.+30     	; 0x41ce <malloc+0x11e>
    41b0:	ac 01       	movw	r20, r24
    41b2:	4e 5f       	subi	r20, 0xFE	; 254
    41b4:	5f 4f       	sbci	r21, 0xFF	; 255
    41b6:	24 17       	cp	r18, r20
    41b8:	35 07       	cpc	r19, r21
    41ba:	48 f0       	brcs	.+18     	; 0x41ce <malloc+0x11e>
    41bc:	4e 0f       	add	r20, r30
    41be:	5f 1f       	adc	r21, r31
    41c0:	40 93 61 24 	sts	0x2461, r20
    41c4:	50 93 62 24 	sts	0x2462, r21
    41c8:	81 93       	st	Z+, r24
    41ca:	91 93       	st	Z+, r25
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <malloc+0x122>
    41ce:	e0 e0       	ldi	r30, 0x00	; 0
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	cf 01       	movw	r24, r30
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	08 95       	ret

000041da <free>:
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <free+0xe>
    41e6:	8c c0       	rjmp	.+280    	; 0x4300 <free+0x126>
    41e8:	fc 01       	movw	r30, r24
    41ea:	32 97       	sbiw	r30, 0x02	; 2
    41ec:	12 82       	std	Z+2, r1	; 0x02
    41ee:	13 82       	std	Z+3, r1	; 0x03
    41f0:	00 91 63 24 	lds	r16, 0x2463
    41f4:	10 91 64 24 	lds	r17, 0x2464
    41f8:	01 15       	cp	r16, r1
    41fa:	11 05       	cpc	r17, r1
    41fc:	81 f4       	brne	.+32     	; 0x421e <free+0x44>
    41fe:	20 81       	ld	r18, Z
    4200:	31 81       	ldd	r19, Z+1	; 0x01
    4202:	82 0f       	add	r24, r18
    4204:	93 1f       	adc	r25, r19
    4206:	20 91 61 24 	lds	r18, 0x2461
    420a:	30 91 62 24 	lds	r19, 0x2462
    420e:	28 17       	cp	r18, r24
    4210:	39 07       	cpc	r19, r25
    4212:	79 f5       	brne	.+94     	; 0x4272 <free+0x98>
    4214:	e0 93 61 24 	sts	0x2461, r30
    4218:	f0 93 62 24 	sts	0x2462, r31
    421c:	71 c0       	rjmp	.+226    	; 0x4300 <free+0x126>
    421e:	d8 01       	movw	r26, r16
    4220:	40 e0       	ldi	r20, 0x00	; 0
    4222:	50 e0       	ldi	r21, 0x00	; 0
    4224:	ae 17       	cp	r26, r30
    4226:	bf 07       	cpc	r27, r31
    4228:	50 f4       	brcc	.+20     	; 0x423e <free+0x64>
    422a:	12 96       	adiw	r26, 0x02	; 2
    422c:	2d 91       	ld	r18, X+
    422e:	3c 91       	ld	r19, X
    4230:	13 97       	sbiw	r26, 0x03	; 3
    4232:	ad 01       	movw	r20, r26
    4234:	21 15       	cp	r18, r1
    4236:	31 05       	cpc	r19, r1
    4238:	09 f1       	breq	.+66     	; 0x427c <free+0xa2>
    423a:	d9 01       	movw	r26, r18
    423c:	f3 cf       	rjmp	.-26     	; 0x4224 <free+0x4a>
    423e:	9d 01       	movw	r18, r26
    4240:	da 01       	movw	r26, r20
    4242:	22 83       	std	Z+2, r18	; 0x02
    4244:	33 83       	std	Z+3, r19	; 0x03
    4246:	60 81       	ld	r22, Z
    4248:	71 81       	ldd	r23, Z+1	; 0x01
    424a:	86 0f       	add	r24, r22
    424c:	97 1f       	adc	r25, r23
    424e:	82 17       	cp	r24, r18
    4250:	93 07       	cpc	r25, r19
    4252:	69 f4       	brne	.+26     	; 0x426e <free+0x94>
    4254:	ec 01       	movw	r28, r24
    4256:	28 81       	ld	r18, Y
    4258:	39 81       	ldd	r19, Y+1	; 0x01
    425a:	26 0f       	add	r18, r22
    425c:	37 1f       	adc	r19, r23
    425e:	2e 5f       	subi	r18, 0xFE	; 254
    4260:	3f 4f       	sbci	r19, 0xFF	; 255
    4262:	20 83       	st	Z, r18
    4264:	31 83       	std	Z+1, r19	; 0x01
    4266:	8a 81       	ldd	r24, Y+2	; 0x02
    4268:	9b 81       	ldd	r25, Y+3	; 0x03
    426a:	82 83       	std	Z+2, r24	; 0x02
    426c:	93 83       	std	Z+3, r25	; 0x03
    426e:	45 2b       	or	r20, r21
    4270:	29 f4       	brne	.+10     	; 0x427c <free+0xa2>
    4272:	e0 93 63 24 	sts	0x2463, r30
    4276:	f0 93 64 24 	sts	0x2464, r31
    427a:	42 c0       	rjmp	.+132    	; 0x4300 <free+0x126>
    427c:	12 96       	adiw	r26, 0x02	; 2
    427e:	ed 93       	st	X+, r30
    4280:	fc 93       	st	X, r31
    4282:	13 97       	sbiw	r26, 0x03	; 3
    4284:	ed 01       	movw	r28, r26
    4286:	49 91       	ld	r20, Y+
    4288:	59 91       	ld	r21, Y+
    428a:	9e 01       	movw	r18, r28
    428c:	24 0f       	add	r18, r20
    428e:	35 1f       	adc	r19, r21
    4290:	e2 17       	cp	r30, r18
    4292:	f3 07       	cpc	r31, r19
    4294:	71 f4       	brne	.+28     	; 0x42b2 <free+0xd8>
    4296:	80 81       	ld	r24, Z
    4298:	91 81       	ldd	r25, Z+1	; 0x01
    429a:	84 0f       	add	r24, r20
    429c:	95 1f       	adc	r25, r21
    429e:	02 96       	adiw	r24, 0x02	; 2
    42a0:	8d 93       	st	X+, r24
    42a2:	9c 93       	st	X, r25
    42a4:	11 97       	sbiw	r26, 0x01	; 1
    42a6:	82 81       	ldd	r24, Z+2	; 0x02
    42a8:	93 81       	ldd	r25, Z+3	; 0x03
    42aa:	12 96       	adiw	r26, 0x02	; 2
    42ac:	8d 93       	st	X+, r24
    42ae:	9c 93       	st	X, r25
    42b0:	13 97       	sbiw	r26, 0x03	; 3
    42b2:	e0 e0       	ldi	r30, 0x00	; 0
    42b4:	f0 e0       	ldi	r31, 0x00	; 0
    42b6:	d8 01       	movw	r26, r16
    42b8:	12 96       	adiw	r26, 0x02	; 2
    42ba:	8d 91       	ld	r24, X+
    42bc:	9c 91       	ld	r25, X
    42be:	13 97       	sbiw	r26, 0x03	; 3
    42c0:	00 97       	sbiw	r24, 0x00	; 0
    42c2:	19 f0       	breq	.+6      	; 0x42ca <free+0xf0>
    42c4:	f8 01       	movw	r30, r16
    42c6:	8c 01       	movw	r16, r24
    42c8:	f6 cf       	rjmp	.-20     	; 0x42b6 <free+0xdc>
    42ca:	8d 91       	ld	r24, X+
    42cc:	9c 91       	ld	r25, X
    42ce:	98 01       	movw	r18, r16
    42d0:	2e 5f       	subi	r18, 0xFE	; 254
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	82 0f       	add	r24, r18
    42d6:	93 1f       	adc	r25, r19
    42d8:	20 91 61 24 	lds	r18, 0x2461
    42dc:	30 91 62 24 	lds	r19, 0x2462
    42e0:	28 17       	cp	r18, r24
    42e2:	39 07       	cpc	r19, r25
    42e4:	69 f4       	brne	.+26     	; 0x4300 <free+0x126>
    42e6:	30 97       	sbiw	r30, 0x00	; 0
    42e8:	29 f4       	brne	.+10     	; 0x42f4 <free+0x11a>
    42ea:	10 92 63 24 	sts	0x2463, r1
    42ee:	10 92 64 24 	sts	0x2464, r1
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <free+0x11e>
    42f4:	12 82       	std	Z+2, r1	; 0x02
    42f6:	13 82       	std	Z+3, r1	; 0x03
    42f8:	00 93 61 24 	sts	0x2461, r16
    42fc:	10 93 62 24 	sts	0x2462, r17
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

0000430a <_exit>:
    430a:	f8 94       	cli

0000430c <__stop_program>:
    430c:	ff cf       	rjmp	.-2      	; 0x430c <__stop_program>
