
TestPratikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  00002f58  00002fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002ca  0080200e  0080200e  00002ffa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  0000302c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c8  00000000  00000000  00003070  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fab8  00000000  00000000  00003638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d5a  00000000  00000000  000130f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009c53  00000000  00000000  00015e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001098  00000000  00000000  0001faa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033b2f  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005838  00000000  00000000  00054667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  00059ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ca27  00000000  00000000  0005a550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	1c c1       	rjmp	.+568    	; 0x23e <__bad_interrupt>
       6:	00 00       	nop
       8:	1a c1       	rjmp	.+564    	; 0x23e <__bad_interrupt>
       a:	00 00       	nop
       c:	18 c1       	rjmp	.+560    	; 0x23e <__bad_interrupt>
       e:	00 00       	nop
      10:	16 c1       	rjmp	.+556    	; 0x23e <__bad_interrupt>
      12:	00 00       	nop
      14:	14 c1       	rjmp	.+552    	; 0x23e <__bad_interrupt>
      16:	00 00       	nop
      18:	12 c1       	rjmp	.+548    	; 0x23e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	10 c1       	rjmp	.+544    	; 0x23e <__bad_interrupt>
      1e:	00 00       	nop
      20:	0e c1       	rjmp	.+540    	; 0x23e <__bad_interrupt>
      22:	00 00       	nop
      24:	0c c1       	rjmp	.+536    	; 0x23e <__bad_interrupt>
      26:	00 00       	nop
      28:	0a c1       	rjmp	.+532    	; 0x23e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	08 c1       	rjmp	.+528    	; 0x23e <__bad_interrupt>
      2e:	00 00       	nop
      30:	06 c1       	rjmp	.+524    	; 0x23e <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_13>
      38:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__vector_14>
      3c:	00 c1       	rjmp	.+512    	; 0x23e <__bad_interrupt>
      3e:	00 00       	nop
      40:	fe c0       	rjmp	.+508    	; 0x23e <__bad_interrupt>
      42:	00 00       	nop
      44:	fc c0       	rjmp	.+504    	; 0x23e <__bad_interrupt>
      46:	00 00       	nop
      48:	fa c0       	rjmp	.+500    	; 0x23e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f8 c0       	rjmp	.+496    	; 0x23e <__bad_interrupt>
      4e:	00 00       	nop
      50:	f6 c0       	rjmp	.+492    	; 0x23e <__bad_interrupt>
      52:	00 00       	nop
      54:	f4 c0       	rjmp	.+488    	; 0x23e <__bad_interrupt>
      56:	00 00       	nop
      58:	f2 c0       	rjmp	.+484    	; 0x23e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f0 c0       	rjmp	.+480    	; 0x23e <__bad_interrupt>
      5e:	00 00       	nop
      60:	ee c0       	rjmp	.+476    	; 0x23e <__bad_interrupt>
      62:	00 00       	nop
      64:	ec c0       	rjmp	.+472    	; 0x23e <__bad_interrupt>
      66:	00 00       	nop
      68:	ea c0       	rjmp	.+468    	; 0x23e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e8 c0       	rjmp	.+464    	; 0x23e <__bad_interrupt>
      6e:	00 00       	nop
      70:	e6 c0       	rjmp	.+460    	; 0x23e <__bad_interrupt>
      72:	00 00       	nop
      74:	e4 c0       	rjmp	.+456    	; 0x23e <__bad_interrupt>
      76:	00 00       	nop
      78:	e2 c0       	rjmp	.+452    	; 0x23e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e0 c0       	rjmp	.+448    	; 0x23e <__bad_interrupt>
      7e:	00 00       	nop
      80:	de c0       	rjmp	.+444    	; 0x23e <__bad_interrupt>
      82:	00 00       	nop
      84:	dc c0       	rjmp	.+440    	; 0x23e <__bad_interrupt>
      86:	00 00       	nop
      88:	da c0       	rjmp	.+436    	; 0x23e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d8 c0       	rjmp	.+432    	; 0x23e <__bad_interrupt>
      8e:	00 00       	nop
      90:	d6 c0       	rjmp	.+428    	; 0x23e <__bad_interrupt>
      92:	00 00       	nop
      94:	d4 c0       	rjmp	.+424    	; 0x23e <__bad_interrupt>
      96:	00 00       	nop
      98:	d2 c0       	rjmp	.+420    	; 0x23e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__vector_39>
      a0:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <__vector_40>
      a4:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_41>
      a8:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__vector_42>
      ac:	c8 c0       	rjmp	.+400    	; 0x23e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c6 c0       	rjmp	.+396    	; 0x23e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c4 c0       	rjmp	.+392    	; 0x23e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__vector_46>
      bc:	c0 c0       	rjmp	.+384    	; 0x23e <__bad_interrupt>
      be:	00 00       	nop
      c0:	be c0       	rjmp	.+380    	; 0x23e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bc c0       	rjmp	.+376    	; 0x23e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ba c0       	rjmp	.+372    	; 0x23e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b8 c0       	rjmp	.+368    	; 0x23e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b6 c0       	rjmp	.+364    	; 0x23e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b4 c0       	rjmp	.+360    	; 0x23e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b2 c0       	rjmp	.+356    	; 0x23e <__bad_interrupt>
      da:	00 00       	nop
      dc:	b0 c0       	rjmp	.+352    	; 0x23e <__bad_interrupt>
      de:	00 00       	nop
      e0:	ae c0       	rjmp	.+348    	; 0x23e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ac c0       	rjmp	.+344    	; 0x23e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	aa c0       	rjmp	.+340    	; 0x23e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a8 c0       	rjmp	.+336    	; 0x23e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a6 c0       	rjmp	.+332    	; 0x23e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a4 c0       	rjmp	.+328    	; 0x23e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a2 c0       	rjmp	.+324    	; 0x23e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <__bad_interrupt>
      fe:	00 00       	nop
     100:	9e c0       	rjmp	.+316    	; 0x23e <__bad_interrupt>
     102:	00 00       	nop
     104:	9c c0       	rjmp	.+312    	; 0x23e <__bad_interrupt>
     106:	00 00       	nop
     108:	9a c0       	rjmp	.+308    	; 0x23e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	98 c0       	rjmp	.+304    	; 0x23e <__bad_interrupt>
     10e:	00 00       	nop
     110:	96 c0       	rjmp	.+300    	; 0x23e <__bad_interrupt>
     112:	00 00       	nop
     114:	94 c0       	rjmp	.+296    	; 0x23e <__bad_interrupt>
     116:	00 00       	nop
     118:	92 c0       	rjmp	.+292    	; 0x23e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_71>
     120:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_72>
     124:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_73>
     128:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_74>
     12c:	88 c0       	rjmp	.+272    	; 0x23e <__bad_interrupt>
     12e:	00 00       	nop
     130:	86 c0       	rjmp	.+268    	; 0x23e <__bad_interrupt>
     132:	00 00       	nop
     134:	84 c0       	rjmp	.+264    	; 0x23e <__bad_interrupt>
     136:	00 00       	nop
     138:	82 c0       	rjmp	.+260    	; 0x23e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	80 c0       	rjmp	.+256    	; 0x23e <__bad_interrupt>
     13e:	00 00       	nop
     140:	7e c0       	rjmp	.+252    	; 0x23e <__bad_interrupt>
     142:	00 00       	nop
     144:	7c c0       	rjmp	.+248    	; 0x23e <__bad_interrupt>
     146:	00 00       	nop
     148:	7a c0       	rjmp	.+244    	; 0x23e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	78 c0       	rjmp	.+240    	; 0x23e <__bad_interrupt>
     14e:	00 00       	nop
     150:	76 c0       	rjmp	.+236    	; 0x23e <__bad_interrupt>
     152:	00 00       	nop
     154:	74 c0       	rjmp	.+232    	; 0x23e <__bad_interrupt>
     156:	00 00       	nop
     158:	72 c0       	rjmp	.+228    	; 0x23e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	70 c0       	rjmp	.+224    	; 0x23e <__bad_interrupt>
     15e:	00 00       	nop
     160:	6e c0       	rjmp	.+220    	; 0x23e <__bad_interrupt>
     162:	00 00       	nop
     164:	6c c0       	rjmp	.+216    	; 0x23e <__bad_interrupt>
     166:	00 00       	nop
     168:	6a c0       	rjmp	.+212    	; 0x23e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	68 c0       	rjmp	.+208    	; 0x23e <__bad_interrupt>
     16e:	00 00       	nop
     170:	66 c0       	rjmp	.+204    	; 0x23e <__bad_interrupt>
     172:	00 00       	nop
     174:	64 c0       	rjmp	.+200    	; 0x23e <__bad_interrupt>
     176:	00 00       	nop
     178:	62 c0       	rjmp	.+196    	; 0x23e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	60 c0       	rjmp	.+192    	; 0x23e <__bad_interrupt>
     17e:	00 00       	nop
     180:	5e c0       	rjmp	.+188    	; 0x23e <__bad_interrupt>
     182:	00 00       	nop
     184:	5c c0       	rjmp	.+184    	; 0x23e <__bad_interrupt>
     186:	00 00       	nop
     188:	5a c0       	rjmp	.+180    	; 0x23e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	58 c0       	rjmp	.+176    	; 0x23e <__bad_interrupt>
     18e:	00 00       	nop
     190:	56 c0       	rjmp	.+172    	; 0x23e <__bad_interrupt>
     192:	00 00       	nop
     194:	54 c0       	rjmp	.+168    	; 0x23e <__bad_interrupt>
     196:	00 00       	nop
     198:	52 c0       	rjmp	.+164    	; 0x23e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	50 c0       	rjmp	.+160    	; 0x23e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4e c0       	rjmp	.+156    	; 0x23e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4c c0       	rjmp	.+152    	; 0x23e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4a c0       	rjmp	.+148    	; 0x23e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	46 c0       	rjmp	.+140    	; 0x23e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	44 c0       	rjmp	.+136    	; 0x23e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	42 c0       	rjmp	.+132    	; 0x23e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	40 c0       	rjmp	.+128    	; 0x23e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3e c0       	rjmp	.+124    	; 0x23e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3c c0       	rjmp	.+120    	; 0x23e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3a c0       	rjmp	.+116    	; 0x23e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	38 c0       	rjmp	.+112    	; 0x23e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	36 c0       	rjmp	.+108    	; 0x23e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	34 c0       	rjmp	.+104    	; 0x23e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	32 c0       	rjmp	.+100    	; 0x23e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2e c0       	rjmp	.+92     	; 0x23e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2c c0       	rjmp	.+88     	; 0x23e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2a c0       	rjmp	.+84     	; 0x23e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	28 c0       	rjmp	.+80     	; 0x23e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	26 c0       	rjmp	.+76     	; 0x23e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	24 c0       	rjmp	.+72     	; 0x23e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	22 c0       	rjmp	.+68     	; 0x23e <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e5       	ldi	r29, 0x5F	; 95
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e8 e5       	ldi	r30, 0x58	; 88
     214:	ff e2       	ldi	r31, 0x2F	; 47
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	ae 30       	cpi	r26, 0x0E	; 14
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	22 e2       	ldi	r18, 0x22	; 34
     228:	ae e0       	ldi	r26, 0x0E	; 14
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a8 3d       	cpi	r26, 0xD8	; 216
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <main>
     23a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <_exit>

0000023e <__bad_interrupt>:
     23e:	e0 ce       	rjmp	.-576    	; 0x0 <__vectors>

00000240 <_1101010101_>:

#if ((_STATIC_PORT_PIN_CONF_ == 1) && (QTOUCH_SNS_PORT_COUNT >= 1))

GLOBAL_FUNCTION _1101010101_
_1101010101_:
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     240:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRCLR ), p_2
     244:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _OUTSET), p_1
     248:	80 93 a5 06 	sts	0x06A5, r24
    sts	CONCAT( PORT, SNSK1, _OUTCLR), p_2    
     24c:	60 93 a6 06 	sts	0x06A6, r22
    sts	CONCAT( PORT, SNSK1, _DIRSET), p_2   
     250:	60 93 a1 06 	sts	0x06A1, r22
    ret
     254:	08 95       	ret

00000256 <_1101010111_>:


GLOBAL_FUNCTION _1101010111_
_1101010111_:
    push r19
     256:	3f 93       	push	r19
    sts	CONCAT( PORT, SNSK1, _DIRCLR), p_2
     258:	60 93 a2 06 	sts	0x06A2, r22
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     25c:	80 93 a1 06 	sts	0x06A1, r24
    _10100011_
    _01101001_
    _00011001_
    _00011001_
#endif
    sts	CONCAT( PORT, SNS1, _DIRCLR ), p_1
     260:	80 93 a2 06 	sts	0x06A2, r24
    sts	CONCAT( PORT, SNSK1, _DIRSET ), p_2 
     264:	60 93 a1 06 	sts	0x06A1, r22
    pop  r19
     268:	3f 91       	pop	r19
    lds	r_v, CONCAT(PORT, SNS1, _IN )
     26a:	80 91 a8 06 	lds	r24, 0x06A8
    and	r_v, p_3
     26e:	84 23       	and	r24, r20
    ret
     270:	08 95       	ret

00000272 <_1101010110_>:

GLOBAL_FUNCTION _1101010110_
_1101010110_:
    sts	CONCAT( PORT, SNS1, _OUTCLR), p_1
     272:	80 93 a6 06 	sts	0x06A6, r24
    sts	CONCAT( PORT, SNS1, _DIRSET), p_1
     276:	80 93 a1 06 	sts	0x06A1, r24
    ret
     27a:	08 95       	ret

0000027c <burst_1_1_10_0_1>:
     27c:	a1 e0       	ldi	r26, 0x01	; 1
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e4 e4       	ldi	r30, 0x44	; 68
     282:	f1 e0       	ldi	r31, 0x01	; 1
     284:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__prologue_saves__+0xc>
     288:	e8 2f       	mov	r30, r24
     28a:	0f b7       	in	r16, 0x3f	; 63
     28c:	00 78       	andi	r16, 0x80	; 128
     28e:	19 82       	std	Y+1, r1	; 0x01
     290:	80 91 0f 20 	lds	r24, 0x200F
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	19 f0       	breq	.+6      	; 0x29e <burst_1_1_10_0_1+0x22>
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 0f 20 	sts	0x200F, r24
     29e:	ce 2e       	mov	r12, r30
     2a0:	dd 24       	eor	r13, r13
     2a2:	f6 01       	movw	r30, r12
     2a4:	ef 5a       	subi	r30, 0xAF	; 175
     2a6:	ff 4d       	sbci	r31, 0xDF	; 223
     2a8:	b0 80       	ld	r11, Z
     2aa:	f6 01       	movw	r30, r12
     2ac:	eb 5a       	subi	r30, 0xAB	; 171
     2ae:	ff 4d       	sbci	r31, 0xDF	; 223
     2b0:	a0 80       	ld	r10, Z
     2b2:	f8 94       	cli
     2b4:	bb 20       	and	r11, r11
     2b6:	09 f4       	brne	.+2      	; 0x2ba <burst_1_1_10_0_1+0x3e>
     2b8:	aa c0       	rjmp	.+340    	; 0x40e <burst_1_1_10_0_1+0x192>
     2ba:	8b 2d       	mov	r24, r11
     2bc:	da df       	rcall	.-76     	; 0x272 <_1101010110_>
     2be:	8b 2d       	mov	r24, r11
     2c0:	6a 2d       	mov	r22, r10
     2c2:	be df       	rcall	.-132    	; 0x240 <_1101010101_>
     2c4:	1b 2d       	mov	r17, r11
     2c6:	ee 24       	eor	r14, r14
     2c8:	ff 24       	eor	r15, r15
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	81 2c       	mov	r8, r1
     2ce:	30 e2       	ldi	r19, 0x20	; 32
     2d0:	93 2e       	mov	r9, r19
     2d2:	f5 fe       	sbrs	r15, 5
     2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <burst_1_1_10_0_1+0x68>
     2d6:	90 91 52 20 	lds	r25, 0x2052
     2da:	80 91 51 20 	lds	r24, 0x2051
     2de:	98 2b       	or	r25, r24
     2e0:	19 f5       	brne	.+70     	; 0x328 <burst_1_1_10_0_1+0xac>
     2e2:	35 c0       	rjmp	.+106    	; 0x34e <burst_1_1_10_0_1+0xd2>
     2e4:	8f b7       	in	r24, 0x3f	; 63
     2e6:	80 2b       	or	r24, r16
     2e8:	8f bf       	out	0x3f, r24	; 63
     2ea:	00 00       	nop
     2ec:	f8 94       	cli
     2ee:	8b 2d       	mov	r24, r11
     2f0:	6a 2d       	mov	r22, r10
     2f2:	41 2f       	mov	r20, r17
     2f4:	b0 df       	rcall	.-160    	; 0x256 <_1101010111_>
     2f6:	68 2f       	mov	r22, r24
     2f8:	08 94       	sec
     2fa:	e1 1c       	adc	r14, r1
     2fc:	f1 1c       	adc	r15, r1
     2fe:	80 91 00 20 	lds	r24, 0x2000
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	80 93 00 20 	sts	0x2000, r24
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	30 f0       	brcs	.+12     	; 0x318 <burst_1_1_10_0_1+0x9c>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	21 f0       	breq	.+8      	; 0x318 <burst_1_1_10_0_1+0x9c>
     310:	83 30       	cpi	r24, 0x03	; 3
     312:	11 f0       	breq	.+4      	; 0x318 <burst_1_1_10_0_1+0x9c>
     314:	10 92 00 20 	sts	0x2000, r1
     318:	66 23       	and	r22, r22
     31a:	d9 f2       	breq	.-74     	; 0x2d2 <burst_1_1_10_0_1+0x56>
     31c:	20 91 52 20 	lds	r18, 0x2052
     320:	80 91 51 20 	lds	r24, 0x2051
     324:	28 2b       	or	r18, r24
     326:	15 c0       	rjmp	.+42     	; 0x352 <burst_1_1_10_0_1+0xd6>
     328:	41 2f       	mov	r20, r17
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	40 ff       	sbrs	r20, 0
     32e:	09 c0       	rjmp	.+18     	; 0x342 <burst_1_1_10_0_1+0xc6>
     330:	e8 2f       	mov	r30, r24
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ee 0f       	add	r30, r30
     336:	ff 1f       	adc	r31, r31
     338:	e6 5e       	subi	r30, 0xE6	; 230
     33a:	ff 4d       	sbci	r31, 0xDF	; 223
     33c:	80 82       	st	Z, r8
     33e:	91 82       	std	Z+1, r9	; 0x01
     340:	01 c0       	rjmp	.+2      	; 0x344 <burst_1_1_10_0_1+0xc8>
     342:	90 fd       	sbrc	r25, 0
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	96 95       	lsr	r25
     348:	46 95       	lsr	r20
     34a:	99 23       	and	r25, r25
     34c:	79 f7       	brne	.-34     	; 0x32c <burst_1_1_10_0_1+0xb0>
     34e:	10 e0       	ldi	r17, 0x00	; 0
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	8f b7       	in	r24, 0x3f	; 63
     354:	80 2b       	or	r24, r16
     356:	8f bf       	out	0x3f, r24	; 63
     358:	10 92 10 20 	sts	0x2010, r1
     35c:	22 23       	and	r18, r18
     35e:	09 f4       	brne	.+2      	; 0x362 <burst_1_1_10_0_1+0xe6>
     360:	3f c0       	rjmp	.+126    	; 0x3e0 <burst_1_1_10_0_1+0x164>
     362:	11 23       	and	r17, r17
     364:	09 f4       	brne	.+2      	; 0x368 <burst_1_1_10_0_1+0xec>
     366:	3c c0       	rjmp	.+120    	; 0x3e0 <burst_1_1_10_0_1+0x164>
     368:	30 91 56 20 	lds	r19, 0x2056
     36c:	80 91 55 20 	lds	r24, 0x2055
     370:	38 2b       	or	r19, r24
     372:	56 2f       	mov	r21, r22
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	23 c0       	rjmp	.+70     	; 0x3c4 <burst_1_1_10_0_1+0x148>
     37e:	50 fd       	sbrc	r21, 0
     380:	17 c0       	rjmp	.+46     	; 0x3b0 <burst_1_1_10_0_1+0x134>
     382:	19 c0       	rjmp	.+50     	; 0x3b6 <burst_1_1_10_0_1+0x13a>
     384:	30 ff       	sbrs	r19, 0
     386:	13 c0       	rjmp	.+38     	; 0x3ae <burst_1_1_10_0_1+0x132>
     388:	98 17       	cp	r25, r24
     38a:	81 f4       	brne	.+32     	; 0x3ac <burst_1_1_10_0_1+0x130>
     38c:	e4 2f       	mov	r30, r20
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	e6 5e       	subi	r30, 0xE6	; 230
     396:	ff 4d       	sbci	r31, 0xDF	; 223
     398:	e0 82       	st	Z, r14
     39a:	f1 82       	std	Z+1, r15	; 0x01
     39c:	85 2f       	mov	r24, r21
     39e:	8e 7f       	andi	r24, 0xFE	; 254
     3a0:	19 f4       	brne	.+6      	; 0x3a8 <burst_1_1_10_0_1+0x12c>
     3a2:	89 2f       	mov	r24, r25
     3a4:	71 e0       	ldi	r23, 0x01	; 1
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <burst_1_1_10_0_1+0x13c>
     3a8:	89 2f       	mov	r24, r25
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <burst_1_1_10_0_1+0x13c>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	36 95       	lsr	r19
     3b0:	33 23       	and	r19, r19
     3b2:	41 f7       	brne	.-48     	; 0x384 <burst_1_1_10_0_1+0x108>
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <burst_1_1_10_0_1+0x13c>
     3b6:	20 fd       	sbrc	r18, 0
     3b8:	9f 5f       	subi	r25, 0xFF	; 255
     3ba:	20 fd       	sbrc	r18, 0
     3bc:	4f 5f       	subi	r20, 0xFF	; 255
     3be:	56 95       	lsr	r21
     3c0:	26 95       	lsr	r18
     3c2:	11 f0       	breq	.+4      	; 0x3c8 <burst_1_1_10_0_1+0x14c>
     3c4:	55 23       	and	r21, r21
     3c6:	d9 f6       	brne	.-74     	; 0x37e <burst_1_1_10_0_1+0x102>
     3c8:	40 93 10 20 	sts	0x2010, r20
     3cc:	60 95       	com	r22
     3ce:	16 23       	and	r17, r22
     3d0:	71 30       	cpi	r23, 0x01	; 1
     3d2:	21 f4       	brne	.+8      	; 0x3dc <burst_1_1_10_0_1+0x160>
     3d4:	11 23       	and	r17, r17
     3d6:	11 f4       	brne	.+4      	; 0x3dc <burst_1_1_10_0_1+0x160>
     3d8:	ee 24       	eor	r14, r14
     3da:	ff 24       	eor	r15, r15
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	13 c0       	rjmp	.+38     	; 0x406 <burst_1_1_10_0_1+0x18a>
     3e0:	80 91 52 20 	lds	r24, 0x2052
     3e4:	90 91 51 20 	lds	r25, 0x2051
     3e8:	89 2b       	or	r24, r25
     3ea:	89 83       	std	Y+1, r24	; 0x01
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	06 c0       	rjmp	.+12     	; 0x3fc <burst_1_1_10_0_1+0x180>
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	80 fd       	sbrc	r24, 0
     3f4:	9f 5f       	subi	r25, 0xFF	; 255
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	86 95       	lsr	r24
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	88 23       	and	r24, r24
     400:	b9 f7       	brne	.-18     	; 0x3f0 <burst_1_1_10_0_1+0x174>
     402:	90 93 10 20 	sts	0x2010, r25
     406:	f8 94       	cli
     408:	11 23       	and	r17, r17
     40a:	09 f0       	breq	.+2      	; 0x40e <burst_1_1_10_0_1+0x192>
     40c:	62 cf       	rjmp	.-316    	; 0x2d2 <burst_1_1_10_0_1+0x56>
     40e:	81 e5       	ldi	r24, 0x51	; 81
     410:	90 e2       	ldi	r25, 0x20	; 32
     412:	c8 0e       	add	r12, r24
     414:	d9 1e       	adc	r13, r25
     416:	f6 01       	movw	r30, r12
     418:	80 81       	ld	r24, Z
     41a:	2b df       	rcall	.-426    	; 0x272 <_1101010110_>
     41c:	10 92 0e 20 	sts	0x200E, r1
     420:	8f b7       	in	r24, 0x3f	; 63
     422:	08 2b       	or	r16, r24
     424:	0f bf       	out	0x3f, r16	; 63
     426:	21 96       	adiw	r28, 0x01	; 1
     428:	ec e0       	ldi	r30, 0x0C	; 12
     42a:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <__epilogue_restores__+0xc>

0000042e <qt_get_library_sig>:
     42e:	fc 01       	movw	r30, r24
     430:	80 e2       	ldi	r24, 0x20	; 32
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	80 83       	st	Z, r24
     436:	91 83       	std	Z+1, r25	; 0x01
     438:	12 82       	std	Z+2, r1	; 0x02
     43a:	13 82       	std	Z+3, r1	; 0x03
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	94 e0       	ldi	r25, 0x04	; 4
     440:	84 83       	std	Z+4, r24	; 0x04
     442:	95 83       	std	Z+5, r25	; 0x05
     444:	08 95       	ret

00000446 <qt_enable_key>:
     446:	90 91 4b 20 	lds	r25, 0x204B
     44a:	a9 2f       	mov	r26, r25
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	fd 01       	movw	r30, r26
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ea 0f       	add	r30, r26
     456:	fb 1f       	adc	r31, r27
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	ed 5c       	subi	r30, 0xCD	; 205
     45e:	ff 4d       	sbci	r31, 0xDF	; 223
     460:	43 83       	std	Z+3, r20	; 0x03
     462:	67 70       	andi	r22, 0x07	; 7
     464:	85 83       	std	Z+5, r24	; 0x05
     466:	23 70       	andi	r18, 0x03	; 3
     468:	66 0f       	add	r22, r22
     46a:	66 0f       	add	r22, r22
     46c:	66 0f       	add	r22, r22
     46e:	26 2b       	or	r18, r22
     470:	24 83       	std	Z+4, r18	; 0x04
     472:	9f 5f       	subi	r25, 0xFF	; 255
     474:	90 93 4b 20 	sts	0x204B, r25
     478:	08 95       	ret

0000047a <qt_get_sensor_delta>:
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	28 2f       	mov	r18, r24
     482:	c8 2f       	mov	r28, r24
     484:	d0 e0       	ldi	r29, 0x00	; 0
     486:	fe 01       	movw	r30, r28
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	ec 0f       	add	r30, r28
     48e:	fd 1f       	adc	r31, r29
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	ed 5c       	subi	r30, 0xCD	; 205
     496:	ff 4d       	sbci	r31, 0xDF	; 223
     498:	35 81       	ldd	r19, Z+5	; 0x05
     49a:	83 81       	ldd	r24, Z+3	; 0x03
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	00 90 13 20 	lds	r0, 0x2013
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <qt_get_sensor_delta+0x2e>
     4a4:	95 95       	asr	r25
     4a6:	87 95       	ror	r24
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <qt_get_sensor_delta+0x2a>
     4ac:	18 2f       	mov	r17, r24
     4ae:	84 30       	cpi	r24, 0x04	; 4
     4b0:	08 f4       	brcc	.+2      	; 0x4b4 <qt_get_sensor_delta+0x3a>
     4b2:	14 e0       	ldi	r17, 0x04	; 4
     4b4:	80 91 4b 20 	lds	r24, 0x204B
     4b8:	28 17       	cp	r18, r24
     4ba:	18 f0       	brcs	.+6      	; 0x4c2 <qt_get_sensor_delta+0x48>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	2d c0       	rjmp	.+90     	; 0x51c <qt_get_sensor_delta+0xa2>
     4c2:	83 2f       	mov	r24, r19
     4c4:	1d d1       	rcall	.+570    	; 0x700 <get_channel_delta>
     4c6:	9c 01       	movw	r18, r24
     4c8:	41 2f       	mov	r20, r17
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	16 95       	lsr	r17
     4ce:	16 95       	lsr	r17
     4d0:	81 2f       	mov	r24, r17
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	84 1b       	sub	r24, r20
     4d6:	95 0b       	sbc	r25, r21
     4d8:	82 17       	cp	r24, r18
     4da:	93 07       	cpc	r25, r19
     4dc:	64 f4       	brge	.+24     	; 0x4f6 <qt_get_sensor_delta+0x7c>
     4de:	fe 01       	movw	r30, r28
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	ec 0f       	add	r30, r28
     4e6:	fd 1f       	adc	r31, r29
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	ed 5c       	subi	r30, 0xCD	; 205
     4ee:	ff 4d       	sbci	r31, 0xDF	; 223
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	8b 7f       	andi	r24, 0xFB	; 251
     4f4:	84 83       	std	Z+4, r24	; 0x04
     4f6:	88 27       	eor	r24, r24
     4f8:	99 27       	eor	r25, r25
     4fa:	84 1b       	sub	r24, r20
     4fc:	95 0b       	sbc	r25, r21
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	64 f0       	brlt	.+24     	; 0x51c <qt_get_sensor_delta+0xa2>
     504:	fe 01       	movw	r30, r28
     506:	ee 0f       	add	r30, r30
     508:	ff 1f       	adc	r31, r31
     50a:	ec 0f       	add	r30, r28
     50c:	fd 1f       	adc	r31, r29
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	ed 5c       	subi	r30, 0xCD	; 205
     514:	ff 4d       	sbci	r31, 0xDF	; 223
     516:	84 81       	ldd	r24, Z+4	; 0x04
     518:	84 60       	ori	r24, 0x04	; 4
     51a:	84 83       	std	Z+4, r24	; 0x04
     51c:	c9 01       	movw	r24, r18
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	08 95       	ret

00000526 <qt_measure_sensors>:
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	10 92 2b 20 	sts	0x202B, r1
     534:	10 92 2c 20 	sts	0x202C, r1
     538:	20 91 2f 20 	lds	r18, 0x202F
     53c:	30 91 30 20 	lds	r19, 0x2030
     540:	80 93 2f 20 	sts	0x202F, r24
     544:	90 93 30 20 	sts	0x2030, r25
     548:	40 91 31 20 	lds	r20, 0x2031
     54c:	50 91 32 20 	lds	r21, 0x2032
     550:	42 1b       	sub	r20, r18
     552:	53 0b       	sbc	r21, r19
     554:	48 0f       	add	r20, r24
     556:	59 1f       	adc	r21, r25
     558:	ff 24       	eor	r15, r15
     55a:	03 c0       	rjmp	.+6      	; 0x562 <qt_measure_sensors+0x3c>
     55c:	f3 94       	inc	r15
     55e:	48 5c       	subi	r20, 0xC8	; 200
     560:	50 40       	sbci	r21, 0x00	; 0
     562:	48 3c       	cpi	r20, 0xC8	; 200
     564:	51 05       	cpc	r21, r1
     566:	d0 f7       	brcc	.-12     	; 0x55c <qt_measure_sensors+0x36>
     568:	40 93 31 20 	sts	0x2031, r20
     56c:	50 93 32 20 	sts	0x2032, r21
     570:	80 91 4c 20 	lds	r24, 0x204C
     574:	88 23       	and	r24, r24
     576:	41 f0       	breq	.+16     	; 0x588 <qt_measure_sensors+0x62>
     578:	8f 15       	cp	r24, r15
     57a:	18 f4       	brcc	.+6      	; 0x582 <qt_measure_sensors+0x5c>
     57c:	10 92 4c 20 	sts	0x204C, r1
     580:	03 c0       	rjmp	.+6      	; 0x588 <qt_measure_sensors+0x62>
     582:	8f 19       	sub	r24, r15
     584:	80 93 4c 20 	sts	0x204C, r24
     588:	c3 d3       	rcall	.+1926   	; 0xd10 <burst>
     58a:	e0 91 2d 20 	lds	r30, 0x202D
     58e:	f0 91 2e 20 	lds	r31, 0x202E
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	09 f0       	breq	.+2      	; 0x598 <qt_measure_sensors+0x72>
     596:	19 95       	eicall
     598:	10 e0       	ldi	r17, 0x00	; 0
     59a:	00 e0       	ldi	r16, 0x00	; 0
     59c:	05 c0       	rjmp	.+10     	; 0x5a8 <qt_measure_sensors+0x82>
     59e:	81 2f       	mov	r24, r17
     5a0:	6f 2d       	mov	r22, r15
     5a2:	c3 d0       	rcall	.+390    	; 0x72a <process_sensor>
     5a4:	08 2b       	or	r16, r24
     5a6:	1f 5f       	subi	r17, 0xFF	; 255
     5a8:	60 91 4b 20 	lds	r22, 0x204B
     5ac:	16 17       	cp	r17, r22
     5ae:	b8 f3       	brcs	.-18     	; 0x59e <qt_measure_sensors+0x78>
     5b0:	00 23       	and	r16, r16
     5b2:	49 f0       	breq	.+18     	; 0x5c6 <qt_measure_sensors+0xa0>
     5b4:	80 91 2b 20 	lds	r24, 0x202B
     5b8:	90 91 2c 20 	lds	r25, 0x202C
     5bc:	91 60       	ori	r25, 0x01	; 1
     5be:	80 93 2b 20 	sts	0x202B, r24
     5c2:	90 93 2c 20 	sts	0x202C, r25
     5c6:	10 92 2a 20 	sts	0x202A, r1
     5ca:	a3 e3       	ldi	r26, 0x33	; 51
     5cc:	b0 e2       	ldi	r27, 0x20	; 32
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	41 e0       	ldi	r20, 0x01	; 1
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	17 c0       	rjmp	.+46     	; 0x604 <qt_measure_sensors+0xde>
     5d6:	8c 91       	ld	r24, X
     5d8:	88 71       	andi	r24, 0x18	; 24
     5da:	91 f0       	breq	.+36     	; 0x600 <qt_measure_sensors+0xda>
     5dc:	e3 2f       	mov	r30, r19
     5de:	e6 95       	lsr	r30
     5e0:	e6 95       	lsr	r30
     5e2:	e6 95       	lsr	r30
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	e6 5e       	subi	r30, 0xE6	; 230
     5e8:	ff 4d       	sbci	r31, 0xDF	; 223
     5ea:	83 2f       	mov	r24, r19
     5ec:	87 70       	andi	r24, 0x07	; 7
     5ee:	ea 01       	movw	r28, r20
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <qt_measure_sensors+0xd0>
     5f2:	cc 0f       	add	r28, r28
     5f4:	dd 1f       	adc	r29, r29
     5f6:	8a 95       	dec	r24
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <qt_measure_sensors+0xcc>
     5fa:	20 89       	ldd	r18, Z+16	; 0x10
     5fc:	2c 2b       	or	r18, r28
     5fe:	20 8b       	std	Z+16, r18	; 0x10
     600:	3f 5f       	subi	r19, 0xFF	; 255
     602:	16 96       	adiw	r26, 0x06	; 6
     604:	36 17       	cp	r19, r22
     606:	38 f3       	brcs	.-50     	; 0x5d6 <qt_measure_sensors+0xb0>
     608:	80 91 2b 20 	lds	r24, 0x202B
     60c:	90 91 2c 20 	lds	r25, 0x202C
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	e5 e0       	ldi	r30, 0x05	; 5
     616:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__epilogue_restores__+0x1a>

0000061a <qt_reset_sensing>:
     61a:	10 92 4b 20 	sts	0x204B, r1
     61e:	84 e0       	ldi	r24, 0x04	; 4
     620:	80 93 14 20 	sts	0x2014, r24
     624:	94 e1       	ldi	r25, 0x14	; 20
     626:	90 93 17 20 	sts	0x2017, r25
     62a:	85 e0       	ldi	r24, 0x05	; 5
     62c:	80 93 18 20 	sts	0x2018, r24
     630:	10 92 16 20 	sts	0x2016, r1
     634:	90 93 15 20 	sts	0x2015, r25
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 13 20 	sts	0x2013, r24
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	80 93 19 20 	sts	0x2019, r24
     644:	54 d3       	rcall	.+1704   	; 0xcee <burst_reset>
     646:	10 92 2d 20 	sts	0x202D, r1
     64a:	10 92 2e 20 	sts	0x202E, r1
     64e:	08 95       	ret

00000650 <qt_calibrate_sensing>:
     650:	1f 93       	push	r17
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	03 c0       	rjmp	.+6      	; 0x65c <qt_calibrate_sensing+0xc>
     656:	81 2f       	mov	r24, r17
     658:	27 d0       	rcall	.+78     	; 0x6a8 <start_cal_sensor>
     65a:	1f 5f       	subi	r17, 0xFF	; 255
     65c:	80 91 4b 20 	lds	r24, 0x204B
     660:	18 17       	cp	r17, r24
     662:	c8 f3       	brcs	.-14     	; 0x656 <qt_calibrate_sensing+0x6>
     664:	1f 91       	pop	r17
     666:	08 95       	ret

00000668 <qt_init_sensing_with_burst>:
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	7b 01       	movw	r14, r22
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	03 c0       	rjmp	.+6      	; 0x680 <qt_init_sensing_with_burst+0x18>
     67a:	81 2f       	mov	r24, r17
     67c:	15 d0       	rcall	.+42     	; 0x6a8 <start_cal_sensor>
     67e:	1f 5f       	subi	r17, 0xFF	; 255
     680:	80 91 4b 20 	lds	r24, 0x204B
     684:	18 17       	cp	r17, r24
     686:	c8 f3       	brcs	.-14     	; 0x67a <qt_init_sensing_with_burst+0x12>
     688:	10 92 2f 20 	sts	0x202F, r1
     68c:	10 92 30 20 	sts	0x2030, r1
     690:	c0 93 11 20 	sts	0x2011, r28
     694:	d0 93 12 20 	sts	0x2012, r29
     698:	c7 01       	movw	r24, r14
     69a:	24 d3       	rcall	.+1608   	; 0xce4 <burst_init>
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	ff 90       	pop	r15
     6a4:	ef 90       	pop	r14
     6a6:	08 95       	ret

000006a8 <start_cal_sensor>:
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	e3 e3       	ldi	r30, 0x33	; 51
     6ac:	f0 e2       	ldi	r31, 0x20	; 32
     6ae:	9c 01       	movw	r18, r24
     6b0:	22 0f       	add	r18, r18
     6b2:	33 1f       	adc	r19, r19
     6b4:	28 0f       	add	r18, r24
     6b6:	39 1f       	adc	r19, r25
     6b8:	d9 01       	movw	r26, r18
     6ba:	aa 0f       	add	r26, r26
     6bc:	bb 1f       	adc	r27, r27
     6be:	ae 0f       	add	r26, r30
     6c0:	bf 1f       	adc	r27, r31
     6c2:	15 96       	adiw	r26, 0x05	; 5
     6c4:	4c 91       	ld	r20, X
     6c6:	15 97       	sbiw	r26, 0x05	; 5
     6c8:	80 91 2b 20 	lds	r24, 0x202B
     6cc:	90 91 2c 20 	lds	r25, 0x202C
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 93 2b 20 	sts	0x202B, r24
     6d6:	90 93 2c 20 	sts	0x202C, r25
     6da:	2f 5f       	subi	r18, 0xFF	; 255
     6dc:	3f 4f       	sbci	r19, 0xFF	; 255
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	e2 0f       	add	r30, r18
     6e4:	f3 1f       	adc	r31, r19
     6e6:	10 82       	st	Z, r1
     6e8:	ed e4       	ldi	r30, 0x4D	; 77
     6ea:	f0 e2       	ldi	r31, 0x20	; 32
     6ec:	e4 0f       	add	r30, r20
     6ee:	f1 1d       	adc	r31, r1
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	80 83       	st	Z, r24
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	8c 93       	st	X, r24
     6f8:	8f e0       	ldi	r24, 0x0F	; 15
     6fa:	11 96       	adiw	r26, 0x01	; 1
     6fc:	8c 93       	st	X, r24
     6fe:	08 95       	ret

00000700 <get_channel_delta>:
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	34 96       	adiw	r30, 0x04	; 4
     706:	aa e1       	ldi	r26, 0x1A	; 26
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ea 0f       	add	r30, r26
     710:	fb 1f       	adc	r31, r27
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	a8 0f       	add	r26, r24
     718:	b9 1f       	adc	r27, r25
     71a:	20 81       	ld	r18, Z
     71c:	31 81       	ldd	r19, Z+1	; 0x01
     71e:	8d 91       	ld	r24, X+
     720:	9c 91       	ld	r25, X
     722:	28 1b       	sub	r18, r24
     724:	39 0b       	sbc	r19, r25
     726:	c9 01       	movw	r24, r18
     728:	08 95       	ret

0000072a <process_sensor>:
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	eb e9       	ldi	r30, 0x9B	; 155
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__prologue_saves__+0x8>
     736:	78 2e       	mov	r7, r24
     738:	f6 2e       	mov	r15, r22
     73a:	9f de       	rcall	.-706    	; 0x47a <qt_get_sensor_delta>
     73c:	5c 01       	movw	r10, r24
     73e:	07 2d       	mov	r16, r7
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	f8 01       	movw	r30, r16
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e0 0f       	add	r30, r16
     74a:	f1 1f       	adc	r31, r17
     74c:	ee 0f       	add	r30, r30
     74e:	ff 1f       	adc	r31, r31
     750:	ed 5c       	subi	r30, 0xCD	; 205
     752:	ff 4d       	sbci	r31, 0xDF	; 223
     754:	54 81       	ldd	r21, Z+4	; 0x04
     756:	43 81       	ldd	r20, Z+3	; 0x03
     758:	24 2f       	mov	r18, r20
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	85 2f       	mov	r24, r21
     75e:	83 70       	andi	r24, 0x03	; 3
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	02 c0       	rjmp	.+4      	; 0x76a <process_sensor+0x40>
     766:	35 95       	asr	r19
     768:	27 95       	ror	r18
     76a:	8a 95       	dec	r24
     76c:	e2 f7       	brpl	.-8      	; 0x766 <process_sensor+0x3c>
     76e:	82 2f       	mov	r24, r18
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	08 f4       	brcc	.+2      	; 0x776 <process_sensor+0x4c>
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	24 2f       	mov	r18, r20
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	b9 01       	movw	r22, r18
     77c:	68 1b       	sub	r22, r24
     77e:	71 09       	sbc	r23, r1
     780:	f8 01       	movw	r30, r16
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	e0 0f       	add	r30, r16
     788:	f1 1f       	adc	r31, r17
     78a:	ef 01       	movw	r28, r30
     78c:	cc 0f       	add	r28, r28
     78e:	dd 1f       	adc	r29, r29
     790:	cd 5c       	subi	r28, 0xCD	; 205
     792:	df 4d       	sbci	r29, 0xDF	; 223
     794:	88 81       	ld	r24, Y
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	09 f4       	brne	.+2      	; 0x79c <process_sensor+0x72>
     79a:	fb c0       	rjmp	.+502    	; 0x992 <process_sensor+0x268>
     79c:	85 30       	cpi	r24, 0x05	; 5
     79e:	30 f4       	brcc	.+12     	; 0x7ac <process_sensor+0x82>
     7a0:	81 30       	cpi	r24, 0x01	; 1
     7a2:	71 f0       	breq	.+28     	; 0x7c0 <process_sensor+0x96>
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	09 f0       	breq	.+2      	; 0x7aa <process_sensor+0x80>
     7a8:	96 c2       	rjmp	.+1324   	; 0xcd6 <process_sensor+0x5ac>
     7aa:	6e c0       	rjmp	.+220    	; 0x888 <process_sensor+0x15e>
     7ac:	80 31       	cpi	r24, 0x10	; 16
     7ae:	09 f4       	brne	.+2      	; 0x7b2 <process_sensor+0x88>
     7b0:	a5 c1       	rjmp	.+842    	; 0xafc <process_sensor+0x3d2>
     7b2:	80 32       	cpi	r24, 0x20	; 32
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <process_sensor+0x8e>
     7b6:	56 c2       	rjmp	.+1196   	; 0xc64 <process_sensor+0x53a>
     7b8:	88 30       	cpi	r24, 0x08	; 8
     7ba:	09 f0       	breq	.+2      	; 0x7be <process_sensor+0x94>
     7bc:	8c c2       	rjmp	.+1304   	; 0xcd6 <process_sensor+0x5ac>
     7be:	02 c2       	rjmp	.+1028   	; 0xbc4 <process_sensor+0x49a>
     7c0:	40 91 2b 20 	lds	r20, 0x202B
     7c4:	50 91 2c 20 	lds	r21, 0x202C
     7c8:	ca 01       	movw	r24, r20
     7ca:	92 60       	ori	r25, 0x02	; 2
     7cc:	80 93 2b 20 	sts	0x202B, r24
     7d0:	90 93 2c 20 	sts	0x202C, r25
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	a8 2f       	mov	r26, r24
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	6a 30       	cpi	r22, 0x0A	; 10
     7de:	60 f0       	brcs	.+24     	; 0x7f8 <process_sensor+0xce>
     7e0:	aa 0f       	add	r26, r26
     7e2:	bb 1f       	adc	r27, r27
     7e4:	fd 01       	movw	r30, r26
     7e6:	e6 5e       	subi	r30, 0xE6	; 230
     7e8:	ff 4d       	sbci	r31, 0xDF	; 223
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	ae 5d       	subi	r26, 0xDE	; 222
     7f0:	bf 4d       	sbci	r27, 0xDF	; 223
     7f2:	8d 93       	st	X+, r24
     7f4:	9c 93       	st	X, r25
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <process_sensor+0xfe>
     7f8:	aa 0f       	add	r26, r26
     7fa:	bb 1f       	adc	r27, r27
     7fc:	fd 01       	movw	r30, r26
     7fe:	ee 5d       	subi	r30, 0xDE	; 222
     800:	ff 4d       	sbci	r31, 0xDF	; 223
     802:	20 81       	ld	r18, Z
     804:	31 81       	ldd	r19, Z+1	; 0x01
     806:	a6 5e       	subi	r26, 0xE6	; 230
     808:	bf 4d       	sbci	r27, 0xDF	; 223
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	82 17       	cp	r24, r18
     810:	93 07       	cpc	r25, r19
     812:	18 f4       	brcc	.+6      	; 0x81a <process_sensor+0xf0>
     814:	21 50       	subi	r18, 0x01	; 1
     816:	30 40       	sbci	r19, 0x00	; 0
     818:	05 c0       	rjmp	.+10     	; 0x824 <process_sensor+0xfa>
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	50 f4       	brcc	.+20     	; 0x834 <process_sensor+0x10a>
     820:	2f 5f       	subi	r18, 0xFF	; 255
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	20 83       	st	Z, r18
     826:	31 83       	std	Z+1, r19	; 0x01
     828:	48 60       	ori	r20, 0x08	; 8
     82a:	52 60       	ori	r21, 0x02	; 2
     82c:	40 93 2b 20 	sts	0x202B, r20
     830:	50 93 2c 20 	sts	0x202C, r21
     834:	86 2f       	mov	r24, r22
     836:	81 50       	subi	r24, 0x01	; 1
     838:	f8 01       	movw	r30, r16
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e0 0f       	add	r30, r16
     840:	f1 1f       	adc	r31, r17
     842:	ef 01       	movw	r28, r30
     844:	cc 0f       	add	r28, r28
     846:	dd 1f       	adc	r29, r29
     848:	cd 5c       	subi	r28, 0xCD	; 205
     84a:	df 4d       	sbci	r29, 0xDF	; 223
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	88 23       	and	r24, r24
     850:	b1 f4       	brne	.+44     	; 0x87e <process_sensor+0x154>
     852:	ad 81       	ldd	r26, Y+5	; 0x05
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	88 83       	st	Y, r24
     858:	80 91 2b 20 	lds	r24, 0x202B
     85c:	90 91 2c 20 	lds	r25, 0x202C
     860:	82 60       	ori	r24, 0x02	; 2
     862:	80 93 2b 20 	sts	0x202B, r24
     866:	90 93 2c 20 	sts	0x202C, r25
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	eb 5c       	subi	r30, 0xCB	; 203
     870:	ff 4d       	sbci	r31, 0xDF	; 223
     872:	10 82       	st	Z, r1
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	a3 5b       	subi	r26, 0xB3	; 179
     878:	bf 4d       	sbci	r27, 0xDF	; 223
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	8c 93       	st	X, r24
     87e:	80 91 15 20 	lds	r24, 0x2015
     882:	80 93 4c 20 	sts	0x204C, r24
     886:	25 c2       	rjmp	.+1098   	; 0xcd2 <process_sensor+0x5a8>
     888:	52 ff       	sbrs	r21, 2
     88a:	08 c0       	rjmp	.+16     	; 0x89c <process_sensor+0x172>
     88c:	ed 81       	ldd	r30, Y+5	; 0x05
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	e3 5b       	subi	r30, 0xB3	; 179
     892:	ff 4d       	sbci	r31, 0xDF	; 223
     894:	10 82       	st	Z, r1
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	88 83       	st	Y, r24
     89a:	0c c2       	rjmp	.+1048   	; 0xcb4 <process_sensor+0x58a>
     89c:	c5 01       	movw	r24, r10
     89e:	b7 fe       	sbrs	r11, 7
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <process_sensor+0x17c>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	80 f0       	brcs	.+32     	; 0x8cc <process_sensor+0x1a2>
     8ac:	f8 01       	movw	r30, r16
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e0 0f       	add	r30, r16
     8b4:	f1 1f       	adc	r31, r17
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	df 01       	movw	r26, r30
     8bc:	ad 5c       	subi	r26, 0xCD	; 205
     8be:	bf 4d       	sbci	r27, 0xDF	; 223
     8c0:	84 e0       	ldi	r24, 0x04	; 4
     8c2:	8c 93       	st	X, r24
     8c4:	eb 5c       	subi	r30, 0xCB	; 203
     8c6:	ff 4d       	sbci	r31, 0xDF	; 223
     8c8:	10 82       	st	Z, r1
     8ca:	fa c1       	rjmp	.+1012   	; 0xcc0 <process_sensor+0x596>
     8cc:	ff 20       	and	r15, r15
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <process_sensor+0x1a8>
     8d0:	02 c2       	rjmp	.+1028   	; 0xcd6 <process_sensor+0x5ac>
     8d2:	80 91 4c 20 	lds	r24, 0x204C
     8d6:	88 23       	and	r24, r24
     8d8:	09 f0       	breq	.+2      	; 0x8dc <process_sensor+0x1b2>
     8da:	fd c1       	rjmp	.+1018   	; 0xcd6 <process_sensor+0x5ac>
     8dc:	f8 01       	movw	r30, r16
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e0 0f       	add	r30, r16
     8e4:	f1 1f       	adc	r31, r17
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	ed 5c       	subi	r30, 0xCD	; 205
     8ec:	ff 4d       	sbci	r31, 0xDF	; 223
     8ee:	85 81       	ldd	r24, Z+5	; 0x05
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	ec 01       	movw	r28, r24
     8f4:	cc 0f       	add	r28, r28
     8f6:	dd 1f       	adc	r29, r29
     8f8:	ce 5d       	subi	r28, 0xDE	; 222
     8fa:	df 4d       	sbci	r29, 0xDF	; 223
     8fc:	28 81       	ld	r18, Y
     8fe:	39 81       	ldd	r19, Y+1	; 0x01
     900:	fc 01       	movw	r30, r24
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e6 5e       	subi	r30, 0xE6	; 230
     908:	ff 4d       	sbci	r31, 0xDF	; 223
     90a:	01 90       	ld	r0, Z+
     90c:	f0 81       	ld	r31, Z
     90e:	e0 2d       	mov	r30, r0
     910:	2e 17       	cp	r18, r30
     912:	3f 07       	cpc	r19, r31
     914:	88 f4       	brcc	.+34     	; 0x938 <process_sensor+0x20e>
     916:	fc 01       	movw	r30, r24
     918:	e3 5b       	subi	r30, 0xB3	; 179
     91a:	ff 4d       	sbci	r31, 0xDF	; 223
     91c:	90 81       	ld	r25, Z
     91e:	9f 0d       	add	r25, r15
     920:	90 83       	st	Z, r25
     922:	80 91 18 20 	lds	r24, 0x2018
     926:	80 58       	subi	r24, 0x80	; 128
     928:	98 17       	cp	r25, r24
     92a:	08 f4       	brcc	.+2      	; 0x92e <process_sensor+0x204>
     92c:	d4 c1       	rjmp	.+936    	; 0xcd6 <process_sensor+0x5ac>
     92e:	80 e8       	ldi	r24, 0x80	; 128
     930:	80 83       	st	Z, r24
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	14 c0       	rjmp	.+40     	; 0x960 <process_sensor+0x236>
     938:	dc 01       	movw	r26, r24
     93a:	a3 5b       	subi	r26, 0xB3	; 179
     93c:	bf 4d       	sbci	r27, 0xDF	; 223
     93e:	e2 17       	cp	r30, r18
     940:	f3 07       	cpc	r31, r19
     942:	d0 f4       	brcc	.+52     	; 0x978 <process_sensor+0x24e>
     944:	8c 91       	ld	r24, X
     946:	8f 19       	sub	r24, r15
     948:	8c 93       	st	X, r24
     94a:	40 e8       	ldi	r20, 0x80	; 128
     94c:	90 91 17 20 	lds	r25, 0x2017
     950:	54 2f       	mov	r21, r20
     952:	59 1b       	sub	r21, r25
     954:	58 17       	cp	r21, r24
     956:	08 f4       	brcc	.+2      	; 0x95a <process_sensor+0x230>
     958:	be c1       	rjmp	.+892    	; 0xcd6 <process_sensor+0x5ac>
     95a:	4c 93       	st	X, r20
     95c:	21 50       	subi	r18, 0x01	; 1
     95e:	30 40       	sbci	r19, 0x00	; 0
     960:	28 83       	st	Y, r18
     962:	39 83       	std	Y+1, r19	; 0x01
     964:	80 91 2b 20 	lds	r24, 0x202B
     968:	90 91 2c 20 	lds	r25, 0x202C
     96c:	88 60       	ori	r24, 0x08	; 8
     96e:	80 93 2b 20 	sts	0x202B, r24
     972:	90 93 2c 20 	sts	0x202C, r25
     976:	af c1       	rjmp	.+862    	; 0xcd6 <process_sensor+0x5ac>
     978:	2c 91       	ld	r18, X
     97a:	21 38       	cpi	r18, 0x81	; 129
     97c:	10 f0       	brcs	.+4      	; 0x982 <process_sensor+0x258>
     97e:	21 50       	subi	r18, 0x01	; 1
     980:	2c 93       	st	X, r18
     982:	fc 01       	movw	r30, r24
     984:	e3 5b       	subi	r30, 0xB3	; 179
     986:	ff 4d       	sbci	r31, 0xDF	; 223
     988:	80 81       	ld	r24, Z
     98a:	87 fd       	sbrc	r24, 7
     98c:	a4 c1       	rjmp	.+840    	; 0xcd6 <process_sensor+0x5ac>
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	67 c1       	rjmp	.+718    	; 0xc60 <process_sensor+0x536>
     992:	c5 01       	movw	r24, r10
     994:	b7 fe       	sbrs	r11, 7
     996:	02 c0       	rjmp	.+4      	; 0x99c <process_sensor+0x272>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	f8 01       	movw	r30, r16
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	82 17       	cp	r24, r18
     9a4:	93 07       	cpc	r25, r19
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <process_sensor+0x280>
     9a8:	8f c0       	rjmp	.+286    	; 0xac8 <process_sensor+0x39e>
     9aa:	80 91 15 20 	lds	r24, 0x2015
     9ae:	80 93 4c 20 	sts	0x204C, r24
     9b2:	9f 01       	movw	r18, r30
     9b4:	20 0f       	add	r18, r16
     9b6:	31 1f       	adc	r19, r17
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	d9 01       	movw	r26, r18
     9be:	ab 5c       	subi	r26, 0xCB	; 203
     9c0:	bf 4d       	sbci	r27, 0xDF	; 223
     9c2:	8c 91       	ld	r24, X
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	8c 93       	st	X, r24
     9c8:	f9 01       	movw	r30, r18
     9ca:	ed 5c       	subi	r30, 0xCD	; 205
     9cc:	ff 4d       	sbci	r31, 0xDF	; 223
     9ce:	84 81       	ldd	r24, Z+4	; 0x04
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	88 73       	andi	r24, 0x38	; 56
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	23 e0       	ldi	r18, 0x03	; 3
     9d8:	96 95       	lsr	r25
     9da:	87 95       	ror	r24
     9dc:	2a 95       	dec	r18
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <process_sensor+0x2ae>
     9e0:	68 2e       	mov	r6, r24
     9e2:	88 23       	and	r24, r24
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <process_sensor+0x2be>
     9e6:	3e c0       	rjmp	.+124    	; 0xa64 <process_sensor+0x33a>
     9e8:	cc 24       	eor	r12, r12
     9ea:	dd 24       	eor	r13, r13
     9ec:	7f 01       	movw	r14, r30
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	e8 0e       	add	r14, r24
     9f4:	f9 1e       	adc	r15, r25
     9f6:	4d 01       	movw	r8, r26
     9f8:	2f c0       	rjmp	.+94     	; 0xa58 <process_sensor+0x32e>
     9fa:	d7 14       	cp	r13, r7
     9fc:	61 f1       	breq	.+88     	; 0xa56 <process_sensor+0x32c>
     9fe:	8d 2d       	mov	r24, r13
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	ec 01       	movw	r28, r24
     a04:	cc 0f       	add	r28, r28
     a06:	dd 1f       	adc	r29, r29
     a08:	c8 0f       	add	r28, r24
     a0a:	d9 1f       	adc	r29, r25
     a0c:	cc 0f       	add	r28, r28
     a0e:	dd 1f       	adc	r29, r29
     a10:	cd 5c       	subi	r28, 0xCD	; 205
     a12:	df 4d       	sbci	r29, 0xDF	; 223
     a14:	8c 81       	ldd	r24, Y+4	; 0x04
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	88 73       	andi	r24, 0x38	; 56
     a1a:	90 70       	andi	r25, 0x00	; 0
     a1c:	73 e0       	ldi	r23, 0x03	; 3
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	7a 95       	dec	r23
     a24:	e1 f7       	brne	.-8      	; 0xa1e <process_sensor+0x2f4>
     a26:	68 16       	cp	r6, r24
     a28:	b1 f4       	brne	.+44     	; 0xa56 <process_sensor+0x32c>
     a2a:	8d 2d       	mov	r24, r13
     a2c:	26 dd       	rcall	.-1460   	; 0x47a <qt_get_sensor_delta>
     a2e:	2b 81       	ldd	r18, Y+3	; 0x03
     a30:	82 1b       	sub	r24, r18
     a32:	91 09       	sbc	r25, r1
     a34:	f7 01       	movw	r30, r14
     a36:	20 81       	ld	r18, Z
     a38:	a5 01       	movw	r20, r10
     a3a:	42 1b       	sub	r20, r18
     a3c:	51 09       	sbc	r21, r1
     a3e:	48 17       	cp	r20, r24
     a40:	59 07       	cpc	r21, r25
     a42:	2c f0       	brlt	.+10     	; 0xa4e <process_sensor+0x324>
     a44:	88 81       	ld	r24, Y
     a46:	80 31       	cpi	r24, 0x10	; 16
     a48:	11 f0       	breq	.+4      	; 0xa4e <process_sensor+0x324>
     a4a:	88 30       	cpi	r24, 0x08	; 8
     a4c:	21 f4       	brne	.+8      	; 0xa56 <process_sensor+0x32c>
     a4e:	f4 01       	movw	r30, r8
     a50:	10 82       	st	Z, r1
     a52:	cc 24       	eor	r12, r12
     a54:	c3 94       	inc	r12
     a56:	d3 94       	inc	r13
     a58:	80 91 4b 20 	lds	r24, 0x204B
     a5c:	d8 16       	cp	r13, r24
     a5e:	68 f2       	brcs	.-102    	; 0x9fa <process_sensor+0x2d0>
     a60:	cc 20       	and	r12, r12
     a62:	79 f4       	brne	.+30     	; 0xa82 <process_sensor+0x358>
     a64:	80 91 14 20 	lds	r24, 0x2014
     a68:	88 23       	and	r24, r24
     a6a:	59 f0       	breq	.+22     	; 0xa82 <process_sensor+0x358>
     a6c:	80 91 2b 20 	lds	r24, 0x202B
     a70:	90 91 2c 20 	lds	r25, 0x202C
     a74:	98 60       	ori	r25, 0x08	; 8
     a76:	80 93 2b 20 	sts	0x202B, r24
     a7a:	90 93 2c 20 	sts	0x202C, r25
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <process_sensor+0x35a>
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	98 01       	movw	r18, r16
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	20 0f       	add	r18, r16
     a8c:	31 1f       	adc	r19, r17
     a8e:	f9 01       	movw	r30, r18
     a90:	ee 0f       	add	r30, r30
     a92:	ff 1f       	adc	r31, r31
     a94:	eb 5c       	subi	r30, 0xCB	; 203
     a96:	ff 4d       	sbci	r31, 0xDF	; 223
     a98:	90 81       	ld	r25, Z
     a9a:	80 91 14 20 	lds	r24, 0x2014
     a9e:	98 17       	cp	r25, r24
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <process_sensor+0x37a>
     aa2:	1a c1       	rjmp	.+564    	; 0xcd8 <process_sensor+0x5ae>
     aa4:	80 91 2b 20 	lds	r24, 0x202B
     aa8:	90 91 2c 20 	lds	r25, 0x202C
     aac:	83 60       	ori	r24, 0x03	; 3
     aae:	80 93 2b 20 	sts	0x202B, r24
     ab2:	90 93 2c 20 	sts	0x202C, r25
     ab6:	f9 01       	movw	r30, r18
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ed 5c       	subi	r30, 0xCD	; 205
     abe:	ff 4d       	sbci	r31, 0xDF	; 223
     ac0:	80 e1       	ldi	r24, 0x10	; 16
     ac2:	80 83       	st	Z, r24
     ac4:	11 82       	std	Z+1, r1	; 0x01
     ac6:	08 c1       	rjmp	.+528    	; 0xcd8 <process_sensor+0x5ae>
     ac8:	e0 0f       	add	r30, r16
     aca:	f1 1f       	adc	r31, r17
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	df 01       	movw	r26, r30
     ad2:	ad 5c       	subi	r26, 0xCD	; 205
     ad4:	bf 4d       	sbci	r27, 0xDF	; 223
     ad6:	15 96       	adiw	r26, 0x05	; 5
     ad8:	2c 91       	ld	r18, X
     ada:	15 97       	sbiw	r26, 0x05	; 5
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	8c 93       	st	X, r24
     ae0:	80 91 2b 20 	lds	r24, 0x202B
     ae4:	90 91 2c 20 	lds	r25, 0x202C
     ae8:	82 60       	ori	r24, 0x02	; 2
     aea:	80 93 2b 20 	sts	0x202B, r24
     aee:	90 93 2c 20 	sts	0x202C, r25
     af2:	eb 5c       	subi	r30, 0xCB	; 203
     af4:	ff 4d       	sbci	r31, 0xDF	; 223
     af6:	10 82       	st	Z, r1
     af8:	e2 2f       	mov	r30, r18
     afa:	ae c0       	rjmp	.+348    	; 0xc58 <process_sensor+0x52e>
     afc:	52 ff       	sbrs	r21, 2
     afe:	0e c0       	rjmp	.+28     	; 0xb1c <process_sensor+0x3f2>
     b00:	ed 81       	ldd	r30, Y+5	; 0x05
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e3 5b       	subi	r30, 0xB3	; 179
     b06:	ff 4d       	sbci	r31, 0xDF	; 223
     b08:	80 e8       	ldi	r24, 0x80	; 128
     b0a:	80 83       	st	Z, r24
     b0c:	80 e2       	ldi	r24, 0x20	; 32
     b0e:	88 83       	st	Y, r24
     b10:	80 91 2b 20 	lds	r24, 0x202B
     b14:	90 91 2c 20 	lds	r25, 0x202C
     b18:	90 61       	ori	r25, 0x10	; 16
     b1a:	4a c0       	rjmp	.+148    	; 0xbb0 <process_sensor+0x486>
     b1c:	c5 01       	movw	r24, r10
     b1e:	b7 fe       	sbrs	r11, 7
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <process_sensor+0x3fc>
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	f8 01       	movw	r30, r16
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	40 91 2b 20 	lds	r20, 0x202B
     b30:	50 91 2c 20 	lds	r21, 0x202C
     b34:	86 17       	cp	r24, r22
     b36:	97 07       	cpc	r25, r23
     b38:	70 f4       	brcc	.+28     	; 0xb56 <process_sensor+0x42c>
     b3a:	e0 0f       	add	r30, r16
     b3c:	f1 1f       	adc	r31, r17
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	ed 5c       	subi	r30, 0xCD	; 205
     b44:	ff 4d       	sbci	r31, 0xDF	; 223
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	80 83       	st	Z, r24
     b4a:	54 60       	ori	r21, 0x04	; 4
     b4c:	40 93 2b 20 	sts	0x202B, r20
     b50:	50 93 2c 20 	sts	0x202C, r21
     b54:	31 c0       	rjmp	.+98     	; 0xbb8 <process_sensor+0x48e>
     b56:	41 60       	ori	r20, 0x01	; 1
     b58:	40 93 2b 20 	sts	0x202B, r20
     b5c:	50 93 2c 20 	sts	0x202C, r21
     b60:	e0 0f       	add	r30, r16
     b62:	f1 1f       	adc	r31, r17
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	eb 5c       	subi	r30, 0xCB	; 203
     b6a:	ff 4d       	sbci	r31, 0xDF	; 223
     b6c:	90 81       	ld	r25, Z
     b6e:	80 91 14 20 	lds	r24, 0x2014
     b72:	98 17       	cp	r25, r24
     b74:	10 f4       	brcc	.+4      	; 0xb7a <process_sensor+0x450>
     b76:	9f 5f       	subi	r25, 0xFF	; 255
     b78:	90 83       	st	Z, r25
     b7a:	90 91 16 20 	lds	r25, 0x2016
     b7e:	99 23       	and	r25, r25
     b80:	71 f0       	breq	.+28     	; 0xb9e <process_sensor+0x474>
     b82:	f8 01       	movw	r30, r16
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	e0 0f       	add	r30, r16
     b8a:	f1 1f       	adc	r31, r17
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ed 5c       	subi	r30, 0xCD	; 205
     b92:	ff 4d       	sbci	r31, 0xDF	; 223
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	89 17       	cp	r24, r25
     b98:	20 f4       	brcc	.+8      	; 0xba2 <process_sensor+0x478>
     b9a:	8f 0d       	add	r24, r15
     b9c:	81 83       	std	Z+1, r24	; 0x01
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0c c0       	rjmp	.+24     	; 0xbba <process_sensor+0x490>
     ba2:	87 2d       	mov	r24, r7
     ba4:	81 dd       	rcall	.-1278   	; 0x6a8 <start_cal_sensor>
     ba6:	80 91 2b 20 	lds	r24, 0x202B
     baa:	90 91 2c 20 	lds	r25, 0x202C
     bae:	92 60       	ori	r25, 0x02	; 2
     bb0:	80 93 2b 20 	sts	0x202B, r24
     bb4:	90 93 2c 20 	sts	0x202C, r25
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	80 91 15 20 	lds	r24, 0x2015
     bbe:	80 93 4c 20 	sts	0x204C, r24
     bc2:	8a c0       	rjmp	.+276    	; 0xcd8 <process_sensor+0x5ae>
     bc4:	80 91 15 20 	lds	r24, 0x2015
     bc8:	80 93 4c 20 	sts	0x204C, r24
     bcc:	df 01       	movw	r26, r30
     bce:	aa 0f       	add	r26, r26
     bd0:	bb 1f       	adc	r27, r27
     bd2:	ab 5c       	subi	r26, 0xCB	; 203
     bd4:	bf 4d       	sbci	r27, 0xDF	; 223
     bd6:	8c 91       	ld	r24, X
     bd8:	88 23       	and	r24, r24
     bda:	89 f1       	breq	.+98     	; 0xc3e <process_sensor+0x514>
     bdc:	c5 01       	movw	r24, r10
     bde:	b7 fe       	sbrs	r11, 7
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <process_sensor+0x4bc>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	40 91 2b 20 	lds	r20, 0x202B
     bea:	50 91 2c 20 	lds	r21, 0x202C
     bee:	68 17       	cp	r22, r24
     bf0:	79 07       	cpc	r23, r25
     bf2:	90 f4       	brcc	.+36     	; 0xc18 <process_sensor+0x4ee>
     bf4:	f8 01       	movw	r30, r16
     bf6:	ee 0f       	add	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	e0 0f       	add	r30, r16
     bfc:	f1 1f       	adc	r31, r17
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ed 5c       	subi	r30, 0xCD	; 205
     c04:	ff 4d       	sbci	r31, 0xDF	; 223
     c06:	80 e1       	ldi	r24, 0x10	; 16
     c08:	80 83       	st	Z, r24
     c0a:	41 60       	ori	r20, 0x01	; 1
     c0c:	40 93 2b 20 	sts	0x202B, r20
     c10:	50 93 2c 20 	sts	0x202C, r21
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	06 c0       	rjmp	.+12     	; 0xc24 <process_sensor+0x4fa>
     c18:	54 60       	ori	r21, 0x04	; 4
     c1a:	40 93 2b 20 	sts	0x202B, r20
     c1e:	50 93 2c 20 	sts	0x202C, r21
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	f8 01       	movw	r30, r16
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e0 0f       	add	r30, r16
     c2c:	f1 1f       	adc	r31, r17
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	eb 5c       	subi	r30, 0xCB	; 203
     c34:	ff 4d       	sbci	r31, 0xDF	; 223
     c36:	80 81       	ld	r24, Z
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	80 83       	st	Z, r24
     c3c:	4d c0       	rjmp	.+154    	; 0xcd8 <process_sensor+0x5ae>
     c3e:	ed 81       	ldd	r30, Y+5	; 0x05
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	88 83       	st	Y, r24
     c44:	80 91 2b 20 	lds	r24, 0x202B
     c48:	90 91 2c 20 	lds	r25, 0x202C
     c4c:	82 60       	ori	r24, 0x02	; 2
     c4e:	80 93 2b 20 	sts	0x202B, r24
     c52:	90 93 2c 20 	sts	0x202C, r25
     c56:	1c 92       	st	X, r1
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	e3 5b       	subi	r30, 0xB3	; 179
     c5c:	ff 4d       	sbci	r31, 0xDF	; 223
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	80 83       	st	Z, r24
     c62:	39 c0       	rjmp	.+114    	; 0xcd6 <process_sensor+0x5ac>
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	a8 2f       	mov	r26, r24
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	a3 5b       	subi	r26, 0xB3	; 179
     c6c:	bf 4d       	sbci	r27, 0xDF	; 223
     c6e:	9c 91       	ld	r25, X
     c70:	9f 5f       	subi	r25, 0xFF	; 255
     c72:	9c 93       	st	X, r25
     c74:	52 fd       	sbrc	r21, 2
     c76:	18 c0       	rjmp	.+48     	; 0xca8 <process_sensor+0x57e>
     c78:	97 ff       	sbrs	r25, 7
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <process_sensor+0x558>
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	88 83       	st	Y, r24
     c80:	2a c0       	rjmp	.+84     	; 0xcd6 <process_sensor+0x5ac>
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	88 83       	st	Y, r24
     c86:	80 91 2b 20 	lds	r24, 0x202B
     c8a:	90 91 2c 20 	lds	r25, 0x202C
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	80 93 2b 20 	sts	0x202B, r24
     c94:	90 93 2c 20 	sts	0x202C, r25
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	eb 5c       	subi	r30, 0xCB	; 203
     c9e:	ff 4d       	sbci	r31, 0xDF	; 223
     ca0:	10 82       	st	Z, r1
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	8c 93       	st	X, r24
     ca6:	17 c0       	rjmp	.+46     	; 0xcd6 <process_sensor+0x5ac>
     ca8:	80 91 19 20 	lds	r24, 0x2019
     cac:	98 17       	cp	r25, r24
     cae:	40 f0       	brcs	.+16     	; 0xcc0 <process_sensor+0x596>
     cb0:	87 2d       	mov	r24, r7
     cb2:	fa dc       	rcall	.-1548   	; 0x6a8 <start_cal_sensor>
     cb4:	80 91 2b 20 	lds	r24, 0x202B
     cb8:	90 91 2c 20 	lds	r25, 0x202C
     cbc:	90 61       	ori	r25, 0x10	; 16
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <process_sensor+0x5a0>
     cc0:	80 91 2b 20 	lds	r24, 0x202B
     cc4:	90 91 2c 20 	lds	r25, 0x202C
     cc8:	94 60       	ori	r25, 0x04	; 4
     cca:	80 93 2b 20 	sts	0x202B, r24
     cce:	90 93 2c 20 	sts	0x202C, r25
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <process_sensor+0x5ae>
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	84 2f       	mov	r24, r20
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	ee e0       	ldi	r30, 0x0E	; 14
     ce0:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <__epilogue_restores__+0x8>

00000ce4 <burst_init>:
     ce4:	fc 01       	movw	r30, r24
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	09 f0       	breq	.+2      	; 0xcec <burst_init+0x8>
     cea:	19 95       	eicall
     cec:	08 95       	ret

00000cee <burst_reset>:
     cee:	10 92 51 20 	sts	0x2051, r1
     cf2:	10 92 52 20 	sts	0x2052, r1
     cf6:	10 92 55 20 	sts	0x2055, r1
     cfa:	10 92 56 20 	sts	0x2056, r1
     cfe:	10 92 53 20 	sts	0x2053, r1
     d02:	10 92 54 20 	sts	0x2054, r1
     d06:	10 92 57 20 	sts	0x2057, r1
     d0a:	10 92 58 20 	sts	0x2058, r1
     d0e:	08 95       	ret

00000d10 <burst>:
     d10:	80 91 53 20 	lds	r24, 0x2053
     d14:	90 91 51 20 	lds	r25, 0x2051
     d18:	89 2b       	or	r24, r25
     d1a:	41 f0       	breq	.+16     	; 0xd2c <burst+0x1c>
     d1c:	e0 91 11 20 	lds	r30, 0x2011
     d20:	f0 91 12 20 	lds	r31, 0x2012
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	11 f0       	breq	.+4      	; 0xd2c <burst+0x1c>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	19 95       	eicall
     d2c:	80 91 54 20 	lds	r24, 0x2054
     d30:	90 91 52 20 	lds	r25, 0x2052
     d34:	89 2b       	or	r24, r25
     d36:	41 f0       	breq	.+16     	; 0xd48 <burst+0x38>
     d38:	e0 91 11 20 	lds	r30, 0x2011
     d3c:	f0 91 12 20 	lds	r31, 0x2012
     d40:	30 97       	sbiw	r30, 0x00	; 0
     d42:	11 f0       	breq	.+4      	; 0xd48 <burst+0x38>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	19 95       	eicall
     d48:	08 95       	ret

00000d4a <adc_handler>:
		return true;
	} else {
		cpu_irq_restore(irqflags);
		return false;
	}
}
     d4a:	61 30       	cpi	r22, 0x01	; 1
     d4c:	69 f5       	brne	.+90     	; 0xda8 <adc_handler+0x5e>
     d4e:	80 91 5a 20 	lds	r24, 0x205A
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	80 93 5a 20 	sts	0x205A, r24
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	39 f4       	brne	.+14     	; 0xd6a <adc_handler+0x20>
     d5c:	40 93 5b 20 	sts	0x205B, r20
     d60:	50 93 5c 20 	sts	0x205C, r21
     d64:	10 92 5f 20 	sts	0x205F, r1
     d68:	0c c0       	rjmp	.+24     	; 0xd82 <adc_handler+0x38>
     d6a:	80 91 5b 20 	lds	r24, 0x205B
     d6e:	90 91 5c 20 	lds	r25, 0x205C
     d72:	48 0f       	add	r20, r24
     d74:	59 1f       	adc	r21, r25
     d76:	56 95       	lsr	r21
     d78:	47 95       	ror	r20
     d7a:	40 93 5b 20 	sts	0x205B, r20
     d7e:	50 93 5c 20 	sts	0x205C, r21
     d82:	80 91 5a 20 	lds	r24, 0x205A
     d86:	84 30       	cpi	r24, 0x04	; 4
     d88:	31 f4       	brne	.+12     	; 0xd96 <adc_handler+0x4c>
     d8a:	10 92 5a 20 	sts	0x205A, r1
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 5f 20 	sts	0x205F, r24
     d94:	08 95       	ret
     d96:	9f b7       	in	r25, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	e0 e0       	ldi	r30, 0x00	; 0
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	80 81       	ld	r24, Z
     da0:	84 60       	ori	r24, 0x04	; 4
     da2:	80 83       	st	Z, r24
     da4:	9f bf       	out	0x3f, r25	; 63
     da6:	08 95       	ret
     da8:	62 30       	cpi	r22, 0x02	; 2
     daa:	61 f5       	brne	.+88     	; 0xe04 <adc_handler+0xba>
     dac:	80 91 59 20 	lds	r24, 0x2059
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	80 93 59 20 	sts	0x2059, r24
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	39 f4       	brne	.+14     	; 0xdc8 <adc_handler+0x7e>
     dba:	40 93 5d 20 	sts	0x205D, r20
     dbe:	50 93 5e 20 	sts	0x205E, r21
     dc2:	10 92 60 20 	sts	0x2060, r1
     dc6:	0c c0       	rjmp	.+24     	; 0xde0 <adc_handler+0x96>
     dc8:	80 91 5d 20 	lds	r24, 0x205D
     dcc:	90 91 5e 20 	lds	r25, 0x205E
     dd0:	48 0f       	add	r20, r24
     dd2:	59 1f       	adc	r21, r25
     dd4:	56 95       	lsr	r21
     dd6:	47 95       	ror	r20
     dd8:	40 93 5d 20 	sts	0x205D, r20
     ddc:	50 93 5e 20 	sts	0x205E, r21
     de0:	80 91 59 20 	lds	r24, 0x2059
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	31 f4       	brne	.+12     	; 0xdf4 <adc_handler+0xaa>
     de8:	10 92 59 20 	sts	0x2059, r1
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 60 20 	sts	0x2060, r24
     df2:	08 95       	ret
     df4:	9f b7       	in	r25, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f2 e0       	ldi	r31, 0x02	; 2
     dfc:	80 81       	ld	r24, Z
     dfe:	88 60       	ori	r24, 0x08	; 8
     e00:	80 83       	st	Z, r24
     e02:	9f bf       	out	0x3f, r25	; 63
     e04:	08 95       	ret

00000e06 <adc_sensors_init>:
 *
 * This will set up the ADC for reading the NTC and light sensor
 * present on the A3BU-Xplained board.
 */
void adc_sensors_init(void)
{
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	2b 97       	sbiw	r28, 0x0b	; 11
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	de bf       	out	0x3e, r29	; 62
	struct adc_config adc_conf;
	struct adc_channel_config adc_ch_conf;

	/* Clear the ADC configuration structs */
	adc_read_configuration(&ADCA, &adc_conf);
     e16:	be 01       	movw	r22, r28
     e18:	6f 5f       	subi	r22, 0xFF	; 255
     e1a:	7f 4f       	sbci	r23, 0xFF	; 255
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	92 e0       	ldi	r25, 0x02	; 2
     e20:	72 d5       	rcall	.+2788   	; 0x1906 <adc_read_configuration>
	adcch_read_configuration(&ADCA, ADC_CH0, &adc_ch_conf);
     e22:	ae 01       	movw	r20, r28
     e24:	48 5f       	subi	r20, 0xF8	; 248
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	c7 d5       	rcall	.+2958   	; 0x19be <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     e32:	9b 81       	ldd	r25, Y+3	; 0x03
     e34:	9f 78       	andi	r25, 0x8F	; 143
	conf->refctrl |= ref;
     e36:	90 61       	ori	r25, 0x10	; 16
     e38:	9b 83       	std	Y+3, r25	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     e3a:	96 e0       	ldi	r25, 0x06	; 6
     e3c:	9d 83       	std	Y+5, r25	; 0x05
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     e3e:	81 7e       	andi	r24, 0xE1	; 225
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	8a 83       	std	Y+2, r24	; 0x02
		conf->evctrl = ADC_EVACT_NONE_gc;
     e44:	1c 82       	std	Y+4, r1	; 0x04
	*/
	adc_set_conversion_parameters(&adc_conf, ADC_SIGN_ON, ADC_RES_12,
			ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 125000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_write_configuration(&ADCA, &adc_conf);
     e46:	be 01       	movw	r22, r28
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	92 e0       	ldi	r25, 0x02	; 2
     e50:	06 d5       	rcall	.+2572   	; 0x185e <adc_write_configuration>
	adc_set_callback(&ADCA, &adc_handler);
     e52:	65 ea       	ldi	r22, 0xA5	; 165
     e54:	76 e0       	ldi	r23, 0x06	; 6
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	04 d3       	rcall	.+1544   	; 0x1464 <adc_set_callback>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     e5c:	11 e0       	ldi	r17, 0x01	; 1
     e5e:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     e60:	19 86       	std	Y+9, r1	; 0x09
 *
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
     e62:	8a 85       	ldd	r24, Y+10	; 0x0a
     e64:	80 7f       	andi	r24, 0xF0	; 240
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     e66:	81 60       	ori	r24, 0x01	; 1
     e68:	8a 87       	std	Y+10, r24	; 0x0a
	 * - interrupts enabled
	 */
	adcch_set_input(&adc_ch_conf, ADCCH_POS_PIN0, ADCCH_NEG_NONE, 1);
	adcch_set_interrupt_mode(&adc_ch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adc_ch_conf);
	adcch_write_configuration(&ADCA, ADC_CH0, &adc_ch_conf);
     e6a:	ae 01       	movw	r20, r28
     e6c:	48 5f       	subi	r20, 0xF8	; 248
     e6e:	5f 4f       	sbci	r21, 0xFF	; 255
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	6a d5       	rcall	.+2772   	; 0x194c <adcch_write_configuration>
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     e78:	18 87       	std	Y+8, r17	; 0x08
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     e7a:	88 e0       	ldi	r24, 0x08	; 8
     e7c:	89 87       	std	Y+9, r24	; 0x09
	 * - single-ended measurement
	 * - interrupt flag set on completed conversion
	 * - interrupts enabled
	 */
	adcch_set_input(&adc_ch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE, 1);
	adcch_write_configuration(&ADCA, ADC_CH1, &adc_ch_conf);
     e7e:	ae 01       	movw	r20, r28
     e80:	48 5f       	subi	r20, 0xF8	; 248
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	62 e0       	ldi	r22, 0x02	; 2
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	60 d5       	rcall	.+2752   	; 0x194c <adcch_write_configuration>

	adc_enable(&ADCA);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	3f d3       	rcall	.+1662   	; 0x1510 <adc_enable>
}
     e92:	2b 96       	adiw	r28, 0x0b	; 11
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	08 95       	ret

00000ea0 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	1f 92       	push	r1
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     eb8:	88 e0       	ldi	r24, 0x08	; 8
     eba:	80 93 06 06 	sts	0x0606, r24
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	85 33       	cpi	r24, 0x35	; 53
     ec6:	91 05       	cpc	r25, r1
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <st7565r_init+0x22>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	80 93 05 06 	sts	0x0605, r24
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	85 33       	cpi	r24, 0x35	; 53
     ed8:	91 05       	cpc	r25, r1
     eda:	e1 f7       	brne	.-8      	; 0xed4 <st7565r_init+0x34>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     edc:	0f 2e       	mov	r0, r31
     ede:	fb e2       	ldi	r31, 0x2B	; 43
     ee0:	bf 2e       	mov	r11, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     ee6:	80 ea       	ldi	r24, 0xA0	; 160
     ee8:	99 e0       	ldi	r25, 0x09	; 9
     eea:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     eee:	c1 2c       	mov	r12, r1
     ef0:	d1 2c       	mov	r13, r1
     ef2:	76 01       	movw	r14, r12
     ef4:	00 e4       	ldi	r16, 0x40	; 64
     ef6:	12 e4       	ldi	r17, 0x42	; 66
     ef8:	2f e0       	ldi	r18, 0x0F	; 15
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	43 e0       	ldi	r20, 0x03	; 3
     efe:	be 01       	movw	r22, r28
     f00:	6f 5f       	subi	r22, 0xFF	; 255
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	80 ea       	ldi	r24, 0xA0	; 160
     f06:	99 e0       	ldi	r25, 0x09	; 9
     f08:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     f0c:	00 e6       	ldi	r16, 0x60	; 96
     f0e:	16 e0       	ldi	r17, 0x06	; 6
     f10:	ff 24       	eor	r15, r15
     f12:	f3 94       	inc	r15
     f14:	f8 01       	movw	r30, r16
     f16:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     f18:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     f1a:	be 01       	movw	r22, r28
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	80 ea       	ldi	r24, 0xA0	; 160
     f22:	99 e0       	ldi	r25, 0x09	; 9
     f24:	0e 94 15 10 	call	0x202a	; 0x202a <usart_spi_select_device>
     f28:	f8 01       	movw	r30, r16
     f2a:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     f2c:	e0 ea       	ldi	r30, 0xA0	; 160
     f2e:	f9 e0       	ldi	r31, 0x09	; 9
     f30:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     f32:	85 ff       	sbrs	r24, 5
     f34:	fd cf       	rjmp	.-6      	; 0xf30 <st7565r_init+0x90>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     f36:	80 ea       	ldi	r24, 0xA0	; 160
     f38:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     f3c:	e0 ea       	ldi	r30, 0xA0	; 160
     f3e:	f9 e0       	ldi	r31, 0x09	; 9
     f40:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     f42:	86 ff       	sbrs	r24, 6
     f44:	fd cf       	rjmp	.-6      	; 0xf40 <st7565r_init+0xa0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     f46:	e0 ea       	ldi	r30, 0xA0	; 160
     f48:	f9 e0       	ldi	r31, 0x09	; 9
     f4a:	80 e4       	ldi	r24, 0x40	; 64
     f4c:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     f4e:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     f50:	be 01       	movw	r22, r28
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	80 ea       	ldi	r24, 0xA0	; 160
     f58:	99 e0       	ldi	r25, 0x09	; 9
     f5a:	0e 94 2b 10 	call	0x2056	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     f5e:	8b e2       	ldi	r24, 0x2B	; 43
     f60:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	80 ea       	ldi	r24, 0xA0	; 160
     f6a:	99 e0       	ldi	r25, 0x09	; 9
     f6c:	0e 94 15 10 	call	0x202a	; 0x202a <usart_spi_select_device>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     f76:	e0 ea       	ldi	r30, 0xA0	; 160
     f78:	f9 e0       	ldi	r31, 0x09	; 9
     f7a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     f7c:	85 ff       	sbrs	r24, 5
     f7e:	fd cf       	rjmp	.-6      	; 0xf7a <st7565r_init+0xda>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     f80:	86 ea       	ldi	r24, 0xA6	; 166
     f82:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     f86:	e0 ea       	ldi	r30, 0xA0	; 160
     f88:	f9 e0       	ldi	r31, 0x09	; 9
     f8a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     f8c:	86 ff       	sbrs	r24, 6
     f8e:	fd cf       	rjmp	.-6      	; 0xf8a <st7565r_init+0xea>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     f90:	e0 ea       	ldi	r30, 0xA0	; 160
     f92:	f9 e0       	ldi	r31, 0x09	; 9
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     f98:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     f9a:	be 01       	movw	r22, r28
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	80 ea       	ldi	r24, 0xA0	; 160
     fa2:	99 e0       	ldi	r25, 0x09	; 9
     fa4:	0e 94 2b 10 	call	0x2056	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     fa8:	8b e2       	ldi	r24, 0x2B	; 43
     faa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     fac:	be 01       	movw	r22, r28
     fae:	6f 5f       	subi	r22, 0xFF	; 255
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	80 ea       	ldi	r24, 0xA0	; 160
     fb4:	99 e0       	ldi	r25, 0x09	; 9
     fb6:	0e 94 15 10 	call	0x202a	; 0x202a <usart_spi_select_device>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     fc0:	e0 ea       	ldi	r30, 0xA0	; 160
     fc2:	f9 e0       	ldi	r31, 0x09	; 9
     fc4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     fc6:	85 ff       	sbrs	r24, 5
     fc8:	fd cf       	rjmp	.-6      	; 0xfc4 <st7565r_init+0x124>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     fd0:	e0 ea       	ldi	r30, 0xA0	; 160
     fd2:	f9 e0       	ldi	r31, 0x09	; 9
     fd4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     fd6:	86 ff       	sbrs	r24, 6
     fd8:	fd cf       	rjmp	.-6      	; 0xfd4 <st7565r_init+0x134>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     fda:	e0 ea       	ldi	r30, 0xA0	; 160
     fdc:	f9 e0       	ldi	r31, 0x09	; 9
     fde:	80 e4       	ldi	r24, 0x40	; 64
     fe0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     fe2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	80 ea       	ldi	r24, 0xA0	; 160
     fec:	99 e0       	ldi	r25, 0x09	; 9
     fee:	0e 94 2b 10 	call	0x2056	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ff2:	8b e2       	ldi	r24, 0x2B	; 43
     ff4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	80 ea       	ldi	r24, 0xA0	; 160
     ffe:	99 e0       	ldi	r25, 0x09	; 9
    1000:	0e 94 15 10 	call	0x202a	; 0x202a <usart_spi_select_device>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    100a:	e0 ea       	ldi	r30, 0xA0	; 160
    100c:	f9 e0       	ldi	r31, 0x09	; 9
    100e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1010:	85 ff       	sbrs	r24, 5
    1012:	fd cf       	rjmp	.-6      	; 0x100e <st7565r_init+0x16e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1014:	82 ea       	ldi	r24, 0xA2	; 162
    1016:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    101a:	e0 ea       	ldi	r30, 0xA0	; 160
    101c:	f9 e0       	ldi	r31, 0x09	; 9
    101e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1020:	86 ff       	sbrs	r24, 6
    1022:	fd cf       	rjmp	.-6      	; 0x101e <st7565r_init+0x17e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1024:	e0 ea       	ldi	r30, 0xA0	; 160
    1026:	f9 e0       	ldi	r31, 0x09	; 9
    1028:	80 e4       	ldi	r24, 0x40	; 64
    102a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    102c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    102e:	be 01       	movw	r22, r28
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	80 ea       	ldi	r24, 0xA0	; 160
    1036:	99 e0       	ldi	r25, 0x09	; 9
    1038:	0e 94 2b 10 	call	0x2056	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    103c:	8b e2       	ldi	r24, 0x2B	; 43
    103e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1040:	be 01       	movw	r22, r28
    1042:	6f 5f       	subi	r22, 0xFF	; 255
    1044:	7f 4f       	sbci	r23, 0xFF	; 255
    1046:	80 ea       	ldi	r24, 0xA0	; 160
    1048:	99 e0       	ldi	r25, 0x09	; 9
    104a:	ef d7       	rcall	.+4062   	; 0x202a <usart_spi_select_device>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1052:	e0 ea       	ldi	r30, 0xA0	; 160
    1054:	f9 e0       	ldi	r31, 0x09	; 9
    1056:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1058:	85 ff       	sbrs	r24, 5
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <st7565r_init+0x1b6>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    105c:	8f e2       	ldi	r24, 0x2F	; 47
    105e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1062:	e0 ea       	ldi	r30, 0xA0	; 160
    1064:	f9 e0       	ldi	r31, 0x09	; 9
    1066:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1068:	86 ff       	sbrs	r24, 6
    106a:	fd cf       	rjmp	.-6      	; 0x1066 <st7565r_init+0x1c6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    106c:	e0 ea       	ldi	r30, 0xA0	; 160
    106e:	f9 e0       	ldi	r31, 0x09	; 9
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1074:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1076:	be 01       	movw	r22, r28
    1078:	6f 5f       	subi	r22, 0xFF	; 255
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	80 ea       	ldi	r24, 0xA0	; 160
    107e:	99 e0       	ldi	r25, 0x09	; 9
    1080:	ea d7       	rcall	.+4052   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1082:	8b e2       	ldi	r24, 0x2B	; 43
    1084:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1086:	be 01       	movw	r22, r28
    1088:	6f 5f       	subi	r22, 0xFF	; 255
    108a:	7f 4f       	sbci	r23, 0xFF	; 255
    108c:	80 ea       	ldi	r24, 0xA0	; 160
    108e:	99 e0       	ldi	r25, 0x09	; 9
    1090:	cc d7       	rcall	.+3992   	; 0x202a <usart_spi_select_device>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1098:	e0 ea       	ldi	r30, 0xA0	; 160
    109a:	f9 e0       	ldi	r31, 0x09	; 9
    109c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    109e:	85 ff       	sbrs	r24, 5
    10a0:	fd cf       	rjmp	.-6      	; 0x109c <st7565r_init+0x1fc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    10a2:	88 ef       	ldi	r24, 0xF8	; 248
    10a4:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    10a8:	e0 ea       	ldi	r30, 0xA0	; 160
    10aa:	f9 e0       	ldi	r31, 0x09	; 9
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    10ae:	86 ff       	sbrs	r24, 6
    10b0:	fd cf       	rjmp	.-6      	; 0x10ac <st7565r_init+0x20c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    10b2:	e0 ea       	ldi	r30, 0xA0	; 160
    10b4:	f9 e0       	ldi	r31, 0x09	; 9
    10b6:	80 e4       	ldi	r24, 0x40	; 64
    10b8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    10ba:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	80 ea       	ldi	r24, 0xA0	; 160
    10c4:	99 e0       	ldi	r25, 0x09	; 9
    10c6:	c7 d7       	rcall	.+3982   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    10c8:	8b e2       	ldi	r24, 0x2B	; 43
    10ca:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    10cc:	be 01       	movw	r22, r28
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	80 ea       	ldi	r24, 0xA0	; 160
    10d4:	99 e0       	ldi	r25, 0x09	; 9
    10d6:	a9 d7       	rcall	.+3922   	; 0x202a <usart_spi_select_device>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    10de:	e0 ea       	ldi	r30, 0xA0	; 160
    10e0:	f9 e0       	ldi	r31, 0x09	; 9
    10e2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    10e4:	85 ff       	sbrs	r24, 5
    10e6:	fd cf       	rjmp	.-6      	; 0x10e2 <st7565r_init+0x242>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    10e8:	10 92 a0 09 	sts	0x09A0, r1
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    10ec:	e0 ea       	ldi	r30, 0xA0	; 160
    10ee:	f9 e0       	ldi	r31, 0x09	; 9
    10f0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    10f2:	86 ff       	sbrs	r24, 6
    10f4:	fd cf       	rjmp	.-6      	; 0x10f0 <st7565r_init+0x250>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    10f6:	e0 ea       	ldi	r30, 0xA0	; 160
    10f8:	f9 e0       	ldi	r31, 0x09	; 9
    10fa:	80 e4       	ldi	r24, 0x40	; 64
    10fc:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    10fe:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1100:	be 01       	movw	r22, r28
    1102:	6f 5f       	subi	r22, 0xFF	; 255
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	80 ea       	ldi	r24, 0xA0	; 160
    1108:	99 e0       	ldi	r25, 0x09	; 9
    110a:	a5 d7       	rcall	.+3914   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    110c:	8b e2       	ldi	r24, 0x2B	; 43
    110e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1110:	be 01       	movw	r22, r28
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	80 ea       	ldi	r24, 0xA0	; 160
    1118:	99 e0       	ldi	r25, 0x09	; 9
    111a:	87 d7       	rcall	.+3854   	; 0x202a <usart_spi_select_device>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1122:	e0 ea       	ldi	r30, 0xA0	; 160
    1124:	f9 e0       	ldi	r31, 0x09	; 9
    1126:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1128:	85 ff       	sbrs	r24, 5
    112a:	fd cf       	rjmp	.-6      	; 0x1126 <st7565r_init+0x286>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    112c:	81 e2       	ldi	r24, 0x21	; 33
    112e:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1132:	e0 ea       	ldi	r30, 0xA0	; 160
    1134:	f9 e0       	ldi	r31, 0x09	; 9
    1136:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1138:	86 ff       	sbrs	r24, 6
    113a:	fd cf       	rjmp	.-6      	; 0x1136 <st7565r_init+0x296>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    113c:	e0 ea       	ldi	r30, 0xA0	; 160
    113e:	f9 e0       	ldi	r31, 0x09	; 9
    1140:	80 e4       	ldi	r24, 0x40	; 64
    1142:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1144:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1146:	be 01       	movw	r22, r28
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	80 ea       	ldi	r24, 0xA0	; 160
    114e:	99 e0       	ldi	r25, 0x09	; 9
    1150:	82 d7       	rcall	.+3844   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1152:	8b e2       	ldi	r24, 0x2B	; 43
    1154:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1156:	be 01       	movw	r22, r28
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	80 ea       	ldi	r24, 0xA0	; 160
    115e:	99 e0       	ldi	r25, 0x09	; 9
    1160:	64 d7       	rcall	.+3784   	; 0x202a <usart_spi_select_device>
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1168:	e0 ea       	ldi	r30, 0xA0	; 160
    116a:	f9 e0       	ldi	r31, 0x09	; 9
    116c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    116e:	85 ff       	sbrs	r24, 5
    1170:	fd cf       	rjmp	.-6      	; 0x116c <st7565r_init+0x2cc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1172:	81 e8       	ldi	r24, 0x81	; 129
    1174:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1178:	e0 ea       	ldi	r30, 0xA0	; 160
    117a:	f9 e0       	ldi	r31, 0x09	; 9
    117c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    117e:	86 ff       	sbrs	r24, 6
    1180:	fd cf       	rjmp	.-6      	; 0x117c <st7565r_init+0x2dc>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1182:	e0 ea       	ldi	r30, 0xA0	; 160
    1184:	f9 e0       	ldi	r31, 0x09	; 9
    1186:	80 e4       	ldi	r24, 0x40	; 64
    1188:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    118a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    118c:	be 01       	movw	r22, r28
    118e:	6f 5f       	subi	r22, 0xFF	; 255
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	80 ea       	ldi	r24, 0xA0	; 160
    1194:	99 e0       	ldi	r25, 0x09	; 9
    1196:	5f d7       	rcall	.+3774   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1198:	8b e2       	ldi	r24, 0x2B	; 43
    119a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    119c:	be 01       	movw	r22, r28
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	80 ea       	ldi	r24, 0xA0	; 160
    11a4:	99 e0       	ldi	r25, 0x09	; 9
    11a6:	41 d7       	rcall	.+3714   	; 0x202a <usart_spi_select_device>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    11ae:	e0 ea       	ldi	r30, 0xA0	; 160
    11b0:	f9 e0       	ldi	r31, 0x09	; 9
    11b2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    11b4:	85 ff       	sbrs	r24, 5
    11b6:	fd cf       	rjmp	.-6      	; 0x11b2 <st7565r_init+0x312>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    11b8:	81 e2       	ldi	r24, 0x21	; 33
    11ba:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    11be:	e0 ea       	ldi	r30, 0xA0	; 160
    11c0:	f9 e0       	ldi	r31, 0x09	; 9
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    11c4:	86 ff       	sbrs	r24, 6
    11c6:	fd cf       	rjmp	.-6      	; 0x11c2 <st7565r_init+0x322>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    11c8:	e0 ea       	ldi	r30, 0xA0	; 160
    11ca:	f9 e0       	ldi	r31, 0x09	; 9
    11cc:	80 e4       	ldi	r24, 0x40	; 64
    11ce:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    11d0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    11d2:	be 01       	movw	r22, r28
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	80 ea       	ldi	r24, 0xA0	; 160
    11da:	99 e0       	ldi	r25, 0x09	; 9
    11dc:	3c d7       	rcall	.+3704   	; 0x2056 <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    11de:	8b e2       	ldi	r24, 0x2B	; 43
    11e0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    11e2:	be 01       	movw	r22, r28
    11e4:	6f 5f       	subi	r22, 0xFF	; 255
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
    11e8:	80 ea       	ldi	r24, 0xA0	; 160
    11ea:	99 e0       	ldi	r25, 0x09	; 9
    11ec:	1e d7       	rcall	.+3644   	; 0x202a <usart_spi_select_device>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    11f4:	e0 ea       	ldi	r30, 0xA0	; 160
    11f6:	f9 e0       	ldi	r31, 0x09	; 9
    11f8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    11fa:	85 ff       	sbrs	r24, 5
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <st7565r_init+0x358>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    11fe:	8f ea       	ldi	r24, 0xAF	; 175
    1200:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1204:	e0 ea       	ldi	r30, 0xA0	; 160
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    120a:	86 ff       	sbrs	r24, 6
    120c:	fd cf       	rjmp	.-6      	; 0x1208 <st7565r_init+0x368>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    120e:	e0 ea       	ldi	r30, 0xA0	; 160
    1210:	f9 e0       	ldi	r31, 0x09	; 9
    1212:	80 e4       	ldi	r24, 0x40	; 64
    1214:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1216:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1218:	be 01       	movw	r22, r28
    121a:	6f 5f       	subi	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	80 ea       	ldi	r24, 0xA0	; 160
    1220:	99 e0       	ldi	r25, 0x09	; 9
    1222:	19 d7       	rcall	.+3634   	; 0x2056 <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	bf 90       	pop	r11
    1238:	08 95       	ret

0000123a <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	1f 92       	push	r1
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	08 2f       	mov	r16, r24
    124c:	f6 2e       	mov	r15, r22
    124e:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
    1250:	1d d7       	rcall	.+3642   	; 0x208c <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
    1252:	0f 70       	andi	r16, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
    1254:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1256:	8b e2       	ldi	r24, 0x2B	; 43
    1258:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    125a:	be 01       	movw	r22, r28
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	80 ea       	ldi	r24, 0xA0	; 160
    1262:	99 e0       	ldi	r25, 0x09	; 9
    1264:	e2 d6       	rcall	.+3524   	; 0x202a <usart_spi_select_device>
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    126c:	e0 ea       	ldi	r30, 0xA0	; 160
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1272:	95 ff       	sbrs	r25, 5
    1274:	fd cf       	rjmp	.-6      	; 0x1270 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1276:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    127a:	e0 ea       	ldi	r30, 0xA0	; 160
    127c:	f9 e0       	ldi	r31, 0x09	; 9
    127e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1280:	86 ff       	sbrs	r24, 6
    1282:	fd cf       	rjmp	.-6      	; 0x127e <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    1284:	e0 ea       	ldi	r30, 0xA0	; 160
    1286:	f9 e0       	ldi	r31, 0x09	; 9
    1288:	80 e4       	ldi	r24, 0x40	; 64
    128a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    128c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    128e:	be 01       	movw	r22, r28
    1290:	6f 5f       	subi	r22, 0xFF	; 255
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	80 ea       	ldi	r24, 0xA0	; 160
    1296:	99 e0       	ldi	r25, 0x09	; 9
    1298:	de d6       	rcall	.+3516   	; 0x2056 <usart_spi_deselect_device>
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
    129a:	0f 2d       	mov	r16, r15
    129c:	0f 77       	andi	r16, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
    129e:	02 95       	swap	r16
    12a0:	0f 70       	andi	r16, 0x0F	; 15
    12a2:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    12a4:	8b e2       	ldi	r24, 0x2B	; 43
    12a6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    12a8:	be 01       	movw	r22, r28
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	80 ea       	ldi	r24, 0xA0	; 160
    12b0:	99 e0       	ldi	r25, 0x09	; 9
    12b2:	bb d6       	rcall	.+3446   	; 0x202a <usart_spi_select_device>
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    12ba:	e0 ea       	ldi	r30, 0xA0	; 160
    12bc:	f9 e0       	ldi	r31, 0x09	; 9
    12be:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    12c0:	85 ff       	sbrs	r24, 5
    12c2:	fd cf       	rjmp	.-6      	; 0x12be <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    12c4:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    12c8:	e0 ea       	ldi	r30, 0xA0	; 160
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    12ce:	86 ff       	sbrs	r24, 6
    12d0:	fd cf       	rjmp	.-6      	; 0x12cc <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    12d2:	e0 ea       	ldi	r30, 0xA0	; 160
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	80 e4       	ldi	r24, 0x40	; 64
    12d8:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    12da:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    12dc:	be 01       	movw	r22, r28
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	80 ea       	ldi	r24, 0xA0	; 160
    12e4:	99 e0       	ldi	r25, 0x09	; 9
    12e6:	b7 d6       	rcall	.+3438   	; 0x2056 <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
    12e8:	0f 2d       	mov	r16, r15
    12ea:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    12ec:	8b e2       	ldi	r24, 0x2B	; 43
    12ee:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    12f0:	be 01       	movw	r22, r28
    12f2:	6f 5f       	subi	r22, 0xFF	; 255
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	80 ea       	ldi	r24, 0xA0	; 160
    12f8:	99 e0       	ldi	r25, 0x09	; 9
    12fa:	97 d6       	rcall	.+3374   	; 0x202a <usart_spi_select_device>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1302:	e0 ea       	ldi	r30, 0xA0	; 160
    1304:	f9 e0       	ldi	r31, 0x09	; 9
    1306:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    1308:	85 ff       	sbrs	r24, 5
    130a:	fd cf       	rjmp	.-6      	; 0x1306 <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    130c:	00 93 a0 09 	sts	0x09A0, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1310:	e0 ea       	ldi	r30, 0xA0	; 160
    1312:	f9 e0       	ldi	r31, 0x09	; 9
    1314:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    1316:	86 ff       	sbrs	r24, 6
    1318:	fd cf       	rjmp	.-6      	; 0x1314 <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    131a:	e0 ea       	ldi	r30, 0xA0	; 160
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	80 e4       	ldi	r24, 0x40	; 64
    1320:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1322:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    1324:	be 01       	movw	r22, r28
    1326:	6f 5f       	subi	r22, 0xFF	; 255
    1328:	7f 4f       	sbci	r23, 0xFF	; 255
    132a:	80 ea       	ldi	r24, 0xA0	; 160
    132c:	99 e0       	ldi	r25, 0x09	; 9
    132e:	93 d6       	rcall	.+3366   	; 0x2056 <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    1330:	8b e2       	ldi	r24, 0x2B	; 43
    1332:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    1334:	be 01       	movw	r22, r28
    1336:	6f 5f       	subi	r22, 0xFF	; 255
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	80 ea       	ldi	r24, 0xA0	; 160
    133c:	99 e0       	ldi	r25, 0x09	; 9
    133e:	75 d6       	rcall	.+3306   	; 0x202a <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 65 06 	sts	0x0665, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    1346:	e0 ea       	ldi	r30, 0xA0	; 160
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    134c:	85 ff       	sbrs	r24, 5
    134e:	fd cf       	rjmp	.-6      	; 0x134a <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    1350:	10 93 a0 09 	sts	0x09A0, r17
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    1354:	e0 ea       	ldi	r30, 0xA0	; 160
    1356:	f9 e0       	ldi	r31, 0x09	; 9
    1358:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    135a:	86 ff       	sbrs	r24, 6
    135c:	fd cf       	rjmp	.-6      	; 0x1358 <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    135e:	e0 ea       	ldi	r30, 0xA0	; 160
    1360:	f9 e0       	ldi	r31, 0x09	; 9
    1362:	80 e4       	ldi	r24, 0x40	; 64
    1364:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    1366:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	80 93 66 06 	sts	0x0666, r24
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    136e:	be 01       	movw	r22, r28
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	80 ea       	ldi	r24, 0xA0	; 160
    1376:	99 e0       	ldi	r25, 0x09	; 9
    1378:	6e d6       	rcall	.+3292   	; 0x2056 <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
    137a:	0f 90       	pop	r0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	08 95       	ret

00001388 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	1f 92       	push	r1
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
    1396:	81 e6       	ldi	r24, 0x61	; 97
    1398:	90 e2       	ldi	r25, 0x20	; 32
    139a:	73 d6       	rcall	.+3302   	; 0x2082 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
    139c:	81 dd       	rcall	.-1278   	; 0xea0 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
    139e:	8b e2       	ldi	r24, 0x2B	; 43
    13a0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
    13a2:	be 01       	movw	r22, r28
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	80 ea       	ldi	r24, 0xA0	; 160
    13aa:	99 e0       	ldi	r25, 0x09	; 9
    13ac:	3e d6       	rcall	.+3196   	; 0x202a <usart_spi_select_device>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 66 06 	sts	0x0666, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
    13b4:	e0 ea       	ldi	r30, 0xA0	; 160
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
    13ba:	85 ff       	sbrs	r24, 5
    13bc:	fd cf       	rjmp	.-6      	; 0x13b8 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
    13be:	80 e4       	ldi	r24, 0x40	; 64
    13c0:	80 93 a0 09 	sts	0x09A0, r24
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
    13c4:	e0 ea       	ldi	r30, 0xA0	; 160
    13c6:	f9 e0       	ldi	r31, 0x09	; 9
    13c8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
    13ca:	86 ff       	sbrs	r24, 6
    13cc:	fd cf       	rjmp	.-6      	; 0x13c8 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
    13ce:	e0 ea       	ldi	r30, 0xA0	; 160
    13d0:	f9 e0       	ldi	r31, 0x09	; 9
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
    13d6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
    13d8:	be 01       	movw	r22, r28
    13da:	6f 5f       	subi	r22, 0xFF	; 255
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	80 ea       	ldi	r24, 0xA0	; 160
    13e0:	99 e0       	ldi	r25, 0x09	; 9
    13e2:	39 d6       	rcall	.+3186   	; 0x2056 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    13e4:	00 e0       	ldi	r16, 0x00	; 0
    13e6:	0a c0       	rjmp	.+20     	; 0x13fc <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	61 2f       	mov	r22, r17
    13ec:	80 2f       	mov	r24, r16
    13ee:	25 df       	rcall	.-438    	; 0x123a <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    13f0:	1f 5f       	subi	r17, 0xFF	; 255
    13f2:	10 38       	cpi	r17, 0x80	; 128
    13f4:	c9 f7       	brne	.-14     	; 0x13e8 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    13f6:	0f 5f       	subi	r16, 0xFF	; 255
    13f8:	04 30       	cpi	r16, 0x04	; 4
    13fa:	11 f0       	breq	.+4      	; 0x1400 <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	f4 cf       	rjmp	.-24     	; 0x13e8 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <tb_init>:


uint16_t qt_measurement_period_msec = 25;

void tb_init(void) {
	qt_config_data.qt_di				= DEF_QT_DI;
    140c:	e3 e1       	ldi	r30, 0x13	; 19
    140e:	f0 e2       	ldi	r31, 0x20	; 32
    1410:	84 e0       	ldi	r24, 0x04	; 4
    1412:	81 83       	std	Z+1, r24	; 0x01
	qt_config_data.qt_neg_drift_rate	= DEF_QT_NEG_DRIFT_RATE;
    1414:	84 e1       	ldi	r24, 0x14	; 20
    1416:	84 83       	std	Z+4, r24	; 0x04
	qt_config_data.qt_pos_drift_rate	= DEF_QT_POS_DRIFT_RATE;
    1418:	95 e0       	ldi	r25, 0x05	; 5
    141a:	95 83       	std	Z+5, r25	; 0x05
	qt_config_data.qt_max_on_duration	= DEF_QT_MAX_ON_DURATION;
    141c:	13 82       	std	Z+3, r1	; 0x03
	qt_config_data.qt_drift_hold_time	= DEF_QT_DRIFT_HOLD_TIME;
    141e:	82 83       	std	Z+2, r24	; 0x02
	qt_config_data.qt_recal_threshold	= DEF_QT_RECAL_THRESHOLD;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	80 83       	st	Z, r24
	qt_config_data.qt_pos_recal_delay	= DEF_QT_POS_RECAL_DELAY;
    1424:	83 e0       	ldi	r24, 0x03	; 3
    1426:	86 83       	std	Z+6, r24	; 0x06
	qt_filter_callback					= 0;
    1428:	10 92 2d 20 	sts	0x202D, r1
    142c:	10 92 2e 20 	sts	0x202E, r1


	#ifdef QTOUCH_STUDIO_MASKS
		SNS_array[0][0] = 0x40;
    1430:	e1 e5       	ldi	r30, 0x51	; 81
    1432:	f0 e2       	ldi	r31, 0x20	; 32
    1434:	80 e4       	ldi	r24, 0x40	; 64
    1436:	80 83       	st	Z, r24
		SNS_array[0][1] = 0x0;
    1438:	11 82       	std	Z+1, r1	; 0x01
		SNS_array[1][0] = 0x0;
    143a:	12 82       	std	Z+2, r1	; 0x02
		SNS_array[1][1] = 0x0;
    143c:	13 82       	std	Z+3, r1	; 0x03

		SNSK_array[0][0] = 0x80;
    143e:	e5 e5       	ldi	r30, 0x55	; 85
    1440:	f0 e2       	ldi	r31, 0x20	; 32
    1442:	80 e8       	ldi	r24, 0x80	; 128
    1444:	80 83       	st	Z, r24
		SNSK_array[0][1] = 0x0;
    1446:	11 82       	std	Z+1, r1	; 0x01
		SNSK_array[1][0] = 0x0;
    1448:	12 82       	std	Z+2, r1	; 0x02
		SNSK_array[1][1] = 0x0;
    144a:	13 82       	std	Z+3, r1	; 0x03
	 * When using "pin configurability" this will result in channel 0
	 * because it is the first and only channel that is used.
	 * For the standard qtouch library setup we would need to use
	 * channel 3 since we are using the last two pins on the port.
	 */
	qt_enable_key(CHANNEL_0, NO_AKS_GROUP, 10, HYST_6_25);
    144c:	23 e0       	ldi	r18, 0x03	; 3
    144e:	4a e0       	ldi	r20, 0x0A	; 10
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	0e 94 23 02 	call	0x446	; 0x446 <qt_enable_key>

	qt_init_sensing();
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	8e e3       	ldi	r24, 0x3E	; 62
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	03 c9       	rjmp	.-3578   	; 0x668 <qt_init_sensing_with_burst>
    1462:	08 95       	ret

00001464 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1464:	4f b7       	in	r20, 0x3f	; 63
	cpu_irq_disable();
    1466:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1468:	28 2f       	mov	r18, r24
    146a:	39 2f       	mov	r19, r25
    146c:	21 15       	cp	r18, r1
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	38 07       	cpc	r19, r24
    1472:	29 f4       	brne	.+10     	; 0x147e <adc_set_callback+0x1a>
		adca_callback = callback;
    1474:	60 93 d2 22 	sts	0x22D2, r22
    1478:	70 93 d3 22 	sts	0x22D3, r23
    147c:	07 c0       	rjmp	.+14     	; 0x148c <adc_set_callback+0x28>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    147e:	20 34       	cpi	r18, 0x40	; 64
    1480:	32 40       	sbci	r19, 0x02	; 2
    1482:	21 f4       	brne	.+8      	; 0x148c <adc_set_callback+0x28>
		adcb_callback = callback;
    1484:	60 93 d0 22 	sts	0x22D0, r22
    1488:	70 93 d1 22 	sts	0x22D1, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    148c:	4f bf       	out	0x3f, r20	; 63
    148e:	08 95       	ret

00001490 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1490:	81 15       	cp	r24, r1
    1492:	22 e0       	ldi	r18, 0x02	; 2
    1494:	92 07       	cpc	r25, r18
    1496:	69 f4       	brne	.+26     	; 0x14b2 <adc_enable_clock+0x22>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1498:	80 91 62 22 	lds	r24, 0x2262
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	98 0f       	add	r25, r24
    14a0:	90 93 62 22 	sts	0x2262, r25
    14a4:	81 11       	cpse	r24, r1
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <sysclk_enable_module>
    14b0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    14b2:	80 34       	cpi	r24, 0x40	; 64
    14b4:	92 40       	sbci	r25, 0x02	; 2
    14b6:	61 f4       	brne	.+24     	; 0x14d0 <adc_enable_clock+0x40>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    14b8:	80 91 61 22 	lds	r24, 0x2261
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	98 0f       	add	r25, r24
    14c0:	90 93 61 22 	sts	0x2261, r25
    14c4:	81 11       	cpse	r24, r1
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <adc_enable_clock+0x40>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    14c8:	62 e0       	ldi	r22, 0x02	; 2
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <sysclk_enable_module>
    14d0:	08 95       	ret

000014d2 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    14d2:	81 15       	cp	r24, r1
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	92 07       	cpc	r25, r18
    14d8:	61 f4       	brne	.+24     	; 0x14f2 <adc_disable_clock+0x20>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    14da:	80 91 62 22 	lds	r24, 0x2262
    14de:	81 50       	subi	r24, 0x01	; 1
    14e0:	80 93 62 22 	sts	0x2262, r24
    14e4:	81 11       	cpse	r24, r1
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <sysclk_disable_module>
    14f0:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    14f2:	80 34       	cpi	r24, 0x40	; 64
    14f4:	92 40       	sbci	r25, 0x02	; 2
    14f6:	59 f4       	brne	.+22     	; 0x150e <adc_disable_clock+0x3c>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    14f8:	80 91 61 22 	lds	r24, 0x2261
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	80 93 61 22 	sts	0x2261, r24
    1502:	81 11       	cpse	r24, r1
    1504:	04 c0       	rjmp	.+8      	; 0x150e <adc_disable_clock+0x3c>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <sysclk_disable_module>
    150e:	08 95       	ret

00001510 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    1510:	1f 93       	push	r17
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    1516:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1518:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    151a:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    151c:	b9 df       	rcall	.-142    	; 0x1490 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    151e:	88 81       	ld	r24, Y
    1520:	81 60       	ori	r24, 0x01	; 1
    1522:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1524:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1526:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1528:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    152a:	ea ec       	ldi	r30, 0xCA	; 202
    152c:	f2 e2       	ldi	r31, 0x22	; 34
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	8f 5f       	subi	r24, 0xFF	; 255
    1532:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1534:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	08 95       	ret

0000153e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	0b b6       	in	r0, 0x3b	; 59
    154a:	0f 92       	push	r0
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	ef 93       	push	r30
    1562:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1564:	40 91 24 02 	lds	r20, 0x0224
    1568:	50 91 25 02 	lds	r21, 0x0225
    156c:	e0 91 d2 22 	lds	r30, 0x22D2
    1570:	f0 91 d3 22 	lds	r31, 0x22D3
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	19 95       	eicall
}
    157c:	ff 91       	pop	r31
    157e:	ef 91       	pop	r30
    1580:	bf 91       	pop	r27
    1582:	af 91       	pop	r26
    1584:	9f 91       	pop	r25
    1586:	8f 91       	pop	r24
    1588:	7f 91       	pop	r23
    158a:	6f 91       	pop	r22
    158c:	5f 91       	pop	r21
    158e:	4f 91       	pop	r20
    1590:	3f 91       	pop	r19
    1592:	2f 91       	pop	r18
    1594:	0f 90       	pop	r0
    1596:	0b be       	out	0x3b, r0	; 59
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	0b b6       	in	r0, 0x3b	; 59
    15ae:	0f 92       	push	r0
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	ef 93       	push	r30
    15c6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    15c8:	40 91 2c 02 	lds	r20, 0x022C
    15cc:	50 91 2d 02 	lds	r21, 0x022D
    15d0:	e0 91 d2 22 	lds	r30, 0x22D2
    15d4:	f0 91 d3 22 	lds	r31, 0x22D3
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	92 e0       	ldi	r25, 0x02	; 2
    15de:	19 95       	eicall
}
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0b be       	out	0x3b, r0	; 59
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	0b b6       	in	r0, 0x3b	; 59
    1612:	0f 92       	push	r0
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    162c:	40 91 34 02 	lds	r20, 0x0234
    1630:	50 91 35 02 	lds	r21, 0x0235
    1634:	e0 91 d2 22 	lds	r30, 0x22D2
    1638:	f0 91 d3 22 	lds	r31, 0x22D3
    163c:	64 e0       	ldi	r22, 0x04	; 4
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	19 95       	eicall
}
    1644:	ff 91       	pop	r31
    1646:	ef 91       	pop	r30
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0b be       	out	0x3b, r0	; 59
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	0f 90       	pop	r0
    1666:	1f 90       	pop	r1
    1668:	18 95       	reti

0000166a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	0b b6       	in	r0, 0x3b	; 59
    1676:	0f 92       	push	r0
    1678:	2f 93       	push	r18
    167a:	3f 93       	push	r19
    167c:	4f 93       	push	r20
    167e:	5f 93       	push	r21
    1680:	6f 93       	push	r22
    1682:	7f 93       	push	r23
    1684:	8f 93       	push	r24
    1686:	9f 93       	push	r25
    1688:	af 93       	push	r26
    168a:	bf 93       	push	r27
    168c:	ef 93       	push	r30
    168e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1690:	40 91 3c 02 	lds	r20, 0x023C
    1694:	50 91 3d 02 	lds	r21, 0x023D
    1698:	e0 91 d2 22 	lds	r30, 0x22D2
    169c:	f0 91 d3 22 	lds	r31, 0x22D3
    16a0:	68 e0       	ldi	r22, 0x08	; 8
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	19 95       	eicall
}
    16a8:	ff 91       	pop	r31
    16aa:	ef 91       	pop	r30
    16ac:	bf 91       	pop	r27
    16ae:	af 91       	pop	r26
    16b0:	9f 91       	pop	r25
    16b2:	8f 91       	pop	r24
    16b4:	7f 91       	pop	r23
    16b6:	6f 91       	pop	r22
    16b8:	5f 91       	pop	r21
    16ba:	4f 91       	pop	r20
    16bc:	3f 91       	pop	r19
    16be:	2f 91       	pop	r18
    16c0:	0f 90       	pop	r0
    16c2:	0b be       	out	0x3b, r0	; 59
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0
    16ca:	1f 90       	pop	r1
    16cc:	18 95       	reti

000016ce <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    16ce:	1f 92       	push	r1
    16d0:	0f 92       	push	r0
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	0b b6       	in	r0, 0x3b	; 59
    16da:	0f 92       	push	r0
    16dc:	2f 93       	push	r18
    16de:	3f 93       	push	r19
    16e0:	4f 93       	push	r20
    16e2:	5f 93       	push	r21
    16e4:	6f 93       	push	r22
    16e6:	7f 93       	push	r23
    16e8:	8f 93       	push	r24
    16ea:	9f 93       	push	r25
    16ec:	af 93       	push	r26
    16ee:	bf 93       	push	r27
    16f0:	ef 93       	push	r30
    16f2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    16f4:	40 91 64 02 	lds	r20, 0x0264
    16f8:	50 91 65 02 	lds	r21, 0x0265
    16fc:	e0 91 d0 22 	lds	r30, 0x22D0
    1700:	f0 91 d1 22 	lds	r31, 0x22D1
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	80 e4       	ldi	r24, 0x40	; 64
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	19 95       	eicall
}
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0b be       	out	0x3b, r0	; 59
    1728:	0f 90       	pop	r0
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	0f 90       	pop	r0
    172e:	1f 90       	pop	r1
    1730:	18 95       	reti

00001732 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1732:	1f 92       	push	r1
    1734:	0f 92       	push	r0
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	0b b6       	in	r0, 0x3b	; 59
    173e:	0f 92       	push	r0
    1740:	2f 93       	push	r18
    1742:	3f 93       	push	r19
    1744:	4f 93       	push	r20
    1746:	5f 93       	push	r21
    1748:	6f 93       	push	r22
    174a:	7f 93       	push	r23
    174c:	8f 93       	push	r24
    174e:	9f 93       	push	r25
    1750:	af 93       	push	r26
    1752:	bf 93       	push	r27
    1754:	ef 93       	push	r30
    1756:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1758:	40 91 6c 02 	lds	r20, 0x026C
    175c:	50 91 6d 02 	lds	r21, 0x026D
    1760:	e0 91 d0 22 	lds	r30, 0x22D0
    1764:	f0 91 d1 22 	lds	r31, 0x22D1
    1768:	62 e0       	ldi	r22, 0x02	; 2
    176a:	80 e4       	ldi	r24, 0x40	; 64
    176c:	92 e0       	ldi	r25, 0x02	; 2
    176e:	19 95       	eicall
}
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	0f 90       	pop	r0
    178a:	0b be       	out	0x3b, r0	; 59
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	0b b6       	in	r0, 0x3b	; 59
    17a2:	0f 92       	push	r0
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    17bc:	40 91 74 02 	lds	r20, 0x0274
    17c0:	50 91 75 02 	lds	r21, 0x0275
    17c4:	e0 91 d0 22 	lds	r30, 0x22D0
    17c8:	f0 91 d1 22 	lds	r31, 0x22D1
    17cc:	64 e0       	ldi	r22, 0x04	; 4
    17ce:	80 e4       	ldi	r24, 0x40	; 64
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	19 95       	eicall
}
    17d4:	ff 91       	pop	r31
    17d6:	ef 91       	pop	r30
    17d8:	bf 91       	pop	r27
    17da:	af 91       	pop	r26
    17dc:	9f 91       	pop	r25
    17de:	8f 91       	pop	r24
    17e0:	7f 91       	pop	r23
    17e2:	6f 91       	pop	r22
    17e4:	5f 91       	pop	r21
    17e6:	4f 91       	pop	r20
    17e8:	3f 91       	pop	r19
    17ea:	2f 91       	pop	r18
    17ec:	0f 90       	pop	r0
    17ee:	0b be       	out	0x3b, r0	; 59
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    17fa:	1f 92       	push	r1
    17fc:	0f 92       	push	r0
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	0f 92       	push	r0
    1802:	11 24       	eor	r1, r1
    1804:	0b b6       	in	r0, 0x3b	; 59
    1806:	0f 92       	push	r0
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1820:	40 91 7c 02 	lds	r20, 0x027C
    1824:	50 91 7d 02 	lds	r21, 0x027D
    1828:	e0 91 d0 22 	lds	r30, 0x22D0
    182c:	f0 91 d1 22 	lds	r31, 0x22D1
    1830:	68 e0       	ldi	r22, 0x08	; 8
    1832:	80 e4       	ldi	r24, 0x40	; 64
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	19 95       	eicall
}
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	0f 90       	pop	r0
    1852:	0b be       	out	0x3b, r0	; 59
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    186e:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1870:	c1 15       	cp	r28, r1
    1872:	22 e0       	ldi	r18, 0x02	; 2
    1874:	d2 07       	cpc	r29, r18
    1876:	81 f4       	brne	.+32     	; 0x1898 <adc_write_configuration+0x3a>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1878:	61 e2       	ldi	r22, 0x21	; 33
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1882:	e8 2e       	mov	r14, r24
    1884:	f1 2c       	mov	r15, r1
    1886:	60 e2       	ldi	r22, 0x20	; 32
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nvm_read_byte>
		data <<= 8;
    1890:	fe 2c       	mov	r15, r14
    1892:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    1894:	e8 2a       	or	r14, r24
    1896:	12 c0       	rjmp	.+36     	; 0x18bc <adc_write_configuration+0x5e>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1898:	80 34       	cpi	r24, 0x40	; 64
    189a:	92 40       	sbci	r25, 0x02	; 2
    189c:	61 f5       	brne	.+88     	; 0x18f6 <adc_write_configuration+0x98>
    189e:	65 e2       	ldi	r22, 0x25	; 37
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    18a8:	e8 2e       	mov	r14, r24
    18aa:	f1 2c       	mov	r15, r1
    18ac:	64 e2       	ldi	r22, 0x24	; 36
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <nvm_read_byte>
		data <<= 8;
    18b6:	fe 2c       	mov	r15, r14
    18b8:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCBCAL0);
    18ba:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    18bc:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    18be:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    18c0:	ce 01       	movw	r24, r28
    18c2:	e6 dd       	rcall	.-1076   	; 0x1490 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    18c4:	88 81       	ld	r24, Y

	adc->CTRLA = ADC_FLUSH_bm;
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	98 83       	st	Y, r25
	adc->CAL = cal;
    18ca:	ec 86       	std	Y+12, r14	; 0x0c
    18cc:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    18ce:	f8 01       	movw	r30, r16
    18d0:	25 81       	ldd	r18, Z+5	; 0x05
    18d2:	36 81       	ldd	r19, Z+6	; 0x06
    18d4:	28 8f       	std	Y+24, r18	; 0x18
    18d6:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    18d8:	92 81       	ldd	r25, Z+2	; 0x02
    18da:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    18dc:	94 81       	ldd	r25, Z+4	; 0x04
    18de:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	99 83       	std	Y+1, r25	; 0x01
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
	enable = adc->CTRLA & ADC_ENABLE_bm;
    18e8:	81 70       	andi	r24, 0x01	; 1
	adc->REFCTRL = conf->refctrl;
	adc->PRESCALER = conf->prescaler;
	adc->EVCTRL = conf->evctrl;
	adc->CTRLB = conf->ctrlb;

	adc->CTRLA = enable | conf->ctrla;
    18ea:	90 81       	ld	r25, Z
    18ec:	89 2b       	or	r24, r25
    18ee:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    18f0:	ce 01       	movw	r24, r28
    18f2:	ef dd       	rcall	.-1058   	; 0x14d2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18f4:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	1f 91       	pop	r17
    18fc:	0f 91       	pop	r16
    18fe:	ff 90       	pop	r15
    1900:	ef 90       	pop	r14
    1902:	df 90       	pop	r13
    1904:	08 95       	ret

00001906 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1914:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    1916:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1918:	bb dd       	rcall	.-1162   	; 0x1490 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    191a:	88 81       	ld	r24, Y
    191c:	80 7c       	andi	r24, 0xC0	; 192
    191e:	f8 01       	movw	r30, r16
    1920:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1922:	88 8d       	ldd	r24, Y+24	; 0x18
    1924:	99 8d       	ldd	r25, Y+25	; 0x19
    1926:	85 83       	std	Z+5, r24	; 0x05
    1928:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	81 83       	std	Z+1, r24	; 0x01

	adc_disable_clock(adc);
    193a:	ce 01       	movw	r24, r28
    193c:	ca dd       	rcall	.-1132   	; 0x14d2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    193e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	ff 90       	pop	r15
    194a:	08 95       	ret

0000194c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	7c 01       	movw	r14, r24
    195e:	d6 2e       	mov	r13, r22
    1960:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1962:	86 2f       	mov	r24, r22
    1964:	83 70       	andi	r24, 0x03	; 3
    1966:	29 f4       	brne	.+10     	; 0x1972 <adcch_write_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    1968:	96 2f       	mov	r25, r22
    196a:	96 95       	lsr	r25
    196c:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <adcch_write_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1972:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1974:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1976:	90 ff       	sbrs	r25, 0
		index++;
    1978:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    197a:	e7 01       	movw	r28, r14
    197c:	a0 96       	adiw	r28, 0x20	; 32
    197e:	98 e0       	ldi	r25, 0x08	; 8
    1980:	89 9f       	mul	r24, r25
    1982:	c0 0d       	add	r28, r0
    1984:	d1 1d       	adc	r29, r1
    1986:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1988:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    198a:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    198c:	c7 01       	movw	r24, r14
    198e:	80 dd       	rcall	.-1280   	; 0x1490 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    1990:	f8 01       	movw	r30, r16
    1992:	80 81       	ld	r24, Z
    1994:	88 83       	st	Y, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	8a 83       	std	Y+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    199a:	81 81       	ldd	r24, Z+1	; 0x01
    199c:	89 83       	std	Y+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    199e:	d0 fe       	sbrs	r13, 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <adcch_write_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    19a2:	83 81       	ldd	r24, Z+3	; 0x03
    19a4:	8e 83       	std	Y+6, r24	; 0x06
	}
	adc_disable_clock(adc);
    19a6:	c7 01       	movw	r24, r14
    19a8:	94 dd       	rcall	.-1240   	; 0x14d2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    19aa:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	ff 90       	pop	r15
    19b6:	ef 90       	pop	r14
    19b8:	df 90       	pop	r13
    19ba:	cf 90       	pop	r12
    19bc:	08 95       	ret

000019be <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    19be:	cf 92       	push	r12
    19c0:	df 92       	push	r13
    19c2:	ef 92       	push	r14
    19c4:	ff 92       	push	r15
    19c6:	0f 93       	push	r16
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	7c 01       	movw	r14, r24
    19d0:	d6 2e       	mov	r13, r22
    19d2:	8a 01       	movw	r16, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    19d4:	86 2f       	mov	r24, r22
    19d6:	83 70       	andi	r24, 0x03	; 3
    19d8:	29 f4       	brne	.+10     	; 0x19e4 <adcch_read_configuration+0x26>
		index += 2;
		ch_mask >>= 2;
    19da:	96 2f       	mov	r25, r22
    19dc:	96 95       	lsr	r25
    19de:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <adcch_read_configuration+0x2a>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    19e4:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
static __always_inline ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    19e6:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    19e8:	90 ff       	sbrs	r25, 0
		index++;
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    19ec:	e7 01       	movw	r28, r14
    19ee:	a0 96       	adiw	r28, 0x20	; 32
    19f0:	98 e0       	ldi	r25, 0x08	; 8
    19f2:	89 9f       	mul	r24, r25
    19f4:	c0 0d       	add	r28, r0
    19f6:	d1 1d       	adc	r29, r1
    19f8:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    19fa:	cf b6       	in	r12, 0x3f	; 63
	cpu_irq_disable();
    19fc:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    19fe:	c7 01       	movw	r24, r14
    1a00:	47 dd       	rcall	.-1394   	; 0x1490 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1a02:	88 81       	ld	r24, Y
    1a04:	f8 01       	movw	r30, r16
    1a06:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1a10:	d0 fe       	sbrs	r13, 0
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <adcch_read_configuration+0x5a>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1a14:	8e 81       	ldd	r24, Y+6	; 0x06
    1a16:	83 83       	std	Z+3, r24	; 0x03
	}
	adc_disable_clock(adc);
    1a18:	c7 01       	movw	r24, r14
    1a1a:	5b dd       	rcall	.-1354   	; 0x14d2 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a1c:	cf be       	out	0x3f, r12	; 63

	cpu_irq_restore(flags);
}
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	ff 90       	pop	r15
    1a28:	ef 90       	pop	r14
    1a2a:	df 90       	pop	r13
    1a2c:	cf 90       	pop	r12
    1a2e:	08 95       	ret

00001a30 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    1a34:	e0 91 63 22 	lds	r30, 0x2263
    1a38:	f0 91 64 22 	lds	r31, 0x2264
    1a3c:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    1a3e:	83 ff       	sbrs	r24, 3
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    1a42:	88 60       	ori	r24, 0x08	; 8
    1a44:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    1a4a:	86 ef       	ldi	r24, 0xF6	; 246
    1a4c:	80 93 6d 22 	sts	0x226D, r24
    1a50:	83 c0       	rjmp	.+262    	; 0x1b58 <twim_interrupt_handler+0x128>
    1a52:	98 2f       	mov	r25, r24
    1a54:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    1a56:	31 f0       	breq	.+12     	; 0x1a64 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    1a5c:	8f ef       	ldi	r24, 0xFF	; 255
    1a5e:	80 93 6d 22 	sts	0x226D, r24
    1a62:	7a c0       	rjmp	.+244    	; 0x1b58 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    1a64:	86 ff       	sbrs	r24, 6
    1a66:	43 c0       	rjmp	.+134    	; 0x1aee <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1a68:	c3 e6       	ldi	r28, 0x63	; 99
    1a6a:	d2 e2       	ldi	r29, 0x22	; 34
    1a6c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a6e:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	14 96       	adiw	r26, 0x04	; 4
    1a76:	2d 91       	ld	r18, X+
    1a78:	3c 91       	ld	r19, X
    1a7a:	15 97       	sbiw	r26, 0x05	; 5
    1a7c:	82 17       	cp	r24, r18
    1a7e:	93 07       	cpc	r25, r19
    1a80:	6c f4       	brge	.+26     	; 0x1a9c <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    1a82:	9c 01       	movw	r18, r24
    1a84:	2f 5f       	subi	r18, 0xFF	; 255
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	20 93 67 22 	sts	0x2267, r18
    1a8c:	30 93 68 22 	sts	0x2268, r19
    1a90:	a8 0f       	add	r26, r24
    1a92:	b9 1f       	adc	r27, r25
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	8c 91       	ld	r24, X
    1a98:	87 83       	std	Z+7, r24	; 0x07
    1a9a:	5e c0       	rjmp	.+188    	; 0x1b58 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
    1a9c:	80 91 69 22 	lds	r24, 0x2269
    1aa0:	90 91 6a 22 	lds	r25, 0x226A
    1aa4:	18 96       	adiw	r26, 0x08	; 8
    1aa6:	2d 91       	ld	r18, X+
    1aa8:	3c 91       	ld	r19, X
    1aaa:	19 97       	sbiw	r26, 0x09	; 9
    1aac:	82 17       	cp	r24, r18
    1aae:	93 07       	cpc	r25, r19
    1ab0:	c8 f4       	brcc	.+50     	; 0x1ae4 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
    1ab2:	20 91 6b 22 	lds	r18, 0x226B
    1ab6:	22 23       	and	r18, r18
    1ab8:	21 f0       	breq	.+8      	; 0x1ac2 <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    1aba:	86 81       	ldd	r24, Z+6	; 0x06
    1abc:	81 60       	ori	r24, 0x01	; 1
    1abe:	86 83       	std	Z+6, r24	; 0x06
    1ac0:	4b c0       	rjmp	.+150    	; 0x1b58 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
    1ac2:	16 96       	adiw	r26, 0x06	; 6
    1ac4:	2d 91       	ld	r18, X+
    1ac6:	3c 91       	ld	r19, X
    1ac8:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    1aca:	ac 01       	movw	r20, r24
    1acc:	4f 5f       	subi	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad0:	40 93 69 22 	sts	0x2269, r20
    1ad4:	50 93 6a 22 	sts	0x226A, r21
    1ad8:	d9 01       	movw	r26, r18
    1ada:	a8 0f       	add	r26, r24
    1adc:	b9 1f       	adc	r27, r25
    1ade:	8c 91       	ld	r24, X
    1ae0:	87 83       	std	Z+7, r24	; 0x07
    1ae2:	3a c0       	rjmp	.+116    	; 0x1b58 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
    1ae6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    1ae8:	10 92 6d 22 	sts	0x226D, r1
    1aec:	35 c0       	rjmp	.+106    	; 0x1b58 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    1aee:	88 23       	and	r24, r24
    1af0:	84 f5       	brge	.+96     	; 0x1b52 <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    1af2:	a3 e6       	ldi	r26, 0x63	; 99
    1af4:	b2 e2       	ldi	r27, 0x22	; 34
    1af6:	12 96       	adiw	r26, 0x02	; 2
    1af8:	cd 91       	ld	r28, X+
    1afa:	dc 91       	ld	r29, X
    1afc:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
    1afe:	16 96       	adiw	r26, 0x06	; 6
    1b00:	8d 91       	ld	r24, X+
    1b02:	9c 91       	ld	r25, X
    1b04:	17 97       	sbiw	r26, 0x07	; 7
    1b06:	28 85       	ldd	r18, Y+8	; 0x08
    1b08:	39 85       	ldd	r19, Y+9	; 0x09
    1b0a:	82 17       	cp	r24, r18
    1b0c:	93 07       	cpc	r25, r19
    1b0e:	d8 f4       	brcc	.+54     	; 0x1b46 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
    1b10:	6e 81       	ldd	r22, Y+6	; 0x06
    1b12:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
    1b14:	9c 01       	movw	r18, r24
    1b16:	2f 5f       	subi	r18, 0xFF	; 255
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	20 93 69 22 	sts	0x2269, r18
    1b1e:	30 93 6a 22 	sts	0x226A, r19
    1b22:	47 81       	ldd	r20, Z+7	; 0x07
    1b24:	db 01       	movw	r26, r22
    1b26:	a8 0f       	add	r26, r24
    1b28:	b9 1f       	adc	r27, r25
    1b2a:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    1b2c:	88 85       	ldd	r24, Y+8	; 0x08
    1b2e:	99 85       	ldd	r25, Y+9	; 0x09
    1b30:	28 17       	cp	r18, r24
    1b32:	39 07       	cpc	r19, r25
    1b34:	18 f4       	brcc	.+6      	; 0x1b3c <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	83 83       	std	Z+3, r24	; 0x03
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1b3c:	87 e0       	ldi	r24, 0x07	; 7
    1b3e:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    1b40:	10 92 6d 22 	sts	0x226D, r1
    1b44:	09 c0       	rjmp	.+18     	; 0x1b58 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    1b4a:	89 ef       	ldi	r24, 0xF9	; 249
    1b4c:	80 93 6d 22 	sts	0x226D, r24
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    1b52:	8b ef       	ldi	r24, 0xFB	; 251
    1b54:	80 93 6d 22 	sts	0x226D, r24
	}
}
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	0b b6       	in	r0, 0x3b	; 59
    1b6a:	0f 92       	push	r0
    1b6c:	2f 93       	push	r18
    1b6e:	3f 93       	push	r19
    1b70:	4f 93       	push	r20
    1b72:	5f 93       	push	r21
    1b74:	6f 93       	push	r22
    1b76:	7f 93       	push	r23
    1b78:	8f 93       	push	r24
    1b7a:	9f 93       	push	r25
    1b7c:	af 93       	push	r26
    1b7e:	bf 93       	push	r27
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
    1b84:	55 df       	rcall	.-342    	; 0x1a30 <twim_interrupt_handler>
    1b86:	ff 91       	pop	r31
    1b88:	ef 91       	pop	r30
    1b8a:	bf 91       	pop	r27
    1b8c:	af 91       	pop	r26
    1b8e:	9f 91       	pop	r25
    1b90:	8f 91       	pop	r24
    1b92:	7f 91       	pop	r23
    1b94:	6f 91       	pop	r22
    1b96:	5f 91       	pop	r21
    1b98:	4f 91       	pop	r20
    1b9a:	3f 91       	pop	r19
    1b9c:	2f 91       	pop	r18
    1b9e:	0f 90       	pop	r0
    1ba0:	0b be       	out	0x3b, r0	; 59
    1ba2:	0f 90       	pop	r0
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 90       	pop	r1
    1baa:	18 95       	reti

00001bac <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    1bac:	1f 92       	push	r1
    1bae:	0f 92       	push	r0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	0f 92       	push	r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	0b b6       	in	r0, 0x3b	; 59
    1bb8:	0f 92       	push	r0
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
    1bd2:	2e df       	rcall	.-420    	; 0x1a30 <twim_interrupt_handler>
    1bd4:	ff 91       	pop	r31
    1bd6:	ef 91       	pop	r30
    1bd8:	bf 91       	pop	r27
    1bda:	af 91       	pop	r26
    1bdc:	9f 91       	pop	r25
    1bde:	8f 91       	pop	r24
    1be0:	7f 91       	pop	r23
    1be2:	6f 91       	pop	r22
    1be4:	5f 91       	pop	r21
    1be6:	4f 91       	pop	r20
    1be8:	3f 91       	pop	r19
    1bea:	2f 91       	pop	r18
    1bec:	0f 90       	pop	r0
    1bee:	0b be       	out	0x3b, r0	; 59
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti

00001bfa <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1bfa:	cf 92       	push	r12
    1bfc:	df 92       	push	r13
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	0f 93       	push	r16
    1c04:	1f 93       	push	r17
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1c0c:	d9 01       	movw	r26, r18
    1c0e:	c8 01       	movw	r24, r16
    1c10:	b6 95       	lsr	r27
    1c12:	a7 95       	ror	r26
    1c14:	97 95       	ror	r25
    1c16:	87 95       	ror	r24
    1c18:	48 17       	cp	r20, r24
    1c1a:	59 07       	cpc	r21, r25
    1c1c:	6a 07       	cpc	r22, r26
    1c1e:	7b 07       	cpc	r23, r27
    1c20:	78 f4       	brcc	.+30     	; 0x1c40 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1c22:	6a 01       	movw	r12, r20
    1c24:	7b 01       	movw	r14, r22
    1c26:	cc 0c       	add	r12, r12
    1c28:	dd 1c       	adc	r13, r13
    1c2a:	ee 1c       	adc	r14, r14
    1c2c:	ff 1c       	adc	r15, r15
    1c2e:	c9 01       	movw	r24, r18
    1c30:	b8 01       	movw	r22, r16
    1c32:	a7 01       	movw	r20, r14
    1c34:	96 01       	movw	r18, r12
    1c36:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__udivmodsi4>
    1c3a:	21 50       	subi	r18, 0x01	; 1
    1c3c:	31 09       	sbc	r19, r1
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1c44:	83 2f       	mov	r24, r19
    1c46:	8f 70       	andi	r24, 0x0F	; 15
    1c48:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1c4a:	2e 83       	std	Y+6, r18	; 0x06
}
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	08 95       	ret

00001c5e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	ec 01       	movw	r28, r24
    1c6c:	7b 01       	movw	r14, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <usart_init_spi+0x16>
    1c72:	7b c1       	rjmp	.+758    	; 0x1f6a <usart_init_spi+0x30c>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c74:	80 3c       	cpi	r24, 0xC0	; 192
    1c76:	91 05       	cpc	r25, r1
    1c78:	21 f4       	brne	.+8      	; 0x1c82 <usart_init_spi+0x24>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c7a:	60 e1       	ldi	r22, 0x10	; 16
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	e7 d6       	rcall	.+3534   	; 0x2a4e <sysclk_enable_module>
    1c80:	74 c1       	rjmp	.+744    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1c82:	80 38       	cpi	r24, 0x80	; 128
    1c84:	91 40       	sbci	r25, 0x01	; 1
    1c86:	21 f4       	brne	.+8      	; 0x1c90 <usart_init_spi+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	e0 d6       	rcall	.+3520   	; 0x2a4e <sysclk_enable_module>
    1c8e:	6d c1       	rjmp	.+730    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c90:	c1 15       	cp	r28, r1
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	d8 07       	cpc	r29, r24
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <usart_init_spi+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1c98:	61 e0       	ldi	r22, 0x01	; 1
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	d8 d6       	rcall	.+3504   	; 0x2a4e <sysclk_enable_module>
    1c9e:	65 c1       	rjmp	.+714    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1ca0:	c0 38       	cpi	r28, 0x80	; 128
    1ca2:	e3 e0       	ldi	r30, 0x03	; 3
    1ca4:	de 07       	cpc	r29, r30
    1ca6:	21 f4       	brne	.+8      	; 0x1cb0 <usart_init_spi+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	d0 d6       	rcall	.+3488   	; 0x2a4e <sysclk_enable_module>
    1cae:	5d c1       	rjmp	.+698    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1cb0:	c0 39       	cpi	r28, 0x90	; 144
    1cb2:	f3 e0       	ldi	r31, 0x03	; 3
    1cb4:	df 07       	cpc	r29, r31
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <usart_init_spi+0x62>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	c8 d6       	rcall	.+3472   	; 0x2a4e <sysclk_enable_module>
    1cbe:	55 c1       	rjmp	.+682    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1cc0:	c1 15       	cp	r28, r1
    1cc2:	32 e0       	ldi	r19, 0x02	; 2
    1cc4:	d3 07       	cpc	r29, r19
    1cc6:	21 f4       	brne	.+8      	; 0x1cd0 <usart_init_spi+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	c0 d6       	rcall	.+3456   	; 0x2a4e <sysclk_enable_module>
    1cce:	4d c1       	rjmp	.+666    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1cd0:	c0 34       	cpi	r28, 0x40	; 64
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	d8 07       	cpc	r29, r24
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <usart_init_spi+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1cd8:	62 e0       	ldi	r22, 0x02	; 2
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	b8 d6       	rcall	.+3440   	; 0x2a4e <sysclk_enable_module>
    1cde:	45 c1       	rjmp	.+650    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1ce0:	c0 32       	cpi	r28, 0x20	; 32
    1ce2:	e3 e0       	ldi	r30, 0x03	; 3
    1ce4:	de 07       	cpc	r29, r30
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <usart_init_spi+0x92>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1ce8:	64 e0       	ldi	r22, 0x04	; 4
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	b0 d6       	rcall	.+3424   	; 0x2a4e <sysclk_enable_module>
    1cee:	3d c1       	rjmp	.+634    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1cf0:	c1 15       	cp	r28, r1
    1cf2:	f8 e0       	ldi	r31, 0x08	; 8
    1cf4:	df 07       	cpc	r29, r31
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <usart_init_spi+0xa2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	83 e0       	ldi	r24, 0x03	; 3
    1cfc:	a8 d6       	rcall	.+3408   	; 0x2a4e <sysclk_enable_module>
    1cfe:	35 c1       	rjmp	.+618    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d00:	c1 15       	cp	r28, r1
    1d02:	39 e0       	ldi	r19, 0x09	; 9
    1d04:	d3 07       	cpc	r29, r19
    1d06:	21 f4       	brne	.+8      	; 0x1d10 <usart_init_spi+0xb2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	a0 d6       	rcall	.+3392   	; 0x2a4e <sysclk_enable_module>
    1d0e:	2d c1       	rjmp	.+602    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1d10:	c1 15       	cp	r28, r1
    1d12:	8a e0       	ldi	r24, 0x0A	; 10
    1d14:	d8 07       	cpc	r29, r24
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <usart_init_spi+0xc2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	85 e0       	ldi	r24, 0x05	; 5
    1d1c:	98 d6       	rcall	.+3376   	; 0x2a4e <sysclk_enable_module>
    1d1e:	25 c1       	rjmp	.+586    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d20:	c1 15       	cp	r28, r1
    1d22:	eb e0       	ldi	r30, 0x0B	; 11
    1d24:	de 07       	cpc	r29, r30
    1d26:	21 f4       	brne	.+8      	; 0x1d30 <usart_init_spi+0xd2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d28:	61 e0       	ldi	r22, 0x01	; 1
    1d2a:	86 e0       	ldi	r24, 0x06	; 6
    1d2c:	90 d6       	rcall	.+3360   	; 0x2a4e <sysclk_enable_module>
    1d2e:	1d c1       	rjmp	.+570    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d30:	c0 34       	cpi	r28, 0x40	; 64
    1d32:	f8 e0       	ldi	r31, 0x08	; 8
    1d34:	df 07       	cpc	r29, r31
    1d36:	21 f4       	brne	.+8      	; 0x1d40 <usart_init_spi+0xe2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d38:	62 e0       	ldi	r22, 0x02	; 2
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	88 d6       	rcall	.+3344   	; 0x2a4e <sysclk_enable_module>
    1d3e:	15 c1       	rjmp	.+554    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d40:	c0 34       	cpi	r28, 0x40	; 64
    1d42:	39 e0       	ldi	r19, 0x09	; 9
    1d44:	d3 07       	cpc	r29, r19
    1d46:	21 f4       	brne	.+8      	; 0x1d50 <usart_init_spi+0xf2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1d48:	62 e0       	ldi	r22, 0x02	; 2
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	80 d6       	rcall	.+3328   	; 0x2a4e <sysclk_enable_module>
    1d4e:	0d c1       	rjmp	.+538    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1d50:	c0 34       	cpi	r28, 0x40	; 64
    1d52:	8a e0       	ldi	r24, 0x0A	; 10
    1d54:	d8 07       	cpc	r29, r24
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <usart_init_spi+0x102>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	78 d6       	rcall	.+3312   	; 0x2a4e <sysclk_enable_module>
    1d5e:	05 c1       	rjmp	.+522    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1d60:	c0 39       	cpi	r28, 0x90	; 144
    1d62:	e8 e0       	ldi	r30, 0x08	; 8
    1d64:	de 07       	cpc	r29, r30
    1d66:	21 f4       	brne	.+8      	; 0x1d70 <usart_init_spi+0x112>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1d68:	64 e0       	ldi	r22, 0x04	; 4
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	70 d6       	rcall	.+3296   	; 0x2a4e <sysclk_enable_module>
    1d6e:	fd c0       	rjmp	.+506    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1d70:	c0 39       	cpi	r28, 0x90	; 144
    1d72:	f9 e0       	ldi	r31, 0x09	; 9
    1d74:	df 07       	cpc	r29, r31
    1d76:	21 f4       	brne	.+8      	; 0x1d80 <usart_init_spi+0x122>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1d78:	64 e0       	ldi	r22, 0x04	; 4
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	68 d6       	rcall	.+3280   	; 0x2a4e <sysclk_enable_module>
    1d7e:	f5 c0       	rjmp	.+490    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1d80:	c0 39       	cpi	r28, 0x90	; 144
    1d82:	3a e0       	ldi	r19, 0x0A	; 10
    1d84:	d3 07       	cpc	r29, r19
    1d86:	21 f4       	brne	.+8      	; 0x1d90 <usart_init_spi+0x132>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1d88:	64 e0       	ldi	r22, 0x04	; 4
    1d8a:	85 e0       	ldi	r24, 0x05	; 5
    1d8c:	60 d6       	rcall	.+3264   	; 0x2a4e <sysclk_enable_module>
    1d8e:	ed c0       	rjmp	.+474    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1d90:	c0 39       	cpi	r28, 0x90	; 144
    1d92:	8b e0       	ldi	r24, 0x0B	; 11
    1d94:	d8 07       	cpc	r29, r24
    1d96:	21 f4       	brne	.+8      	; 0x1da0 <usart_init_spi+0x142>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1d98:	64 e0       	ldi	r22, 0x04	; 4
    1d9a:	86 e0       	ldi	r24, 0x06	; 6
    1d9c:	58 d6       	rcall	.+3248   	; 0x2a4e <sysclk_enable_module>
    1d9e:	e5 c0       	rjmp	.+458    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1da0:	c0 3c       	cpi	r28, 0xC0	; 192
    1da2:	e8 e0       	ldi	r30, 0x08	; 8
    1da4:	de 07       	cpc	r29, r30
    1da6:	21 f4       	brne	.+8      	; 0x1db0 <usart_init_spi+0x152>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1da8:	68 e0       	ldi	r22, 0x08	; 8
    1daa:	83 e0       	ldi	r24, 0x03	; 3
    1dac:	50 d6       	rcall	.+3232   	; 0x2a4e <sysclk_enable_module>
    1dae:	dd c0       	rjmp	.+442    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1db0:	c0 3c       	cpi	r28, 0xC0	; 192
    1db2:	f9 e0       	ldi	r31, 0x09	; 9
    1db4:	df 07       	cpc	r29, r31
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <usart_init_spi+0x162>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1db8:	68 e0       	ldi	r22, 0x08	; 8
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	48 d6       	rcall	.+3216   	; 0x2a4e <sysclk_enable_module>
    1dbe:	d5 c0       	rjmp	.+426    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1dc0:	c0 3a       	cpi	r28, 0xA0	; 160
    1dc2:	38 e0       	ldi	r19, 0x08	; 8
    1dc4:	d3 07       	cpc	r29, r19
    1dc6:	61 f4       	brne	.+24     	; 0x1de0 <usart_init_spi+0x182>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1dc8:	60 e1       	ldi	r22, 0x10	; 16
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	40 d6       	rcall	.+3200   	; 0x2a4e <sysclk_enable_module>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1dce:	e0 ea       	ldi	r30, 0xA0	; 160
    1dd0:	f8 e0       	ldi	r31, 0x08	; 8
    1dd2:	84 81       	ldd	r24, Z+4	; 0x04
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
    1dd6:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1dd8:	f7 01       	movw	r30, r14
    1dda:	24 81       	ldd	r18, Z+4	; 0x04
    1ddc:	22 50       	subi	r18, 0x02	; 2
    1dde:	43 c0       	rjmp	.+134    	; 0x1e66 <usart_init_spi+0x208>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1de0:	c0 3a       	cpi	r28, 0xA0	; 160
    1de2:	f9 e0       	ldi	r31, 0x09	; 9
    1de4:	df 07       	cpc	r29, r31
    1de6:	21 f4       	brne	.+8      	; 0x1df0 <usart_init_spi+0x192>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1de8:	60 e1       	ldi	r22, 0x10	; 16
    1dea:	84 e0       	ldi	r24, 0x04	; 4
    1dec:	30 d6       	rcall	.+3168   	; 0x2a4e <sysclk_enable_module>
    1dee:	bd c0       	rjmp	.+378    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1df0:	c0 3a       	cpi	r28, 0xA0	; 160
    1df2:	3a e0       	ldi	r19, 0x0A	; 10
    1df4:	d3 07       	cpc	r29, r19
    1df6:	21 f4       	brne	.+8      	; 0x1e00 <usart_init_spi+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1df8:	60 e1       	ldi	r22, 0x10	; 16
    1dfa:	85 e0       	ldi	r24, 0x05	; 5
    1dfc:	28 d6       	rcall	.+3152   	; 0x2a4e <sysclk_enable_module>
    1dfe:	b5 c0       	rjmp	.+362    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e00:	c0 3a       	cpi	r28, 0xA0	; 160
    1e02:	8b e0       	ldi	r24, 0x0B	; 11
    1e04:	d8 07       	cpc	r29, r24
    1e06:	21 f4       	brne	.+8      	; 0x1e10 <usart_init_spi+0x1b2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1e08:	60 e1       	ldi	r22, 0x10	; 16
    1e0a:	86 e0       	ldi	r24, 0x06	; 6
    1e0c:	20 d6       	rcall	.+3136   	; 0x2a4e <sysclk_enable_module>
    1e0e:	ad c0       	rjmp	.+346    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1e10:	c0 3b       	cpi	r28, 0xB0	; 176
    1e12:	e8 e0       	ldi	r30, 0x08	; 8
    1e14:	de 07       	cpc	r29, r30
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <usart_init_spi+0x1c2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1e18:	60 e2       	ldi	r22, 0x20	; 32
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	18 d6       	rcall	.+3120   	; 0x2a4e <sysclk_enable_module>
    1e1e:	a5 c0       	rjmp	.+330    	; 0x1f6a <usart_init_spi+0x30c>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1e20:	c0 3b       	cpi	r28, 0xB0	; 176
    1e22:	f9 e0       	ldi	r31, 0x09	; 9
    1e24:	df 07       	cpc	r29, r31
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <usart_init_spi+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1e28:	60 e2       	ldi	r22, 0x20	; 32
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	10 d6       	rcall	.+3104   	; 0x2a4e <sysclk_enable_module>
    1e2e:	9d c0       	rjmp	.+314    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1e30:	c0 38       	cpi	r28, 0x80	; 128
    1e32:	34 e0       	ldi	r19, 0x04	; 4
    1e34:	d3 07       	cpc	r29, r19
    1e36:	21 f4       	brne	.+8      	; 0x1e40 <usart_init_spi+0x1e2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1e38:	60 e4       	ldi	r22, 0x40	; 64
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	08 d6       	rcall	.+3088   	; 0x2a4e <sysclk_enable_module>
    1e3e:	95 c0       	rjmp	.+298    	; 0x1f6a <usart_init_spi+0x30c>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1e40:	c0 3a       	cpi	r28, 0xA0	; 160
    1e42:	84 e0       	ldi	r24, 0x04	; 4
    1e44:	d8 07       	cpc	r29, r24
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1e48:	60 e4       	ldi	r22, 0x40	; 64
    1e4a:	85 e0       	ldi	r24, 0x05	; 5
    1e4c:	00 d6       	rcall	.+3072   	; 0x2a4e <sysclk_enable_module>
    1e4e:	8d c0       	rjmp	.+282    	; 0x1f6a <usart_init_spi+0x30c>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	8f 7e       	andi	r24, 0xEF	; 239
    1e54:	8c 83       	std	Y+4, r24	; 0x04
    1e56:	fb 01       	movw	r30, r22
    1e58:	24 81       	ldd	r18, Z+4	; 0x04
    1e5a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	c0 3a       	cpi	r28, 0xA0	; 160
    1e60:	f8 e0       	ldi	r31, 0x08	; 8
    1e62:	df 07       	cpc	r29, r31
    1e64:	31 f4       	brne	.+12     	; 0x1e72 <usart_init_spi+0x214>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1e66:	80 91 4e 06 	lds	r24, 0x064E
    1e6a:	84 fd       	sbrc	r24, 4
    1e6c:	86 c0       	rjmp	.+268    	; 0x1f7a <usart_init_spi+0x31c>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1e6e:	11 e1       	ldi	r17, 0x11	; 17
    1e70:	85 c0       	rjmp	.+266    	; 0x1f7c <usart_init_spi+0x31e>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1e72:	80 3b       	cpi	r24, 0xB0	; 176
    1e74:	38 e0       	ldi	r19, 0x08	; 8
    1e76:	93 07       	cpc	r25, r19
    1e78:	79 f0       	breq	.+30     	; 0x1e98 <usart_init_spi+0x23a>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1e7a:	80 3a       	cpi	r24, 0xA0	; 160
    1e7c:	e9 e0       	ldi	r30, 0x09	; 9
    1e7e:	9e 07       	cpc	r25, r30
    1e80:	31 f4       	brne	.+12     	; 0x1e8e <usart_init_spi+0x230>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1e82:	30 91 6e 06 	lds	r19, 0x066E
    1e86:	34 fd       	sbrc	r19, 4
    1e88:	7c c0       	rjmp	.+248    	; 0x1f82 <usart_init_spi+0x324>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1e8a:	19 e1       	ldi	r17, 0x19	; 25
    1e8c:	10 c0       	rjmp	.+32     	; 0x1eae <usart_init_spi+0x250>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1e8e:	80 3b       	cpi	r24, 0xB0	; 176
    1e90:	f9 e0       	ldi	r31, 0x09	; 9
    1e92:	9f 07       	cpc	r25, r31
    1e94:	a9 f0       	breq	.+42     	; 0x1ec0 <usart_init_spi+0x262>
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <usart_init_spi+0x23c>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1e98:	15 e1       	ldi	r17, 0x15	; 21
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1e9a:	80 3a       	cpi	r24, 0xA0	; 160
    1e9c:	3a e0       	ldi	r19, 0x0A	; 10
    1e9e:	93 07       	cpc	r25, r19
    1ea0:	31 f4       	brne	.+12     	; 0x1eae <usart_init_spi+0x250>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1ea2:	80 91 8e 06 	lds	r24, 0x068E
    1ea6:	84 fd       	sbrc	r24, 4
    1ea8:	6e c0       	rjmp	.+220    	; 0x1f86 <usart_init_spi+0x328>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1eaa:	11 e2       	ldi	r17, 0x21	; 33
    1eac:	0c c0       	rjmp	.+24     	; 0x1ec6 <usart_init_spi+0x268>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1eae:	80 3a       	cpi	r24, 0xA0	; 160
    1eb0:	9b 40       	sbci	r25, 0x0B	; 11
    1eb2:	49 f4       	brne	.+18     	; 0x1ec6 <usart_init_spi+0x268>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1eb4:	80 91 ae 06 	lds	r24, 0x06AE
    1eb8:	84 fd       	sbrc	r24, 4
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <usart_init_spi+0x266>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1ebc:	19 e2       	ldi	r17, 0x29	; 41
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <usart_init_spi+0x268>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1ec0:	1d e1       	ldi	r17, 0x1D	; 29
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <usart_init_spi+0x268>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1ec4:	1d e2       	ldi	r17, 0x2D	; 45
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    1ec6:	e1 2f       	mov	r30, r17
    1ec8:	e6 95       	lsr	r30
    1eca:	e6 95       	lsr	r30
    1ecc:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    1ece:	30 e2       	ldi	r19, 0x20	; 32
    1ed0:	e3 9f       	mul	r30, r19
    1ed2:	f0 01       	movw	r30, r0
    1ed4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1ed6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1ed8:	17 70       	andi	r17, 0x07	; 7
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	01 2e       	mov	r0, r17
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <usart_init_spi+0x288>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <usart_init_spi+0x284>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1eea:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1eec:	22 30       	cpi	r18, 0x02	; 2
    1eee:	10 f0       	brcs	.+4      	; 0x1ef4 <usart_init_spi+0x296>
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <usart_init_spi+0x298>
    1ef4:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1ef6:	df 01       	movw	r26, r30
    1ef8:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1efa:	a1 0f       	add	r26, r17
    1efc:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1efe:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    1f00:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1f02:	2c 91       	ld	r18, X
    1f04:	27 70       	andi	r18, 0x07	; 7
    1f06:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1f08:	9c 91       	ld	r25, X
    1f0a:	94 2b       	or	r25, r20
    1f0c:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1f0e:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1f10:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	80 6c       	ori	r24, 0xC0	; 192
    1f16:	8d 83       	std	Y+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1f18:	f7 01       	movw	r30, r14
    1f1a:	84 81       	ldd	r24, Z+4	; 0x04
    1f1c:	8d 7f       	andi	r24, 0xFD	; 253
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	21 f4       	brne	.+8      	; 0x1f2a <usart_init_spi+0x2cc>
		usart->CTRLC |= USART_UCPHA_bm;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	82 60       	ori	r24, 0x02	; 2
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <usart_init_spi+0x2d2>
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	8d 7f       	andi	r24, 0xFD	; 253
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
	}
	if (opt->data_order) {
    1f30:	f7 01       	movw	r30, r14
    1f32:	85 81       	ldd	r24, Z+5	; 0x05
    1f34:	88 23       	and	r24, r24
    1f36:	21 f0       	breq	.+8      	; 0x1f40 <usart_init_spi+0x2e2>
		(usart)->CTRLC |= USART_DORD_bm;
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	84 60       	ori	r24, 0x04	; 4
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <usart_init_spi+0x2e8>
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	8b 7f       	andi	r24, 0xFB	; 251
    1f44:	8d 83       	std	Y+5, r24	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1f46:	f7 01       	movw	r30, r14
    1f48:	40 81       	ld	r20, Z
    1f4a:	51 81       	ldd	r21, Z+1	; 0x01
    1f4c:	62 81       	ldd	r22, Z+2	; 0x02
    1f4e:	73 81       	ldd	r23, Z+3	; 0x03
    1f50:	00 e0       	ldi	r16, 0x00	; 0
    1f52:	18 e4       	ldi	r17, 0x48	; 72
    1f54:	28 ee       	ldi	r18, 0xE8	; 232
    1f56:	31 e0       	ldi	r19, 0x01	; 1
    1f58:	ce 01       	movw	r24, r28
    1f5a:	4f de       	rcall	.-866    	; 0x1bfa <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	88 60       	ori	r24, 0x08	; 8
    1f60:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
    1f64:	80 61       	ori	r24, 0x10	; 16
    1f66:	8c 83       	std	Y+4, r24	; 0x04
    1f68:	10 c0       	rjmp	.+32     	; 0x1f8a <usart_init_spi+0x32c>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	8f 7e       	andi	r24, 0xEF	; 239
    1f6e:	8c 83       	std	Y+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1f70:	f7 01       	movw	r30, r14
    1f72:	24 81       	ldd	r18, Z+4	; 0x04
    1f74:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1f76:	ce 01       	movw	r24, r28
    1f78:	7c cf       	rjmp	.-264    	; 0x1e72 <usart_init_spi+0x214>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1f7a:	15 e1       	ldi	r17, 0x15	; 21
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1f7c:	80 ea       	ldi	r24, 0xA0	; 160
    1f7e:	98 e0       	ldi	r25, 0x08	; 8
    1f80:	86 cf       	rjmp	.-244    	; 0x1e8e <usart_init_spi+0x230>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1f82:	1d e1       	ldi	r17, 0x1D	; 29
    1f84:	94 cf       	rjmp	.-216    	; 0x1eae <usart_init_spi+0x250>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1f86:	15 e2       	ldi	r17, 0x25	; 37
    1f88:	9e cf       	rjmp	.-196    	; 0x1ec6 <usart_init_spi+0x268>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	0f 91       	pop	r16
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	08 95       	ret

00001f98 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1f98:	80 3a       	cpi	r24, 0xA0	; 160
    1f9a:	28 e0       	ldi	r18, 0x08	; 8
    1f9c:	92 07       	cpc	r25, r18
    1f9e:	21 f4       	brne	.+8      	; 0x1fa8 <usart_spi_init+0x10>
    1fa0:	60 e1       	ldi	r22, 0x10	; 16
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	54 c5       	rjmp	.+2728   	; 0x2a4e <sysclk_enable_module>
    1fa6:	08 95       	ret
    1fa8:	80 3b       	cpi	r24, 0xB0	; 176
    1faa:	28 e0       	ldi	r18, 0x08	; 8
    1fac:	92 07       	cpc	r25, r18
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <usart_spi_init+0x20>
    1fb0:	60 e2       	ldi	r22, 0x20	; 32
    1fb2:	83 e0       	ldi	r24, 0x03	; 3
    1fb4:	4c c5       	rjmp	.+2712   	; 0x2a4e <sysclk_enable_module>
    1fb6:	08 95       	ret
    1fb8:	80 3a       	cpi	r24, 0xA0	; 160
    1fba:	29 e0       	ldi	r18, 0x09	; 9
    1fbc:	92 07       	cpc	r25, r18
    1fbe:	21 f4       	brne	.+8      	; 0x1fc8 <usart_spi_init+0x30>
    1fc0:	60 e1       	ldi	r22, 0x10	; 16
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	44 c5       	rjmp	.+2696   	; 0x2a4e <sysclk_enable_module>
    1fc6:	08 95       	ret
    1fc8:	80 3b       	cpi	r24, 0xB0	; 176
    1fca:	29 e0       	ldi	r18, 0x09	; 9
    1fcc:	92 07       	cpc	r25, r18
    1fce:	21 f4       	brne	.+8      	; 0x1fd8 <usart_spi_init+0x40>
    1fd0:	60 e2       	ldi	r22, 0x20	; 32
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	3c c5       	rjmp	.+2680   	; 0x2a4e <sysclk_enable_module>
    1fd6:	08 95       	ret
    1fd8:	80 3a       	cpi	r24, 0xA0	; 160
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	92 07       	cpc	r25, r18
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <usart_spi_init+0x50>
    1fe0:	60 e1       	ldi	r22, 0x10	; 16
    1fe2:	85 e0       	ldi	r24, 0x05	; 5
    1fe4:	34 c5       	rjmp	.+2664   	; 0x2a4e <sysclk_enable_module>
    1fe6:	08 95       	ret
    1fe8:	80 3a       	cpi	r24, 0xA0	; 160
    1fea:	9b 40       	sbci	r25, 0x0B	; 11
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <usart_spi_init+0x5c>
    1fee:	60 e1       	ldi	r22, 0x10	; 16
    1ff0:	86 e0       	ldi	r24, 0x06	; 6
    1ff2:	2d c5       	rjmp	.+2650   	; 0x2a4e <sysclk_enable_module>
    1ff4:	08 95       	ret

00001ff6 <usart_spi_setup_device>:
    1ff6:	0f 93       	push	r16
    1ff8:	1f 93       	push	r17
    1ffa:	cf 93       	push	r28
    1ffc:	df 93       	push	r29
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <usart_spi_setup_device+0xa>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <usart_spi_setup_device+0xc>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	09 83       	std	Y+1, r16	; 0x01
    2008:	1a 83       	std	Y+2, r17	; 0x02
    200a:	2b 83       	std	Y+3, r18	; 0x03
    200c:	3c 83       	std	Y+4, r19	; 0x04
    200e:	4d 83       	std	Y+5, r20	; 0x05
    2010:	1e 82       	std	Y+6, r1	; 0x06
    2012:	be 01       	movw	r22, r28
    2014:	6f 5f       	subi	r22, 0xFF	; 255
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	22 de       	rcall	.-956    	; 0x1c5e <usart_init_spi>
    201a:	26 96       	adiw	r28, 0x06	; 6
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    202a:	fb 01       	movw	r30, r22
    202c:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    202e:	e8 2f       	mov	r30, r24
    2030:	e6 95       	lsr	r30
    2032:	e6 95       	lsr	r30
    2034:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	e4 9f       	mul	r30, r20
    203a:	f0 01       	movw	r30, r0
    203c:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    203e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    2040:	87 70       	andi	r24, 0x07	; 7
    2042:	21 e0       	ldi	r18, 0x01	; 1
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	a9 01       	movw	r20, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <usart_spi_select_device+0x24>
    204a:	44 0f       	add	r20, r20
    204c:	55 1f       	adc	r21, r21
    204e:	8a 95       	dec	r24
    2050:	e2 f7       	brpl	.-8      	; 0x204a <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2052:	46 83       	std	Z+6, r20	; 0x06
    2054:	08 95       	ret

00002056 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    2056:	fb 01       	movw	r30, r22
    2058:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    205a:	e8 2f       	mov	r30, r24
    205c:	e6 95       	lsr	r30
    205e:	e6 95       	lsr	r30
    2060:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    2062:	40 e2       	ldi	r20, 0x20	; 32
    2064:	e4 9f       	mul	r30, r20
    2066:	f0 01       	movw	r30, r0
    2068:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    206a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    206c:	87 70       	andi	r24, 0x07	; 7
    206e:	21 e0       	ldi	r18, 0x01	; 1
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <usart_spi_deselect_device+0x24>
    2076:	44 0f       	add	r20, r20
    2078:	55 1f       	adc	r21, r21
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    207e:	45 83       	std	Z+5, r20	; 0x05
    2080:	08 95       	ret

00002082 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    2082:	80 93 6e 22 	sts	0x226E, r24
    2086:	90 93 6f 22 	sts	0x226F, r25
    208a:	08 95       	ret

0000208c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    208c:	20 e8       	ldi	r18, 0x80	; 128
    208e:	82 9f       	mul	r24, r18
    2090:	c0 01       	movw	r24, r0
    2092:	11 24       	eor	r1, r1
    2094:	86 0f       	add	r24, r22
    2096:	91 1d       	adc	r25, r1
    2098:	e0 91 6e 22 	lds	r30, 0x226E
    209c:	f0 91 6f 22 	lds	r31, 0x226F
    20a0:	e8 0f       	add	r30, r24
    20a2:	f9 1f       	adc	r31, r25
    20a4:	40 83       	st	Z, r20
    20a6:	08 95       	ret

000020a8 <vListInitialise>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
    20a8:	fc 01       	movw	r30, r24
    20aa:	03 96       	adiw	r24, 0x03	; 3
    20ac:	81 83       	std	Z+1, r24	; 0x01
    20ae:	92 83       	std	Z+2, r25	; 0x02
    20b0:	2f ef       	ldi	r18, 0xFF	; 255
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	23 83       	std	Z+3, r18	; 0x03
    20b6:	34 83       	std	Z+4, r19	; 0x04
    20b8:	85 83       	std	Z+5, r24	; 0x05
    20ba:	96 83       	std	Z+6, r25	; 0x06
    20bc:	87 83       	std	Z+7, r24	; 0x07
    20be:	90 87       	std	Z+8, r25	; 0x08
    20c0:	10 82       	st	Z, r1
    20c2:	08 95       	ret

000020c4 <vListInitialiseItem>:
    20c4:	fc 01       	movw	r30, r24
    20c6:	10 86       	std	Z+8, r1	; 0x08
    20c8:	11 86       	std	Z+9, r1	; 0x09
    20ca:	08 95       	ret

000020cc <vListInsertEnd>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	9c 01       	movw	r18, r24
    20d2:	fb 01       	movw	r30, r22
    20d4:	dc 01       	movw	r26, r24
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	cd 91       	ld	r28, X+
    20da:	dc 91       	ld	r29, X
    20dc:	12 97       	sbiw	r26, 0x02	; 2
    20de:	c2 83       	std	Z+2, r28	; 0x02
    20e0:	d3 83       	std	Z+3, r29	; 0x03
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	84 83       	std	Z+4, r24	; 0x04
    20e8:	95 83       	std	Z+5, r25	; 0x05
    20ea:	8c 81       	ldd	r24, Y+4	; 0x04
    20ec:	9d 81       	ldd	r25, Y+5	; 0x05
    20ee:	dc 01       	movw	r26, r24
    20f0:	12 96       	adiw	r26, 0x02	; 2
    20f2:	6d 93       	st	X+, r22
    20f4:	7c 93       	st	X, r23
    20f6:	13 97       	sbiw	r26, 0x03	; 3
    20f8:	6c 83       	std	Y+4, r22	; 0x04
    20fa:	7d 83       	std	Y+5, r23	; 0x05
    20fc:	20 87       	std	Z+8, r18	; 0x08
    20fe:	31 87       	std	Z+9, r19	; 0x09
    2100:	f9 01       	movw	r30, r18
    2102:	80 81       	ld	r24, Z
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	80 83       	st	Z, r24
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	08 95       	ret

0000210e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2114:	a0 85       	ldd	r26, Z+8	; 0x08
    2116:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2118:	c2 81       	ldd	r28, Z+2	; 0x02
    211a:	d3 81       	ldd	r29, Z+3	; 0x03
    211c:	84 81       	ldd	r24, Z+4	; 0x04
    211e:	95 81       	ldd	r25, Z+5	; 0x05
    2120:	8c 83       	std	Y+4, r24	; 0x04
    2122:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2124:	c4 81       	ldd	r28, Z+4	; 0x04
    2126:	d5 81       	ldd	r29, Z+5	; 0x05
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	cd 91       	ld	r28, X+
    2134:	dc 91       	ld	r29, X
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	ce 17       	cp	r28, r30
    213a:	df 07       	cpc	r29, r31
    213c:	31 f4       	brne	.+12     	; 0x214a <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    213e:	8c 81       	ldd	r24, Y+4	; 0x04
    2140:	9d 81       	ldd	r25, Y+5	; 0x05
    2142:	11 96       	adiw	r26, 0x01	; 1
    2144:	8d 93       	st	X+, r24
    2146:	9c 93       	st	X, r25
    2148:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    214a:	10 86       	std	Z+8, r1	; 0x08
    214c:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    214e:	8c 91       	ld	r24, X
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	08 95       	ret

0000215a <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	8b 01       	movw	r16, r22
uint16_t usAddress;

    /* Place a few bytes of known values on the bottom of the stack.
    This is just useful for debugging. */

    *pxTopOfStack = 0x11;
    2160:	71 e1       	ldi	r23, 0x11	; 17
    2162:	fc 01       	movw	r30, r24
    2164:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = 0x22;
    2166:	31 97       	sbiw	r30, 0x01	; 1
    2168:	62 e2       	ldi	r22, 0x22	; 34
    216a:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = 0x33;
    216c:	31 97       	sbiw	r30, 0x01	; 1
    216e:	23 e3       	ldi	r18, 0x33	; 51
    2170:	20 83       	st	Z, r18

    /*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

    /* The start of the task code will be popped off the stack last, so place
    it on first. */
    ulAddress = ( uint32_t ) pxCode;
    2172:	01 2e       	mov	r0, r17
    2174:	00 0c       	add	r0, r0
    2176:	22 0b       	sbc	r18, r18
    2178:	33 0b       	sbc	r19, r19
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    217a:	31 97       	sbiw	r30, 0x01	; 1
    217c:	00 83       	st	Z, r16
    pxTopOfStack--;

    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    217e:	31 97       	sbiw	r30, 0x01	; 1
    2180:	10 83       	st	Z, r17
    pxTopOfStack--;

#ifdef __AVR_3_BYTE_PC__
    ulAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( ulAddress & ( uint32_t ) 0x000000ff );
    2182:	31 97       	sbiw	r30, 0x01	; 1
    2184:	20 83       	st	Z, r18

    /* Next simulate the stack as if after a call to portSAVE_CONTEXT().
    portSAVE_CONTEXT places the flags on the stack immediately after r0
    to ensure the interrupts get disabled as soon as possible, and so ensuring
    the stack use is minimal should a context switch interrupt occur. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R0 */
    2186:	31 97       	sbiw	r30, 0x01	; 1
    2188:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = portFLAGS_INT_ENABLED;
    218a:	31 97       	sbiw	r30, 0x01	; 1
    218c:	20 e8       	ldi	r18, 0x80	; 128
    218e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Now the remaining registers.   The compiler expects R1 to be 0. */
    *pxTopOfStack = ( StackType_t ) 0x00;   /* R1 */
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	10 82       	st	Z, r1
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x02;   /* R2 */
    2194:	31 97       	sbiw	r30, 0x01	; 1
    2196:	22 e0       	ldi	r18, 0x02	; 2
    2198:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x03;   /* R3 */
    219a:	31 97       	sbiw	r30, 0x01	; 1
    219c:	23 e0       	ldi	r18, 0x03	; 3
    219e:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x04;   /* R4 */
    21a0:	31 97       	sbiw	r30, 0x01	; 1
    21a2:	24 e0       	ldi	r18, 0x04	; 4
    21a4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x05;   /* R5 */
    21a6:	31 97       	sbiw	r30, 0x01	; 1
    21a8:	25 e0       	ldi	r18, 0x05	; 5
    21aa:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x06;   /* R6 */
    21ac:	31 97       	sbiw	r30, 0x01	; 1
    21ae:	26 e0       	ldi	r18, 0x06	; 6
    21b0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x07;   /* R7 */
    21b2:	31 97       	sbiw	r30, 0x01	; 1
    21b4:	27 e0       	ldi	r18, 0x07	; 7
    21b6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x08;   /* R8 */
    21b8:	31 97       	sbiw	r30, 0x01	; 1
    21ba:	28 e0       	ldi	r18, 0x08	; 8
    21bc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x09;   /* R9 */
    21be:	31 97       	sbiw	r30, 0x01	; 1
    21c0:	29 e0       	ldi	r18, 0x09	; 9
    21c2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x10;   /* R10 */
    21c4:	31 97       	sbiw	r30, 0x01	; 1
    21c6:	20 e1       	ldi	r18, 0x10	; 16
    21c8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x11;   /* R11 */
    21ca:	31 97       	sbiw	r30, 0x01	; 1
    21cc:	70 83       	st	Z, r23
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x12;   /* R12 */
    21ce:	31 97       	sbiw	r30, 0x01	; 1
    21d0:	22 e1       	ldi	r18, 0x12	; 18
    21d2:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x13;   /* R13 */
    21d4:	31 97       	sbiw	r30, 0x01	; 1
    21d6:	23 e1       	ldi	r18, 0x13	; 19
    21d8:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x14;   /* R14 */
    21da:	31 97       	sbiw	r30, 0x01	; 1
    21dc:	24 e1       	ldi	r18, 0x14	; 20
    21de:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x15;   /* R15 */
    21e0:	31 97       	sbiw	r30, 0x01	; 1
    21e2:	25 e1       	ldi	r18, 0x15	; 21
    21e4:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x16;   /* R16 */
    21e6:	31 97       	sbiw	r30, 0x01	; 1
    21e8:	26 e1       	ldi	r18, 0x16	; 22
    21ea:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x17;   /* R17 */
    21ec:	31 97       	sbiw	r30, 0x01	; 1
    21ee:	27 e1       	ldi	r18, 0x17	; 23
    21f0:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x18;   /* R18 */
    21f2:	31 97       	sbiw	r30, 0x01	; 1
    21f4:	28 e1       	ldi	r18, 0x18	; 24
    21f6:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x19;   /* R19 */
    21f8:	31 97       	sbiw	r30, 0x01	; 1
    21fa:	29 e1       	ldi	r18, 0x19	; 25
    21fc:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x20;   /* R20 */
    21fe:	31 97       	sbiw	r30, 0x01	; 1
    2200:	20 e2       	ldi	r18, 0x20	; 32
    2202:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x21;   /* R21 */
    2204:	31 97       	sbiw	r30, 0x01	; 1
    2206:	21 e2       	ldi	r18, 0x21	; 33
    2208:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x22;   /* R22 */
    220a:	31 97       	sbiw	r30, 0x01	; 1
    220c:	60 83       	st	Z, r22
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x23;   /* R23 */
    220e:	31 97       	sbiw	r30, 0x01	; 1
    2210:	23 e2       	ldi	r18, 0x23	; 35
    2212:	20 83       	st	Z, r18
    pxTopOfStack--;

    /* Place the parameter on the stack in the expected location. */
    usAddress = ( uint16_t ) pvParameters;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    2214:	31 97       	sbiw	r30, 0x01	; 1
    2216:	40 83       	st	Z, r20
    pxTopOfStack--;

    usAddress >>= 8;
    *pxTopOfStack = ( StackType_t ) ( usAddress & ( uint32_t ) 0x000000ff );
    2218:	31 97       	sbiw	r30, 0x01	; 1
    221a:	50 83       	st	Z, r21
    pxTopOfStack--;

    *pxTopOfStack = ( StackType_t ) 0x26;   /* R26 X */
    221c:	31 97       	sbiw	r30, 0x01	; 1
    221e:	26 e2       	ldi	r18, 0x26	; 38
    2220:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x27;   /* R27 */
    2222:	31 97       	sbiw	r30, 0x01	; 1
    2224:	27 e2       	ldi	r18, 0x27	; 39
    2226:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x28;   /* R28 Y */
    2228:	31 97       	sbiw	r30, 0x01	; 1
    222a:	28 e2       	ldi	r18, 0x28	; 40
    222c:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x29;   /* R29 */
    222e:	31 97       	sbiw	r30, 0x01	; 1
    2230:	29 e2       	ldi	r18, 0x29	; 41
    2232:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x30;   /* R30 Z */
    2234:	31 97       	sbiw	r30, 0x01	; 1
    2236:	20 e3       	ldi	r18, 0x30	; 48
    2238:	20 83       	st	Z, r18
    pxTopOfStack--;
    *pxTopOfStack = ( StackType_t ) 0x31;   /* R31 */
    223a:	31 97       	sbiw	r30, 0x01	; 1
    223c:	21 e3       	ldi	r18, 0x31	; 49
    223e:	20 83       	st	Z, r18
    pxTopOfStack--;

    /*lint +e950 +e611 +e923 */

    return pxTopOfStack;
}
    2240:	87 97       	sbiw	r24, 0x27	; 39
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <xPortStartScheduler>:
 * Setup timer generate a tick interrupt.
 */
static void prvSetupTimerInterrupt(void)
{
    // disable global interrupt for a moment
    cli();
    2248:	f8 94       	cli

    {
        //enable TC0 clock source, high resolution
        PR.PRPC &= ~(PR_TC0_bm | PR_HIRES_bm);
    224a:	e0 e7       	ldi	r30, 0x70	; 112
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	83 81       	ldd	r24, Z+3	; 0x03
    2250:	8a 7f       	andi	r24, 0xFA	; 250
    2252:	83 83       	std	Z+3, r24	; 0x03

        //set period of counter
        TCC0.PER = configCPU_CLOCK_HZ / configTICK_RATE_HZ / 1;
    2254:	e0 e0       	ldi	r30, 0x00	; 0
    2256:	f8 e0       	ldi	r31, 0x08	; 8
    2258:	80 ea       	ldi	r24, 0xA0	; 160
    225a:	9f e0       	ldi	r25, 0x0F	; 15
    225c:	86 a3       	std	Z+38, r24	; 0x26
    225e:	97 a3       	std	Z+39, r25	; 0x27

        //enable interrupt and set low level
        TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	96 83       	std	Z+6, r25	; 0x06

        //enable low-level interrupt
        PMIC.CTRL |= PMIC_LOLVLEN_bm;
    2264:	a0 ea       	ldi	r26, 0xA0	; 160
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	12 96       	adiw	r26, 0x02	; 2
    226a:	8c 91       	ld	r24, X
    226c:	12 97       	sbiw	r26, 0x02	; 2
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	12 96       	adiw	r26, 0x02	; 2
    2272:	8c 93       	st	X, r24

        //select (start) the clock source
        TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    2274:	90 83       	st	Z, r25

    }

    // enable global interrupt
    sei();
    2276:	78 94       	sei
{
    /* Setup the hardware to generate the tick. */
    prvSetupTimerInterrupt();

    /* Restore the context of the first task that is going to run. */
    portRESTORE_CONTEXT();
    2278:	a0 91 c6 22 	lds	r26, 0x22C6
    227c:	b0 91 c7 22 	lds	r27, 0x22C7
    2280:	0d 90       	ld	r0, X+
    2282:	0d be       	out	0x3d, r0	; 61
    2284:	0d 90       	ld	r0, X+
    2286:	0e be       	out	0x3e, r0	; 62
    2288:	ff 91       	pop	r31
    228a:	ef 91       	pop	r30
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	cf 90       	pop	r12
    22b0:	bf 90       	pop	r11
    22b2:	af 90       	pop	r10
    22b4:	9f 90       	pop	r9
    22b6:	8f 90       	pop	r8
    22b8:	7f 90       	pop	r7
    22ba:	6f 90       	pop	r6
    22bc:	5f 90       	pop	r5
    22be:	4f 90       	pop	r4
    22c0:	3f 90       	pop	r3
    22c2:	2f 90       	pop	r2
    22c4:	1f 90       	pop	r1
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	0f 90       	pop	r0

    /* Simulate a function call end as generated by the compiler.  We will now
    jump to the start of the task the context of which we have just restored. */
    asm volatile ( "ret" );
    22cc:	08 95       	ret

    /* Should not get here. */
    return pdTRUE;
}
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	08 95       	ret

000022d2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    22d2:	0f 92       	push	r0
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	0f 92       	push	r0
    22da:	1f 92       	push	r1
    22dc:	11 24       	eor	r1, r1
    22de:	2f 92       	push	r2
    22e0:	3f 92       	push	r3
    22e2:	4f 92       	push	r4
    22e4:	5f 92       	push	r5
    22e6:	6f 92       	push	r6
    22e8:	7f 92       	push	r7
    22ea:	8f 92       	push	r8
    22ec:	9f 92       	push	r9
    22ee:	af 92       	push	r10
    22f0:	bf 92       	push	r11
    22f2:	cf 92       	push	r12
    22f4:	df 92       	push	r13
    22f6:	ef 92       	push	r14
    22f8:	ff 92       	push	r15
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
    22fe:	2f 93       	push	r18
    2300:	3f 93       	push	r19
    2302:	4f 93       	push	r20
    2304:	5f 93       	push	r21
    2306:	6f 93       	push	r22
    2308:	7f 93       	push	r23
    230a:	8f 93       	push	r24
    230c:	9f 93       	push	r25
    230e:	af 93       	push	r26
    2310:	bf 93       	push	r27
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	ef 93       	push	r30
    2318:	ff 93       	push	r31
    231a:	a0 91 c6 22 	lds	r26, 0x22C6
    231e:	b0 91 c7 22 	lds	r27, 0x22C7
    2322:	0d b6       	in	r0, 0x3d	; 61
    2324:	0d 92       	st	X+, r0
    2326:	0e b6       	in	r0, 0x3e	; 62
    2328:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    232a:	24 d3       	rcall	.+1608   	; 0x2974 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    232c:	a0 91 c6 22 	lds	r26, 0x22C6
    2330:	b0 91 c7 22 	lds	r27, 0x22C7
    2334:	0d 90       	ld	r0, X+
    2336:	0d be       	out	0x3d, r0	; 61
    2338:	0d 90       	ld	r0, X+
    233a:	0e be       	out	0x3e, r0	; 62
    233c:	ff 91       	pop	r31
    233e:	ef 91       	pop	r30
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	cf 90       	pop	r12
    2364:	bf 90       	pop	r11
    2366:	af 90       	pop	r10
    2368:	9f 90       	pop	r9
    236a:	8f 90       	pop	r8
    236c:	7f 90       	pop	r7
    236e:	6f 90       	pop	r6
    2370:	5f 90       	pop	r5
    2372:	4f 90       	pop	r4
    2374:	3f 90       	pop	r3
    2376:	2f 90       	pop	r2
    2378:	1f 90       	pop	r1
    237a:	0f 90       	pop	r0
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	0f 90       	pop	r0

    asm volatile ( "ret" );
    2380:	08 95       	ret

00002382 <__vector_14>:
         * Context switch function used by the tick.  This must be identical to
         * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
         * difference from vPortYield() is the tick count is incremented as the
         * call comes from the tick ISR.
         */
        portSAVE_CONTEXT();
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	0f 92       	push	r0
    238a:	1f 92       	push	r1
    238c:	11 24       	eor	r1, r1
    238e:	2f 92       	push	r2
    2390:	3f 92       	push	r3
    2392:	4f 92       	push	r4
    2394:	5f 92       	push	r5
    2396:	6f 92       	push	r6
    2398:	7f 92       	push	r7
    239a:	8f 92       	push	r8
    239c:	9f 92       	push	r9
    239e:	af 92       	push	r10
    23a0:	bf 92       	push	r11
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	2f 93       	push	r18
    23b0:	3f 93       	push	r19
    23b2:	4f 93       	push	r20
    23b4:	5f 93       	push	r21
    23b6:	6f 93       	push	r22
    23b8:	7f 93       	push	r23
    23ba:	8f 93       	push	r24
    23bc:	9f 93       	push	r25
    23be:	af 93       	push	r26
    23c0:	bf 93       	push	r27
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	ef 93       	push	r30
    23c8:	ff 93       	push	r31
    23ca:	a0 91 c6 22 	lds	r26, 0x22C6
    23ce:	b0 91 c7 22 	lds	r27, 0x22C7
    23d2:	0d b6       	in	r0, 0x3d	; 61
    23d4:	0d 92       	st	X+, r0
    23d6:	0e b6       	in	r0, 0x3e	; 62
    23d8:	0d 92       	st	X+, r0
        if( xTaskIncrementTick() != pdFALSE )
    23da:	7c d1       	rcall	.+760    	; 0x26d4 <xTaskIncrementTick>
    23dc:	81 11       	cpse	r24, r1
        {
            vTaskSwitchContext();
    23de:	ca d2       	rcall	.+1428   	; 0x2974 <vTaskSwitchContext>
        }
        portRESTORE_CONTEXT();
    23e0:	a0 91 c6 22 	lds	r26, 0x22C6
    23e4:	b0 91 c7 22 	lds	r27, 0x22C7
    23e8:	0d 90       	ld	r0, X+
    23ea:	0d be       	out	0x3d, r0	; 61
    23ec:	0d 90       	ld	r0, X+
    23ee:	0e be       	out	0x3e, r0	; 62
    23f0:	ff 91       	pop	r31
    23f2:	ef 91       	pop	r30
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	bf 91       	pop	r27
    23fa:	af 91       	pop	r26
    23fc:	9f 91       	pop	r25
    23fe:	8f 91       	pop	r24
    2400:	7f 91       	pop	r23
    2402:	6f 91       	pop	r22
    2404:	5f 91       	pop	r21
    2406:	4f 91       	pop	r20
    2408:	3f 91       	pop	r19
    240a:	2f 91       	pop	r18
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	df 90       	pop	r13
    2416:	cf 90       	pop	r12
    2418:	bf 90       	pop	r11
    241a:	af 90       	pop	r10
    241c:	9f 90       	pop	r9
    241e:	8f 90       	pop	r8
    2420:	7f 90       	pop	r7
    2422:	6f 90       	pop	r6
    2424:	5f 90       	pop	r5
    2426:	4f 90       	pop	r4
    2428:	3f 90       	pop	r3
    242a:	2f 90       	pop	r2
    242c:	1f 90       	pop	r1
    242e:	0f 90       	pop	r0
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	0f 90       	pop	r0

        asm volatile ( "reti" );
    2434:	18 95       	reti

00002436 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
void *pvReturn;

	vTaskSuspendAll();
    243c:	45 d1       	rcall	.+650    	; 0x26c8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    243e:	ce 01       	movw	r24, r28
    2440:	5c d4       	rcall	.+2232   	; 0x2cfa <malloc>
    2442:	ec 01       	movw	r28, r24
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    2444:	1a d2       	rcall	.+1076   	; 0x287a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    2446:	ce 01       	movw	r24, r28
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
	if( pv )
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	29 f0       	breq	.+10     	; 0x2460 <vPortFree+0x12>
    2456:	ec 01       	movw	r28, r24
	{
		vTaskSuspendAll();
    2458:	37 d1       	rcall	.+622    	; 0x26c8 <vTaskSuspendAll>
		{
			free( pv );
    245a:	ce 01       	movw	r24, r28
    245c:	e3 d4       	rcall	.+2502   	; 0x2e24 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    245e:	0d d2       	rcall	.+1050   	; 0x287a <xTaskResumeAll>
	}
}
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    2466:	c9 e9       	ldi	r28, 0x99	; 153
    2468:	d2 e2       	ldi	r29, 0x22	; 34
    246a:	88 81       	ld	r24, Y
    246c:	82 30       	cpi	r24, 0x02	; 2
    246e:	f0 f3       	brcs	.-4      	; 0x246c <prvIdleTask+0x6>
    2470:	30 df       	rcall	.-416    	; 0x22d2 <vPortYield>
    2472:	fb cf       	rjmp	.-10     	; 0x246a <prvIdleTask+0x4>

00002474 <xTaskGenericCreate>:
    2474:	4f 92       	push	r4
    2476:	5f 92       	push	r5
    2478:	6f 92       	push	r6
    247a:	7f 92       	push	r7
    247c:	8f 92       	push	r8
    247e:	9f 92       	push	r9
    2480:	af 92       	push	r10
    2482:	bf 92       	push	r11
    2484:	cf 92       	push	r12
    2486:	df 92       	push	r13
    2488:	ef 92       	push	r14
    248a:	ff 92       	push	r15
    248c:	0f 93       	push	r16
    248e:	1f 93       	push	r17
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	4c 01       	movw	r8, r24
    2496:	eb 01       	movw	r28, r22
    2498:	5a 01       	movw	r10, r20
    249a:	29 01       	movw	r4, r18
    249c:	81 e2       	ldi	r24, 0x21	; 33
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	ca df       	rcall	.-108    	; 0x2436 <pvPortMalloc>
    24a2:	3c 01       	movw	r6, r24
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	09 f4       	brne	.+2      	; 0x24aa <xTaskGenericCreate+0x36>
    24a8:	d4 c0       	rjmp	.+424    	; 0x2652 <xTaskGenericCreate+0x1de>
    24aa:	c1 14       	cp	r12, r1
    24ac:	d1 04       	cpc	r13, r1
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <xTaskGenericCreate+0x3e>
    24b0:	cc c0       	rjmp	.+408    	; 0x264a <xTaskGenericCreate+0x1d6>
    24b2:	c5 01       	movw	r24, r10
    24b4:	c0 df       	rcall	.-128    	; 0x2436 <pvPortMalloc>
    24b6:	f3 01       	movw	r30, r6
    24b8:	87 8b       	std	Z+23, r24	; 0x17
    24ba:	90 8f       	std	Z+24, r25	; 0x18
    24bc:	89 2b       	or	r24, r25
    24be:	19 f4       	brne	.+6      	; 0x24c6 <xTaskGenericCreate+0x52>
    24c0:	c3 01       	movw	r24, r6
    24c2:	c5 df       	rcall	.-118    	; 0x244e <vPortFree>
    24c4:	c6 c0       	rjmp	.+396    	; 0x2652 <xTaskGenericCreate+0x1de>
    24c6:	f1 e0       	ldi	r31, 0x01	; 1
    24c8:	af 1a       	sub	r10, r31
    24ca:	b1 08       	sbc	r11, r1
    24cc:	f3 01       	movw	r30, r6
    24ce:	87 89       	ldd	r24, Z+23	; 0x17
    24d0:	90 8d       	ldd	r25, Z+24	; 0x18
    24d2:	a8 0e       	add	r10, r24
    24d4:	b9 1e       	adc	r11, r25
    24d6:	88 81       	ld	r24, Y
    24d8:	81 8f       	std	Z+25, r24	; 0x19
    24da:	88 81       	ld	r24, Y
    24dc:	88 23       	and	r24, r24
    24de:	81 f0       	breq	.+32     	; 0x2500 <xTaskGenericCreate+0x8c>
    24e0:	d3 01       	movw	r26, r6
    24e2:	5a 96       	adiw	r26, 0x1a	; 26
    24e4:	fe 01       	movw	r30, r28
    24e6:	31 96       	adiw	r30, 0x01	; 1
    24e8:	9e 01       	movw	r18, r28
    24ea:	28 5f       	subi	r18, 0xF8	; 248
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	ef 01       	movw	r28, r30
    24f0:	81 91       	ld	r24, Z+
    24f2:	8d 93       	st	X+, r24
    24f4:	88 81       	ld	r24, Y
    24f6:	88 23       	and	r24, r24
    24f8:	19 f0       	breq	.+6      	; 0x2500 <xTaskGenericCreate+0x8c>
    24fa:	e2 17       	cp	r30, r18
    24fc:	f3 07       	cpc	r31, r19
    24fe:	b9 f7       	brne	.-18     	; 0x24ee <xTaskGenericCreate+0x7a>
    2500:	f3 01       	movw	r30, r6
    2502:	10 a2       	std	Z+32, r1	; 0x20
    2504:	10 2f       	mov	r17, r16
    2506:	05 30       	cpi	r16, 0x05	; 5
    2508:	08 f0       	brcs	.+2      	; 0x250c <xTaskGenericCreate+0x98>
    250a:	14 e0       	ldi	r17, 0x04	; 4
    250c:	f3 01       	movw	r30, r6
    250e:	16 8b       	std	Z+22, r17	; 0x16
    2510:	e3 01       	movw	r28, r6
    2512:	22 96       	adiw	r28, 0x02	; 2
    2514:	ce 01       	movw	r24, r28
    2516:	d6 dd       	rcall	.-1108   	; 0x20c4 <vListInitialiseItem>
    2518:	c3 01       	movw	r24, r6
    251a:	0c 96       	adiw	r24, 0x0c	; 12
    251c:	d3 dd       	rcall	.-1114   	; 0x20c4 <vListInitialiseItem>
    251e:	f3 01       	movw	r30, r6
    2520:	60 86       	std	Z+8, r6	; 0x08
    2522:	71 86       	std	Z+9, r7	; 0x09
    2524:	85 e0       	ldi	r24, 0x05	; 5
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	81 1b       	sub	r24, r17
    252a:	91 09       	sbc	r25, r1
    252c:	84 87       	std	Z+12, r24	; 0x0c
    252e:	95 87       	std	Z+13, r25	; 0x0d
    2530:	62 8a       	std	Z+18, r6	; 0x12
    2532:	73 8a       	std	Z+19, r7	; 0x13
    2534:	a2 01       	movw	r20, r4
    2536:	b4 01       	movw	r22, r8
    2538:	c5 01       	movw	r24, r10
    253a:	0f de       	rcall	.-994    	; 0x215a <pxPortInitialiseStack>
    253c:	f3 01       	movw	r30, r6
    253e:	80 83       	st	Z, r24
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	e1 14       	cp	r14, r1
    2544:	f1 04       	cpc	r15, r1
    2546:	19 f0       	breq	.+6      	; 0x254e <xTaskGenericCreate+0xda>
    2548:	f7 01       	movw	r30, r14
    254a:	60 82       	st	Z, r6
    254c:	71 82       	std	Z+1, r7	; 0x01
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	0f 92       	push	r0
    2554:	80 91 79 22 	lds	r24, 0x2279
    2558:	8f 5f       	subi	r24, 0xFF	; 255
    255a:	80 93 79 22 	sts	0x2279, r24
    255e:	80 91 c6 22 	lds	r24, 0x22C6
    2562:	90 91 c7 22 	lds	r25, 0x22C7
    2566:	89 2b       	or	r24, r25
    2568:	91 f5       	brne	.+100    	; 0x25ce <xTaskGenericCreate+0x15a>
    256a:	60 92 c6 22 	sts	0x22C6, r6
    256e:	70 92 c7 22 	sts	0x22C7, r7
    2572:	80 91 79 22 	lds	r24, 0x2279
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	c9 f5       	brne	.+114    	; 0x25ec <xTaskGenericCreate+0x178>
    257a:	0f 2e       	mov	r0, r31
    257c:	f9 e9       	ldi	r31, 0x99	; 153
    257e:	ef 2e       	mov	r14, r31
    2580:	f2 e2       	ldi	r31, 0x22	; 34
    2582:	ff 2e       	mov	r15, r31
    2584:	f0 2d       	mov	r31, r0
    2586:	0f 2e       	mov	r0, r31
    2588:	f6 ec       	ldi	r31, 0xC6	; 198
    258a:	cf 2e       	mov	r12, r31
    258c:	f2 e2       	ldi	r31, 0x22	; 34
    258e:	df 2e       	mov	r13, r31
    2590:	f0 2d       	mov	r31, r0
    2592:	c7 01       	movw	r24, r14
    2594:	89 dd       	rcall	.-1262   	; 0x20a8 <vListInitialise>
    2596:	f9 e0       	ldi	r31, 0x09	; 9
    2598:	ef 0e       	add	r14, r31
    259a:	f1 1c       	adc	r15, r1
    259c:	ec 14       	cp	r14, r12
    259e:	fd 04       	cpc	r15, r13
    25a0:	c1 f7       	brne	.-16     	; 0x2592 <xTaskGenericCreate+0x11e>
    25a2:	80 e9       	ldi	r24, 0x90	; 144
    25a4:	92 e2       	ldi	r25, 0x22	; 34
    25a6:	80 dd       	rcall	.-1280   	; 0x20a8 <vListInitialise>
    25a8:	87 e8       	ldi	r24, 0x87	; 135
    25aa:	92 e2       	ldi	r25, 0x22	; 34
    25ac:	7d dd       	rcall	.-1286   	; 0x20a8 <vListInitialise>
    25ae:	8a e7       	ldi	r24, 0x7A	; 122
    25b0:	92 e2       	ldi	r25, 0x22	; 34
    25b2:	7a dd       	rcall	.-1292   	; 0x20a8 <vListInitialise>
    25b4:	80 e9       	ldi	r24, 0x90	; 144
    25b6:	92 e2       	ldi	r25, 0x22	; 34
    25b8:	80 93 85 22 	sts	0x2285, r24
    25bc:	90 93 86 22 	sts	0x2286, r25
    25c0:	87 e8       	ldi	r24, 0x87	; 135
    25c2:	92 e2       	ldi	r25, 0x22	; 34
    25c4:	80 93 83 22 	sts	0x2283, r24
    25c8:	90 93 84 22 	sts	0x2284, r25
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <xTaskGenericCreate+0x178>
    25ce:	80 91 75 22 	lds	r24, 0x2275
    25d2:	81 11       	cpse	r24, r1
    25d4:	0b c0       	rjmp	.+22     	; 0x25ec <xTaskGenericCreate+0x178>
    25d6:	e0 91 c6 22 	lds	r30, 0x22C6
    25da:	f0 91 c7 22 	lds	r31, 0x22C7
    25de:	86 89       	ldd	r24, Z+22	; 0x16
    25e0:	08 17       	cp	r16, r24
    25e2:	20 f0       	brcs	.+8      	; 0x25ec <xTaskGenericCreate+0x178>
    25e4:	60 92 c6 22 	sts	0x22C6, r6
    25e8:	70 92 c7 22 	sts	0x22C7, r7
    25ec:	80 91 71 22 	lds	r24, 0x2271
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	80 93 71 22 	sts	0x2271, r24
    25f6:	f3 01       	movw	r30, r6
    25f8:	86 89       	ldd	r24, Z+22	; 0x16
    25fa:	90 91 76 22 	lds	r25, 0x2276
    25fe:	98 17       	cp	r25, r24
    2600:	10 f4       	brcc	.+4      	; 0x2606 <xTaskGenericCreate+0x192>
    2602:	80 93 76 22 	sts	0x2276, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9c 01       	movw	r18, r24
    260a:	22 0f       	add	r18, r18
    260c:	33 1f       	adc	r19, r19
    260e:	22 0f       	add	r18, r18
    2610:	33 1f       	adc	r19, r19
    2612:	22 0f       	add	r18, r18
    2614:	33 1f       	adc	r19, r19
    2616:	82 0f       	add	r24, r18
    2618:	93 1f       	adc	r25, r19
    261a:	be 01       	movw	r22, r28
    261c:	87 56       	subi	r24, 0x67	; 103
    261e:	9d 4d       	sbci	r25, 0xDD	; 221
    2620:	55 dd       	rcall	.-1366   	; 0x20cc <vListInsertEnd>
    2622:	0f 90       	pop	r0
    2624:	0f be       	out	0x3f, r0	; 63
    2626:	80 91 75 22 	lds	r24, 0x2275
    262a:	88 23       	and	r24, r24
    262c:	51 f0       	breq	.+20     	; 0x2642 <xTaskGenericCreate+0x1ce>
    262e:	e0 91 c6 22 	lds	r30, 0x22C6
    2632:	f0 91 c7 22 	lds	r31, 0x22C7
    2636:	86 89       	ldd	r24, Z+22	; 0x16
    2638:	80 17       	cp	r24, r16
    263a:	28 f4       	brcc	.+10     	; 0x2646 <xTaskGenericCreate+0x1d2>
    263c:	4a de       	rcall	.-876    	; 0x22d2 <vPortYield>
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <xTaskGenericCreate+0x1e0>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <xTaskGenericCreate+0x1e0>
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <xTaskGenericCreate+0x1e0>
    264a:	fc 01       	movw	r30, r24
    264c:	c7 8a       	std	Z+23, r12	; 0x17
    264e:	d0 8e       	std	Z+24, r13	; 0x18
    2650:	3a cf       	rjmp	.-396    	; 0x24c6 <xTaskGenericCreate+0x52>
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
    2664:	bf 90       	pop	r11
    2666:	af 90       	pop	r10
    2668:	9f 90       	pop	r9
    266a:	8f 90       	pop	r8
    266c:	7f 90       	pop	r7
    266e:	6f 90       	pop	r6
    2670:	5f 90       	pop	r5
    2672:	4f 90       	pop	r4
    2674:	08 95       	ret

00002676 <vTaskStartScheduler>:
    2676:	af 92       	push	r10
    2678:	bf 92       	push	r11
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	a1 2c       	mov	r10, r1
    2686:	b1 2c       	mov	r11, r1
    2688:	c1 2c       	mov	r12, r1
    268a:	d1 2c       	mov	r13, r1
    268c:	e1 2c       	mov	r14, r1
    268e:	f1 2c       	mov	r15, r1
    2690:	00 e0       	ldi	r16, 0x00	; 0
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	45 e5       	ldi	r20, 0x55	; 85
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	69 e0       	ldi	r22, 0x09	; 9
    269c:	70 e2       	ldi	r23, 0x20	; 32
    269e:	83 e3       	ldi	r24, 0x33	; 51
    26a0:	92 e1       	ldi	r25, 0x12	; 18
    26a2:	e8 de       	rcall	.-560    	; 0x2474 <xTaskGenericCreate>
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	41 f4       	brne	.+16     	; 0x26b8 <vTaskStartScheduler+0x42>
    26a8:	f8 94       	cli
    26aa:	80 93 75 22 	sts	0x2275, r24
    26ae:	10 92 77 22 	sts	0x2277, r1
    26b2:	10 92 78 22 	sts	0x2278, r1
    26b6:	c8 dd       	rcall	.-1136   	; 0x2248 <xPortStartScheduler>
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	bf 90       	pop	r11
    26c4:	af 90       	pop	r10
    26c6:	08 95       	ret

000026c8 <vTaskSuspendAll>:
    26c8:	80 91 70 22 	lds	r24, 0x2270
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	80 93 70 22 	sts	0x2270, r24
    26d2:	08 95       	ret

000026d4 <xTaskIncrementTick>:
    26d4:	df 92       	push	r13
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	80 91 70 22 	lds	r24, 0x2270
    26e6:	81 11       	cpse	r24, r1
    26e8:	b3 c0       	rjmp	.+358    	; 0x2850 <xTaskIncrementTick+0x17c>
    26ea:	80 91 77 22 	lds	r24, 0x2277
    26ee:	90 91 78 22 	lds	r25, 0x2278
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	80 93 77 22 	sts	0x2277, r24
    26f8:	90 93 78 22 	sts	0x2278, r25
    26fc:	e0 90 77 22 	lds	r14, 0x2277
    2700:	f0 90 78 22 	lds	r15, 0x2278
    2704:	e1 14       	cp	r14, r1
    2706:	f1 04       	cpc	r15, r1
    2708:	99 f5       	brne	.+102    	; 0x2770 <xTaskIncrementTick+0x9c>
    270a:	80 91 85 22 	lds	r24, 0x2285
    270e:	90 91 86 22 	lds	r25, 0x2286
    2712:	20 91 83 22 	lds	r18, 0x2283
    2716:	30 91 84 22 	lds	r19, 0x2284
    271a:	20 93 85 22 	sts	0x2285, r18
    271e:	30 93 86 22 	sts	0x2286, r19
    2722:	80 93 83 22 	sts	0x2283, r24
    2726:	90 93 84 22 	sts	0x2284, r25
    272a:	80 91 72 22 	lds	r24, 0x2272
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	80 93 72 22 	sts	0x2272, r24
    2734:	e0 91 85 22 	lds	r30, 0x2285
    2738:	f0 91 86 22 	lds	r31, 0x2286
    273c:	80 81       	ld	r24, Z
    273e:	81 11       	cpse	r24, r1
    2740:	07 c0       	rjmp	.+14     	; 0x2750 <xTaskIncrementTick+0x7c>
    2742:	8f ef       	ldi	r24, 0xFF	; 255
    2744:	9f ef       	ldi	r25, 0xFF	; 255
    2746:	80 93 07 20 	sts	0x2007, r24
    274a:	90 93 08 20 	sts	0x2008, r25
    274e:	10 c0       	rjmp	.+32     	; 0x2770 <xTaskIncrementTick+0x9c>
    2750:	e0 91 85 22 	lds	r30, 0x2285
    2754:	f0 91 86 22 	lds	r31, 0x2286
    2758:	05 80       	ldd	r0, Z+5	; 0x05
    275a:	f6 81       	ldd	r31, Z+6	; 0x06
    275c:	e0 2d       	mov	r30, r0
    275e:	06 80       	ldd	r0, Z+6	; 0x06
    2760:	f7 81       	ldd	r31, Z+7	; 0x07
    2762:	e0 2d       	mov	r30, r0
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	80 93 07 20 	sts	0x2007, r24
    276c:	90 93 08 20 	sts	0x2008, r25
    2770:	80 91 07 20 	lds	r24, 0x2007
    2774:	90 91 08 20 	lds	r25, 0x2008
    2778:	e8 16       	cp	r14, r24
    277a:	f9 06       	cpc	r15, r25
    277c:	10 f4       	brcc	.+4      	; 0x2782 <xTaskIncrementTick+0xae>
    277e:	d1 2c       	mov	r13, r1
    2780:	4f c0       	rjmp	.+158    	; 0x2820 <xTaskIncrementTick+0x14c>
    2782:	d1 2c       	mov	r13, r1
    2784:	e0 91 85 22 	lds	r30, 0x2285
    2788:	f0 91 86 22 	lds	r31, 0x2286
    278c:	90 81       	ld	r25, Z
    278e:	91 11       	cpse	r25, r1
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <xTaskIncrementTick+0xcc>
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	9f ef       	ldi	r25, 0xFF	; 255
    2796:	80 93 07 20 	sts	0x2007, r24
    279a:	90 93 08 20 	sts	0x2008, r25
    279e:	40 c0       	rjmp	.+128    	; 0x2820 <xTaskIncrementTick+0x14c>
    27a0:	e0 91 85 22 	lds	r30, 0x2285
    27a4:	f0 91 86 22 	lds	r31, 0x2286
    27a8:	05 80       	ldd	r0, Z+5	; 0x05
    27aa:	f6 81       	ldd	r31, Z+6	; 0x06
    27ac:	e0 2d       	mov	r30, r0
    27ae:	c6 81       	ldd	r28, Z+6	; 0x06
    27b0:	d7 81       	ldd	r29, Z+7	; 0x07
    27b2:	2a 81       	ldd	r18, Y+2	; 0x02
    27b4:	3b 81       	ldd	r19, Y+3	; 0x03
    27b6:	e2 16       	cp	r14, r18
    27b8:	f3 06       	cpc	r15, r19
    27ba:	28 f4       	brcc	.+10     	; 0x27c6 <xTaskIncrementTick+0xf2>
    27bc:	20 93 07 20 	sts	0x2007, r18
    27c0:	30 93 08 20 	sts	0x2008, r19
    27c4:	2d c0       	rjmp	.+90     	; 0x2820 <xTaskIncrementTick+0x14c>
    27c6:	8e 01       	movw	r16, r28
    27c8:	0e 5f       	subi	r16, 0xFE	; 254
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	c8 01       	movw	r24, r16
    27ce:	9f dc       	rcall	.-1730   	; 0x210e <uxListRemove>
    27d0:	8c 89       	ldd	r24, Y+20	; 0x14
    27d2:	9d 89       	ldd	r25, Y+21	; 0x15
    27d4:	89 2b       	or	r24, r25
    27d6:	19 f0       	breq	.+6      	; 0x27de <xTaskIncrementTick+0x10a>
    27d8:	ce 01       	movw	r24, r28
    27da:	0c 96       	adiw	r24, 0x0c	; 12
    27dc:	98 dc       	rcall	.-1744   	; 0x210e <uxListRemove>
    27de:	2e 89       	ldd	r18, Y+22	; 0x16
    27e0:	80 91 76 22 	lds	r24, 0x2276
    27e4:	82 17       	cp	r24, r18
    27e6:	10 f4       	brcc	.+4      	; 0x27ec <xTaskIncrementTick+0x118>
    27e8:	20 93 76 22 	sts	0x2276, r18
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	c9 01       	movw	r24, r18
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	82 0f       	add	r24, r18
    27fe:	93 1f       	adc	r25, r19
    2800:	b8 01       	movw	r22, r16
    2802:	87 56       	subi	r24, 0x67	; 103
    2804:	9d 4d       	sbci	r25, 0xDD	; 221
    2806:	62 dc       	rcall	.-1852   	; 0x20cc <vListInsertEnd>
    2808:	e0 91 c6 22 	lds	r30, 0x22C6
    280c:	f0 91 c7 22 	lds	r31, 0x22C7
    2810:	9e 89       	ldd	r25, Y+22	; 0x16
    2812:	86 89       	ldd	r24, Z+22	; 0x16
    2814:	98 17       	cp	r25, r24
    2816:	08 f4       	brcc	.+2      	; 0x281a <xTaskIncrementTick+0x146>
    2818:	b5 cf       	rjmp	.-150    	; 0x2784 <xTaskIncrementTick+0xb0>
    281a:	dd 24       	eor	r13, r13
    281c:	d3 94       	inc	r13
    281e:	b2 cf       	rjmp	.-156    	; 0x2784 <xTaskIncrementTick+0xb0>
    2820:	e0 91 c6 22 	lds	r30, 0x22C6
    2824:	f0 91 c7 22 	lds	r31, 0x22C7
    2828:	86 89       	ldd	r24, Z+22	; 0x16
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	fc 01       	movw	r30, r24
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	8e 0f       	add	r24, r30
    283c:	9f 1f       	adc	r25, r31
    283e:	fc 01       	movw	r30, r24
    2840:	e7 56       	subi	r30, 0x67	; 103
    2842:	fd 4d       	sbci	r31, 0xDD	; 221
    2844:	80 81       	ld	r24, Z
    2846:	82 30       	cpi	r24, 0x02	; 2
    2848:	48 f0       	brcs	.+18     	; 0x285c <xTaskIncrementTick+0x188>
    284a:	dd 24       	eor	r13, r13
    284c:	d3 94       	inc	r13
    284e:	06 c0       	rjmp	.+12     	; 0x285c <xTaskIncrementTick+0x188>
    2850:	80 91 74 22 	lds	r24, 0x2274
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 93 74 22 	sts	0x2274, r24
    285a:	d1 2c       	mov	r13, r1
    285c:	80 91 73 22 	lds	r24, 0x2273
    2860:	88 23       	and	r24, r24
    2862:	11 f0       	breq	.+4      	; 0x2868 <xTaskIncrementTick+0x194>
    2864:	dd 24       	eor	r13, r13
    2866:	d3 94       	inc	r13
    2868:	8d 2d       	mov	r24, r13
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	df 90       	pop	r13
    2878:	08 95       	ret

0000287a <xTaskResumeAll>:
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	0f 92       	push	r0
    288e:	80 91 70 22 	lds	r24, 0x2270
    2892:	81 50       	subi	r24, 0x01	; 1
    2894:	80 93 70 22 	sts	0x2270, r24
    2898:	80 91 70 22 	lds	r24, 0x2270
    289c:	81 11       	cpse	r24, r1
    289e:	5d c0       	rjmp	.+186    	; 0x295a <xTaskResumeAll+0xe0>
    28a0:	80 91 79 22 	lds	r24, 0x2279
    28a4:	81 11       	cpse	r24, r1
    28a6:	30 c0       	rjmp	.+96     	; 0x2908 <xTaskResumeAll+0x8e>
    28a8:	5b c0       	rjmp	.+182    	; 0x2960 <xTaskResumeAll+0xe6>
    28aa:	d7 01       	movw	r26, r14
    28ac:	15 96       	adiw	r26, 0x05	; 5
    28ae:	ed 91       	ld	r30, X+
    28b0:	fc 91       	ld	r31, X
    28b2:	16 97       	sbiw	r26, 0x06	; 6
    28b4:	c6 81       	ldd	r28, Z+6	; 0x06
    28b6:	d7 81       	ldd	r29, Z+7	; 0x07
    28b8:	ce 01       	movw	r24, r28
    28ba:	0c 96       	adiw	r24, 0x0c	; 12
    28bc:	28 dc       	rcall	.-1968   	; 0x210e <uxListRemove>
    28be:	8e 01       	movw	r16, r28
    28c0:	0e 5f       	subi	r16, 0xFE	; 254
    28c2:	1f 4f       	sbci	r17, 0xFF	; 255
    28c4:	c8 01       	movw	r24, r16
    28c6:	23 dc       	rcall	.-1978   	; 0x210e <uxListRemove>
    28c8:	2e 89       	ldd	r18, Y+22	; 0x16
    28ca:	80 91 76 22 	lds	r24, 0x2276
    28ce:	82 17       	cp	r24, r18
    28d0:	10 f4       	brcc	.+4      	; 0x28d6 <xTaskResumeAll+0x5c>
    28d2:	20 93 76 22 	sts	0x2276, r18
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	c9 01       	movw	r24, r18
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	82 0f       	add	r24, r18
    28e8:	93 1f       	adc	r25, r19
    28ea:	b8 01       	movw	r22, r16
    28ec:	87 56       	subi	r24, 0x67	; 103
    28ee:	9d 4d       	sbci	r25, 0xDD	; 221
    28f0:	ed db       	rcall	.-2086   	; 0x20cc <vListInsertEnd>
    28f2:	e0 91 c6 22 	lds	r30, 0x22C6
    28f6:	f0 91 c7 22 	lds	r31, 0x22C7
    28fa:	9e 89       	ldd	r25, Y+22	; 0x16
    28fc:	86 89       	ldd	r24, Z+22	; 0x16
    28fe:	98 17       	cp	r25, r24
    2900:	58 f0       	brcs	.+22     	; 0x2918 <xTaskResumeAll+0x9e>
    2902:	d0 92 73 22 	sts	0x2273, r13
    2906:	08 c0       	rjmp	.+16     	; 0x2918 <xTaskResumeAll+0x9e>
    2908:	0f 2e       	mov	r0, r31
    290a:	fa e7       	ldi	r31, 0x7A	; 122
    290c:	ef 2e       	mov	r14, r31
    290e:	f2 e2       	ldi	r31, 0x22	; 34
    2910:	ff 2e       	mov	r15, r31
    2912:	f0 2d       	mov	r31, r0
    2914:	dd 24       	eor	r13, r13
    2916:	d3 94       	inc	r13
    2918:	f7 01       	movw	r30, r14
    291a:	80 81       	ld	r24, Z
    291c:	81 11       	cpse	r24, r1
    291e:	c5 cf       	rjmp	.-118    	; 0x28aa <xTaskResumeAll+0x30>
    2920:	80 91 74 22 	lds	r24, 0x2274
    2924:	88 23       	and	r24, r24
    2926:	91 f0       	breq	.+36     	; 0x294c <xTaskResumeAll+0xd2>
    2928:	80 91 74 22 	lds	r24, 0x2274
    292c:	88 23       	and	r24, r24
    292e:	71 f0       	breq	.+28     	; 0x294c <xTaskResumeAll+0xd2>
    2930:	c1 e0       	ldi	r28, 0x01	; 1
    2932:	d0 de       	rcall	.-608    	; 0x26d4 <xTaskIncrementTick>
    2934:	81 11       	cpse	r24, r1
    2936:	c0 93 73 22 	sts	0x2273, r28
    293a:	80 91 74 22 	lds	r24, 0x2274
    293e:	81 50       	subi	r24, 0x01	; 1
    2940:	80 93 74 22 	sts	0x2274, r24
    2944:	80 91 74 22 	lds	r24, 0x2274
    2948:	81 11       	cpse	r24, r1
    294a:	f3 cf       	rjmp	.-26     	; 0x2932 <xTaskResumeAll+0xb8>
    294c:	80 91 73 22 	lds	r24, 0x2273
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	29 f4       	brne	.+10     	; 0x295e <xTaskResumeAll+0xe4>
    2954:	be dc       	rcall	.-1668   	; 0x22d2 <vPortYield>
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	03 c0       	rjmp	.+6      	; 0x2960 <xTaskResumeAll+0xe6>
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	01 c0       	rjmp	.+2      	; 0x2960 <xTaskResumeAll+0xe6>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	0f 90       	pop	r0
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	08 95       	ret

00002974 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    2974:	80 91 70 22 	lds	r24, 0x2270
    2978:	88 23       	and	r24, r24
    297a:	21 f0       	breq	.+8      	; 0x2984 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	80 93 73 22 	sts	0x2273, r24
    2982:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    2984:	10 92 73 22 	sts	0x2273, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2988:	80 91 76 22 	lds	r24, 0x2276
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	fc 01       	movw	r30, r24
    2990:	ee 0f       	add	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	ee 0f       	add	r30, r30
    2996:	ff 1f       	adc	r31, r31
    2998:	ee 0f       	add	r30, r30
    299a:	ff 1f       	adc	r31, r31
    299c:	8e 0f       	add	r24, r30
    299e:	9f 1f       	adc	r25, r31
    29a0:	fc 01       	movw	r30, r24
    29a2:	e7 56       	subi	r30, 0x67	; 103
    29a4:	fd 4d       	sbci	r31, 0xDD	; 221
    29a6:	80 81       	ld	r24, Z
    29a8:	81 11       	cpse	r24, r1
    29aa:	17 c0       	rjmp	.+46     	; 0x29da <vTaskSwitchContext+0x66>
    29ac:	80 91 76 22 	lds	r24, 0x2276
    29b0:	81 50       	subi	r24, 0x01	; 1
    29b2:	80 93 76 22 	sts	0x2276, r24
    29b6:	80 91 76 22 	lds	r24, 0x2276
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	fc 01       	movw	r30, r24
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	8e 0f       	add	r24, r30
    29cc:	9f 1f       	adc	r25, r31
    29ce:	fc 01       	movw	r30, r24
    29d0:	e7 56       	subi	r30, 0x67	; 103
    29d2:	fd 4d       	sbci	r31, 0xDD	; 221
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	49 f3       	breq	.-46     	; 0x29ac <vTaskSwitchContext+0x38>
    29da:	80 91 76 22 	lds	r24, 0x2276
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	9c 01       	movw	r18, r24
    29e2:	22 0f       	add	r18, r18
    29e4:	33 1f       	adc	r19, r19
    29e6:	22 0f       	add	r18, r18
    29e8:	33 1f       	adc	r19, r19
    29ea:	22 0f       	add	r18, r18
    29ec:	33 1f       	adc	r19, r19
    29ee:	28 0f       	add	r18, r24
    29f0:	39 1f       	adc	r19, r25
    29f2:	d9 01       	movw	r26, r18
    29f4:	a7 56       	subi	r26, 0x67	; 103
    29f6:	bd 4d       	sbci	r27, 0xDD	; 221
    29f8:	11 96       	adiw	r26, 0x01	; 1
    29fa:	ed 91       	ld	r30, X+
    29fc:	fc 91       	ld	r31, X
    29fe:	12 97       	sbiw	r26, 0x02	; 2
    2a00:	02 80       	ldd	r0, Z+2	; 0x02
    2a02:	f3 81       	ldd	r31, Z+3	; 0x03
    2a04:	e0 2d       	mov	r30, r0
    2a06:	11 96       	adiw	r26, 0x01	; 1
    2a08:	ed 93       	st	X+, r30
    2a0a:	fc 93       	st	X, r31
    2a0c:	12 97       	sbiw	r26, 0x02	; 2
    2a0e:	24 56       	subi	r18, 0x64	; 100
    2a10:	3d 4d       	sbci	r19, 0xDD	; 221
    2a12:	e2 17       	cp	r30, r18
    2a14:	f3 07       	cpc	r31, r19
    2a16:	29 f4       	brne	.+10     	; 0x2a22 <vTaskSwitchContext+0xae>
    2a18:	22 81       	ldd	r18, Z+2	; 0x02
    2a1a:	33 81       	ldd	r19, Z+3	; 0x03
    2a1c:	fd 01       	movw	r30, r26
    2a1e:	21 83       	std	Z+1, r18	; 0x01
    2a20:	32 83       	std	Z+2, r19	; 0x02
    2a22:	fc 01       	movw	r30, r24
    2a24:	ee 0f       	add	r30, r30
    2a26:	ff 1f       	adc	r31, r31
    2a28:	ee 0f       	add	r30, r30
    2a2a:	ff 1f       	adc	r31, r31
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	ff 1f       	adc	r31, r31
    2a30:	8e 0f       	add	r24, r30
    2a32:	9f 1f       	adc	r25, r31
    2a34:	fc 01       	movw	r30, r24
    2a36:	e7 56       	subi	r30, 0x67	; 103
    2a38:	fd 4d       	sbci	r31, 0xDD	; 221
    2a3a:	01 80       	ldd	r0, Z+1	; 0x01
    2a3c:	f2 81       	ldd	r31, Z+2	; 0x02
    2a3e:	e0 2d       	mov	r30, r0
    2a40:	86 81       	ldd	r24, Z+6	; 0x06
    2a42:	97 81       	ldd	r25, Z+7	; 0x07
    2a44:	80 93 c6 22 	sts	0x22C6, r24
    2a48:	90 93 c7 22 	sts	0x22C7, r25
    2a4c:	08 95       	ret

00002a4e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a4e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2a50:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2a52:	e8 2f       	mov	r30, r24
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	e0 59       	subi	r30, 0x90	; 144
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	60 95       	com	r22
    2a5c:	80 81       	ld	r24, Z
    2a5e:	68 23       	and	r22, r24
    2a60:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a62:	9f bf       	out	0x3f, r25	; 63
    2a64:	08 95       	ret

00002a66 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2a66:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2a68:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2a6a:	e8 2f       	mov	r30, r24
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	e0 59       	subi	r30, 0x90	; 144
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	68 2b       	or	r22, r24
    2a76:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a78:	9f bf       	out	0x3f, r25	; 63
    2a7a:	08 95       	ret

00002a7c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2a7c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2a80:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2a82:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2a84:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2a88:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2a8a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2a8e:	08 95       	ret

00002a90 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2a90:	cf 93       	push	r28
    2a92:	df 93       	push	r29
    2a94:	fc 01       	movw	r30, r24
    2a96:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2a9c:	c6 2f       	mov	r28, r22
    2a9e:	d0 e0       	ldi	r29, 0x00	; 0
    2aa0:	de 01       	movw	r26, r28
    2aa2:	02 2e       	mov	r0, r18
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <ioport_configure_port_pin+0x1a>
    2aa6:	b5 95       	asr	r27
    2aa8:	a7 95       	ror	r26
    2aaa:	0a 94       	dec	r0
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <ioport_configure_port_pin+0x16>
    2aae:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2ab0:	50 83       	st	Z, r21
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2ab8:	28 30       	cpi	r18, 0x08	; 8
    2aba:	31 05       	cpc	r19, r1
    2abc:	89 f7       	brne	.-30     	; 0x2aa0 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2abe:	40 ff       	sbrs	r20, 0
    2ac0:	0a c0       	rjmp	.+20     	; 0x2ad6 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2ac2:	41 ff       	sbrs	r20, 1
    2ac4:	03 c0       	rjmp	.+6      	; 0x2acc <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	65 83       	std	Z+5, r22	; 0x05
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2acc:	fc 01       	movw	r30, r24
    2ace:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	61 83       	std	Z+1, r22	; 0x01
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	08 95       	ret

00002ae0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2ae0:	43 e0       	ldi	r20, 0x03	; 3
    2ae2:	50 e0       	ldi	r21, 0x00	; 0
    2ae4:	61 e0       	ldi	r22, 0x01	; 1
    2ae6:	80 ee       	ldi	r24, 0xE0	; 224
    2ae8:	97 e0       	ldi	r25, 0x07	; 7
    2aea:	d2 df       	rcall	.-92     	; 0x2a90 <ioport_configure_port_pin>
    2aec:	43 e0       	ldi	r20, 0x03	; 3
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	80 ee       	ldi	r24, 0xE0	; 224
    2af4:	97 e0       	ldi	r25, 0x07	; 7
    2af6:	cc df       	rcall	.-104    	; 0x2a90 <ioport_configure_port_pin>
    2af8:	43 e0       	ldi	r20, 0x03	; 3
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	60 e1       	ldi	r22, 0x10	; 16
    2afe:	80 e6       	ldi	r24, 0x60	; 96
    2b00:	96 e0       	ldi	r25, 0x06	; 6
    2b02:	c6 df       	rcall	.-116    	; 0x2a90 <ioport_configure_port_pin>
    2b04:	41 e0       	ldi	r20, 0x01	; 1
    2b06:	50 e4       	ldi	r21, 0x40	; 64
    2b08:	60 e2       	ldi	r22, 0x20	; 32
    2b0a:	80 e6       	ldi	r24, 0x60	; 96
    2b0c:	96 e0       	ldi	r25, 0x06	; 6
    2b0e:	c0 df       	rcall	.-128    	; 0x2a90 <ioport_configure_port_pin>
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	5b e1       	ldi	r21, 0x1B	; 27
    2b14:	60 e2       	ldi	r22, 0x20	; 32
    2b16:	80 e8       	ldi	r24, 0x80	; 128
    2b18:	96 e0       	ldi	r25, 0x06	; 6
    2b1a:	ba df       	rcall	.-140    	; 0x2a90 <ioport_configure_port_pin>
    2b1c:	40 e0       	ldi	r20, 0x00	; 0
    2b1e:	5b e1       	ldi	r21, 0x1B	; 27
    2b20:	62 e0       	ldi	r22, 0x02	; 2
    2b22:	80 ea       	ldi	r24, 0xA0	; 160
    2b24:	96 e0       	ldi	r25, 0x06	; 6
    2b26:	b4 df       	rcall	.-152    	; 0x2a90 <ioport_configure_port_pin>
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	5b e1       	ldi	r21, 0x1B	; 27
    2b2c:	64 e0       	ldi	r22, 0x04	; 4
    2b2e:	80 ea       	ldi	r24, 0xA0	; 160
    2b30:	96 e0       	ldi	r25, 0x06	; 6
    2b32:	ae df       	rcall	.-164    	; 0x2a90 <ioport_configure_port_pin>
    2b34:	43 e0       	ldi	r20, 0x03	; 3
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	62 e0       	ldi	r22, 0x02	; 2
    2b3a:	80 e6       	ldi	r24, 0x60	; 96
    2b3c:	96 e0       	ldi	r25, 0x06	; 6
    2b3e:	a8 df       	rcall	.-176    	; 0x2a90 <ioport_configure_port_pin>
    2b40:	43 e0       	ldi	r20, 0x03	; 3
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	68 e0       	ldi	r22, 0x08	; 8
    2b46:	80 e6       	ldi	r24, 0x60	; 96
    2b48:	96 e0       	ldi	r25, 0x06	; 6
    2b4a:	a2 df       	rcall	.-188    	; 0x2a90 <ioport_configure_port_pin>
    2b4c:	43 e0       	ldi	r20, 0x03	; 3
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	68 e0       	ldi	r22, 0x08	; 8
    2b52:	80 ea       	ldi	r24, 0xA0	; 160
    2b54:	96 e0       	ldi	r25, 0x06	; 6
    2b56:	9c df       	rcall	.-200    	; 0x2a90 <ioport_configure_port_pin>
    2b58:	43 e0       	ldi	r20, 0x03	; 3
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	80 e6       	ldi	r24, 0x60	; 96
    2b60:	96 e0       	ldi	r25, 0x06	; 6
    2b62:	96 df       	rcall	.-212    	; 0x2a90 <ioport_configure_port_pin>
    2b64:	43 e0       	ldi	r20, 0x03	; 3
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	68 e0       	ldi	r22, 0x08	; 8
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	96 e0       	ldi	r25, 0x06	; 6
    2b6e:	90 df       	rcall	.-224    	; 0x2a90 <ioport_configure_port_pin>
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	60 e1       	ldi	r22, 0x10	; 16
    2b76:	80 e8       	ldi	r24, 0x80	; 128
    2b78:	96 e0       	ldi	r25, 0x06	; 6
    2b7a:	8a cf       	rjmp	.-236    	; 0x2a90 <ioport_configure_port_pin>
    2b7c:	08 95       	ret

00002b7e <setUpSerial>:
	}
	
}
//Menampilkan status penggunaan air, status keran, suhu air (LCD)
void clearLCD(void){
	gfx_mono_draw_string("                    ",0,0,&sysfont);
    2b7e:	10 92 a7 08 	sts	0x08A7, r1
    2b82:	8c e0       	ldi	r24, 0x0C	; 12
    2b84:	80 93 a6 08 	sts	0x08A6, r24
    2b88:	10 92 a3 08 	sts	0x08A3, r1
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	80 93 a5 08 	sts	0x08A5, r24
    2b92:	88 e1       	ldi	r24, 0x18	; 24
    2b94:	80 93 a4 08 	sts	0x08A4, r24
    2b98:	08 95       	ret

00002b9a <adc_init>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	2b 97       	sbiw	r28, 0x0b	; 11
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	be 01       	movw	r22, r28
    2baa:	6f 5f       	subi	r22, 0xFF	; 255
    2bac:	7f 4f       	sbci	r23, 0xFF	; 255
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	92 e0       	ldi	r25, 0x02	; 2
    2bb2:	0e 94 83 0c 	call	0x1906	; 0x1906 <adc_read_configuration>
    2bb6:	ae 01       	movw	r20, r28
    2bb8:	48 5f       	subi	r20, 0xF8	; 248
    2bba:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	92 e0       	ldi	r25, 0x02	; 2
    2bc2:	0e 94 df 0c 	call	0x19be	; 0x19be <adcch_read_configuration>
    2bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	8f 78       	andi	r24, 0x8F	; 143
    2bcc:	80 61       	ori	r24, 0x10	; 16
    2bce:	8b 83       	std	Y+3, r24	; 0x03
    2bd0:	89 2f       	mov	r24, r25
    2bd2:	81 7e       	andi	r24, 0xE1	; 225
    2bd4:	8a 83       	std	Y+2, r24	; 0x02
    2bd6:	1c 82       	std	Y+4, r1	; 0x04
    2bd8:	86 e0       	ldi	r24, 0x06	; 6
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	88 87       	std	Y+8, r24	; 0x08
    2be0:	19 86       	std	Y+9, r1	; 0x09
    2be2:	be 01       	movw	r22, r28
    2be4:	6f 5f       	subi	r22, 0xFF	; 255
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	92 e0       	ldi	r25, 0x02	; 2
    2bec:	0e 94 2f 0c 	call	0x185e	; 0x185e <adc_write_configuration>
    2bf0:	ae 01       	movw	r20, r28
    2bf2:	48 5f       	subi	r20, 0xF8	; 248
    2bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	92 e0       	ldi	r25, 0x02	; 2
    2bfc:	0e 94 a6 0c 	call	0x194c	; 0x194c <adcch_write_configuration>
    2c00:	2b 96       	adiw	r28, 0x0b	; 11
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	df 91       	pop	r29
    2c08:	cf 91       	pop	r28
    2c0a:	08 95       	ret

00002c0c <main>:
	}
}

int main (void)
{
	board_init(); //konfigurasi awal board
    2c0c:	69 df       	rcall	.-302    	; 0x2ae0 <board_init>
	//sysclk_init(); //konfigurasi awal system clock
	adc_sensors_init();// konfigurasi adc
    2c0e:	0e 94 03 07 	call	0xe06	; 0xe06 <adc_sensors_init>
	gfx_mono_init(); //konfigurasi awal LCD monochrom
    2c12:	0e 94 c4 09 	call	0x1388	; 0x1388 <gfx_mono_st7565r_init>
	tb_init(); //konfigurasi touch button
    2c16:	0e 94 06 0a 	call	0x140c	; 0x140c <tb_init>
	cpu_irq_enable(); // konfigurasi untuk menghidupkan interrupt
    2c1a:	78 94       	sei
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2c1c:	87 e0       	ldi	r24, 0x07	; 7
    2c1e:	80 93 a2 00 	sts	0x00A2, r24
	pmic_init(); //konfigurasi untuk menyalakan semua interrupt dan mengatur prioritas task
	//pwm_init();
	adc_init();
    2c22:	bb df       	rcall	.-138    	; 0x2b9a <adc_init>
    2c24:	80 e1       	ldi	r24, 0x10	; 16
    2c26:	80 93 85 06 	sts	0x0685, r24
	
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	
	PORTC_OUTSET = PIN3_bm;
    2c2a:	88 e0       	ldi	r24, 0x08	; 8
    2c2c:	80 93 45 06 	sts	0x0645, r24
	PORTC_DIRSET = PIN3_bm;
    2c30:	80 93 41 06 	sts	0x0641, r24
	
	PORTC_OUTCLR = PIN2_bm;
    2c34:	84 e0       	ldi	r24, 0x04	; 4
    2c36:	80 93 46 06 	sts	0x0646, r24
	PORTC_DIRCLR = PIN2_bm;
    2c3a:	80 93 42 06 	sts	0x0642, r24
	
	setUpSerial();
    2c3e:	9f df       	rcall	.-194    	; 0x2b7e <setUpSerial>
		 vTaskDelay(10);
	 }
}

void setMaxWater(int max) {
	maxWater = max;
    2c40:	88 ec       	ldi	r24, 0xC8	; 200
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	80 93 c8 22 	sts	0x22C8, r24
    2c48:	90 93 c9 22 	sts	0x22C9, r25
	//xTaskCreate(checkWater, "", 200, NULL, 1, NULL);
	//xTaskCreate(vLCD, "", 600, NULL, 1, NULL);
	//xTaskCreate(checkTap, "", 200, NULL, 1, NULL);
	//xTaskCreate(vReceiver, "", 200, NULL, 1, NULL);

	vTaskStartScheduler();
    2c4c:	14 dd       	rcall	.-1496   	; 0x2676 <vTaskStartScheduler>
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	08 95       	ret

00002c54 <__udivmodsi4>:
    2c54:	a1 e2       	ldi	r26, 0x21	; 33
    2c56:	1a 2e       	mov	r1, r26
    2c58:	aa 1b       	sub	r26, r26
    2c5a:	bb 1b       	sub	r27, r27
    2c5c:	fd 01       	movw	r30, r26
    2c5e:	0d c0       	rjmp	.+26     	; 0x2c7a <__udivmodsi4_ep>

00002c60 <__udivmodsi4_loop>:
    2c60:	aa 1f       	adc	r26, r26
    2c62:	bb 1f       	adc	r27, r27
    2c64:	ee 1f       	adc	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	a2 17       	cp	r26, r18
    2c6a:	b3 07       	cpc	r27, r19
    2c6c:	e4 07       	cpc	r30, r20
    2c6e:	f5 07       	cpc	r31, r21
    2c70:	20 f0       	brcs	.+8      	; 0x2c7a <__udivmodsi4_ep>
    2c72:	a2 1b       	sub	r26, r18
    2c74:	b3 0b       	sbc	r27, r19
    2c76:	e4 0b       	sbc	r30, r20
    2c78:	f5 0b       	sbc	r31, r21

00002c7a <__udivmodsi4_ep>:
    2c7a:	66 1f       	adc	r22, r22
    2c7c:	77 1f       	adc	r23, r23
    2c7e:	88 1f       	adc	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	1a 94       	dec	r1
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <__udivmodsi4_loop>
    2c86:	60 95       	com	r22
    2c88:	70 95       	com	r23
    2c8a:	80 95       	com	r24
    2c8c:	90 95       	com	r25
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	bd 01       	movw	r22, r26
    2c94:	cf 01       	movw	r24, r30
    2c96:	08 95       	ret

00002c98 <__prologue_saves__>:
    2c98:	2f 92       	push	r2
    2c9a:	3f 92       	push	r3
    2c9c:	4f 92       	push	r4
    2c9e:	5f 92       	push	r5
    2ca0:	6f 92       	push	r6
    2ca2:	7f 92       	push	r7
    2ca4:	8f 92       	push	r8
    2ca6:	9f 92       	push	r9
    2ca8:	af 92       	push	r10
    2caa:	bf 92       	push	r11
    2cac:	cf 92       	push	r12
    2cae:	df 92       	push	r13
    2cb0:	ef 92       	push	r14
    2cb2:	ff 92       	push	r15
    2cb4:	0f 93       	push	r16
    2cb6:	1f 93       	push	r17
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	ca 1b       	sub	r28, r26
    2cc2:	db 0b       	sbc	r29, r27
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	de bf       	out	0x3e, r29	; 62
    2cc8:	19 94       	eijmp

00002cca <__epilogue_restores__>:
    2cca:	2a 88       	ldd	r2, Y+18	; 0x12
    2ccc:	39 88       	ldd	r3, Y+17	; 0x11
    2cce:	48 88       	ldd	r4, Y+16	; 0x10
    2cd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cda:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cdc:	b9 84       	ldd	r11, Y+9	; 0x09
    2cde:	c8 84       	ldd	r12, Y+8	; 0x08
    2ce0:	df 80       	ldd	r13, Y+7	; 0x07
    2ce2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ce4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ce6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ce8:	1b 81       	ldd	r17, Y+3	; 0x03
    2cea:	aa 81       	ldd	r26, Y+2	; 0x02
    2cec:	b9 81       	ldd	r27, Y+1	; 0x01
    2cee:	ce 0f       	add	r28, r30
    2cf0:	d1 1d       	adc	r29, r1
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	ed 01       	movw	r28, r26
    2cf8:	08 95       	ret

00002cfa <malloc>:
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	82 30       	cpi	r24, 0x02	; 2
    2d00:	91 05       	cpc	r25, r1
    2d02:	10 f4       	brcc	.+4      	; 0x2d08 <malloc+0xe>
    2d04:	82 e0       	ldi	r24, 0x02	; 2
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	e0 91 d6 22 	lds	r30, 0x22D6
    2d0c:	f0 91 d7 22 	lds	r31, 0x22D7
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	c0 e0       	ldi	r28, 0x00	; 0
    2d16:	d0 e0       	ldi	r29, 0x00	; 0
    2d18:	30 97       	sbiw	r30, 0x00	; 0
    2d1a:	11 f1       	breq	.+68     	; 0x2d60 <malloc+0x66>
    2d1c:	40 81       	ld	r20, Z
    2d1e:	51 81       	ldd	r21, Z+1	; 0x01
    2d20:	48 17       	cp	r20, r24
    2d22:	59 07       	cpc	r21, r25
    2d24:	c0 f0       	brcs	.+48     	; 0x2d56 <malloc+0x5c>
    2d26:	48 17       	cp	r20, r24
    2d28:	59 07       	cpc	r21, r25
    2d2a:	61 f4       	brne	.+24     	; 0x2d44 <malloc+0x4a>
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	20 97       	sbiw	r28, 0x00	; 0
    2d32:	19 f0       	breq	.+6      	; 0x2d3a <malloc+0x40>
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	9b 83       	std	Y+3, r25	; 0x03
    2d38:	2b c0       	rjmp	.+86     	; 0x2d90 <malloc+0x96>
    2d3a:	80 93 d6 22 	sts	0x22D6, r24
    2d3e:	90 93 d7 22 	sts	0x22D7, r25
    2d42:	26 c0       	rjmp	.+76     	; 0x2d90 <malloc+0x96>
    2d44:	21 15       	cp	r18, r1
    2d46:	31 05       	cpc	r19, r1
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <malloc+0x56>
    2d4a:	42 17       	cp	r20, r18
    2d4c:	53 07       	cpc	r21, r19
    2d4e:	18 f4       	brcc	.+6      	; 0x2d56 <malloc+0x5c>
    2d50:	9a 01       	movw	r18, r20
    2d52:	be 01       	movw	r22, r28
    2d54:	df 01       	movw	r26, r30
    2d56:	ef 01       	movw	r28, r30
    2d58:	02 80       	ldd	r0, Z+2	; 0x02
    2d5a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d5c:	e0 2d       	mov	r30, r0
    2d5e:	dc cf       	rjmp	.-72     	; 0x2d18 <malloc+0x1e>
    2d60:	21 15       	cp	r18, r1
    2d62:	31 05       	cpc	r19, r1
    2d64:	09 f1       	breq	.+66     	; 0x2da8 <malloc+0xae>
    2d66:	28 1b       	sub	r18, r24
    2d68:	39 0b       	sbc	r19, r25
    2d6a:	24 30       	cpi	r18, 0x04	; 4
    2d6c:	31 05       	cpc	r19, r1
    2d6e:	90 f4       	brcc	.+36     	; 0x2d94 <malloc+0x9a>
    2d70:	12 96       	adiw	r26, 0x02	; 2
    2d72:	8d 91       	ld	r24, X+
    2d74:	9c 91       	ld	r25, X
    2d76:	13 97       	sbiw	r26, 0x03	; 3
    2d78:	61 15       	cp	r22, r1
    2d7a:	71 05       	cpc	r23, r1
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <malloc+0x8c>
    2d7e:	fb 01       	movw	r30, r22
    2d80:	82 83       	std	Z+2, r24	; 0x02
    2d82:	93 83       	std	Z+3, r25	; 0x03
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <malloc+0x94>
    2d86:	80 93 d6 22 	sts	0x22D6, r24
    2d8a:	90 93 d7 22 	sts	0x22D7, r25
    2d8e:	fd 01       	movw	r30, r26
    2d90:	32 96       	adiw	r30, 0x02	; 2
    2d92:	44 c0       	rjmp	.+136    	; 0x2e1c <malloc+0x122>
    2d94:	fd 01       	movw	r30, r26
    2d96:	e2 0f       	add	r30, r18
    2d98:	f3 1f       	adc	r31, r19
    2d9a:	81 93       	st	Z+, r24
    2d9c:	91 93       	st	Z+, r25
    2d9e:	22 50       	subi	r18, 0x02	; 2
    2da0:	31 09       	sbc	r19, r1
    2da2:	2d 93       	st	X+, r18
    2da4:	3c 93       	st	X, r19
    2da6:	3a c0       	rjmp	.+116    	; 0x2e1c <malloc+0x122>
    2da8:	20 91 d4 22 	lds	r18, 0x22D4
    2dac:	30 91 d5 22 	lds	r19, 0x22D5
    2db0:	23 2b       	or	r18, r19
    2db2:	41 f4       	brne	.+16     	; 0x2dc4 <malloc+0xca>
    2db4:	20 91 03 20 	lds	r18, 0x2003
    2db8:	30 91 04 20 	lds	r19, 0x2004
    2dbc:	20 93 d4 22 	sts	0x22D4, r18
    2dc0:	30 93 d5 22 	sts	0x22D5, r19
    2dc4:	20 91 01 20 	lds	r18, 0x2001
    2dc8:	30 91 02 20 	lds	r19, 0x2002
    2dcc:	21 15       	cp	r18, r1
    2dce:	31 05       	cpc	r19, r1
    2dd0:	41 f4       	brne	.+16     	; 0x2de2 <malloc+0xe8>
    2dd2:	2d b7       	in	r18, 0x3d	; 61
    2dd4:	3e b7       	in	r19, 0x3e	; 62
    2dd6:	40 91 05 20 	lds	r20, 0x2005
    2dda:	50 91 06 20 	lds	r21, 0x2006
    2dde:	24 1b       	sub	r18, r20
    2de0:	35 0b       	sbc	r19, r21
    2de2:	e0 91 d4 22 	lds	r30, 0x22D4
    2de6:	f0 91 d5 22 	lds	r31, 0x22D5
    2dea:	e2 17       	cp	r30, r18
    2dec:	f3 07       	cpc	r31, r19
    2dee:	a0 f4       	brcc	.+40     	; 0x2e18 <malloc+0x11e>
    2df0:	2e 1b       	sub	r18, r30
    2df2:	3f 0b       	sbc	r19, r31
    2df4:	28 17       	cp	r18, r24
    2df6:	39 07       	cpc	r19, r25
    2df8:	78 f0       	brcs	.+30     	; 0x2e18 <malloc+0x11e>
    2dfa:	ac 01       	movw	r20, r24
    2dfc:	4e 5f       	subi	r20, 0xFE	; 254
    2dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2e00:	24 17       	cp	r18, r20
    2e02:	35 07       	cpc	r19, r21
    2e04:	48 f0       	brcs	.+18     	; 0x2e18 <malloc+0x11e>
    2e06:	4e 0f       	add	r20, r30
    2e08:	5f 1f       	adc	r21, r31
    2e0a:	40 93 d4 22 	sts	0x22D4, r20
    2e0e:	50 93 d5 22 	sts	0x22D5, r21
    2e12:	81 93       	st	Z+, r24
    2e14:	91 93       	st	Z+, r25
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <malloc+0x122>
    2e18:	e0 e0       	ldi	r30, 0x00	; 0
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	cf 01       	movw	r24, r30
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	08 95       	ret

00002e24 <free>:
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <free+0xe>
    2e30:	8c c0       	rjmp	.+280    	; 0x2f4a <free+0x126>
    2e32:	fc 01       	movw	r30, r24
    2e34:	32 97       	sbiw	r30, 0x02	; 2
    2e36:	12 82       	std	Z+2, r1	; 0x02
    2e38:	13 82       	std	Z+3, r1	; 0x03
    2e3a:	00 91 d6 22 	lds	r16, 0x22D6
    2e3e:	10 91 d7 22 	lds	r17, 0x22D7
    2e42:	01 15       	cp	r16, r1
    2e44:	11 05       	cpc	r17, r1
    2e46:	81 f4       	brne	.+32     	; 0x2e68 <free+0x44>
    2e48:	20 81       	ld	r18, Z
    2e4a:	31 81       	ldd	r19, Z+1	; 0x01
    2e4c:	82 0f       	add	r24, r18
    2e4e:	93 1f       	adc	r25, r19
    2e50:	20 91 d4 22 	lds	r18, 0x22D4
    2e54:	30 91 d5 22 	lds	r19, 0x22D5
    2e58:	28 17       	cp	r18, r24
    2e5a:	39 07       	cpc	r19, r25
    2e5c:	79 f5       	brne	.+94     	; 0x2ebc <free+0x98>
    2e5e:	e0 93 d4 22 	sts	0x22D4, r30
    2e62:	f0 93 d5 22 	sts	0x22D5, r31
    2e66:	71 c0       	rjmp	.+226    	; 0x2f4a <free+0x126>
    2e68:	d8 01       	movw	r26, r16
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	50 e0       	ldi	r21, 0x00	; 0
    2e6e:	ae 17       	cp	r26, r30
    2e70:	bf 07       	cpc	r27, r31
    2e72:	50 f4       	brcc	.+20     	; 0x2e88 <free+0x64>
    2e74:	12 96       	adiw	r26, 0x02	; 2
    2e76:	2d 91       	ld	r18, X+
    2e78:	3c 91       	ld	r19, X
    2e7a:	13 97       	sbiw	r26, 0x03	; 3
    2e7c:	ad 01       	movw	r20, r26
    2e7e:	21 15       	cp	r18, r1
    2e80:	31 05       	cpc	r19, r1
    2e82:	09 f1       	breq	.+66     	; 0x2ec6 <free+0xa2>
    2e84:	d9 01       	movw	r26, r18
    2e86:	f3 cf       	rjmp	.-26     	; 0x2e6e <free+0x4a>
    2e88:	9d 01       	movw	r18, r26
    2e8a:	da 01       	movw	r26, r20
    2e8c:	22 83       	std	Z+2, r18	; 0x02
    2e8e:	33 83       	std	Z+3, r19	; 0x03
    2e90:	60 81       	ld	r22, Z
    2e92:	71 81       	ldd	r23, Z+1	; 0x01
    2e94:	86 0f       	add	r24, r22
    2e96:	97 1f       	adc	r25, r23
    2e98:	82 17       	cp	r24, r18
    2e9a:	93 07       	cpc	r25, r19
    2e9c:	69 f4       	brne	.+26     	; 0x2eb8 <free+0x94>
    2e9e:	ec 01       	movw	r28, r24
    2ea0:	28 81       	ld	r18, Y
    2ea2:	39 81       	ldd	r19, Y+1	; 0x01
    2ea4:	26 0f       	add	r18, r22
    2ea6:	37 1f       	adc	r19, r23
    2ea8:	2e 5f       	subi	r18, 0xFE	; 254
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2eac:	20 83       	st	Z, r18
    2eae:	31 83       	std	Z+1, r19	; 0x01
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	82 83       	std	Z+2, r24	; 0x02
    2eb6:	93 83       	std	Z+3, r25	; 0x03
    2eb8:	45 2b       	or	r20, r21
    2eba:	29 f4       	brne	.+10     	; 0x2ec6 <free+0xa2>
    2ebc:	e0 93 d6 22 	sts	0x22D6, r30
    2ec0:	f0 93 d7 22 	sts	0x22D7, r31
    2ec4:	42 c0       	rjmp	.+132    	; 0x2f4a <free+0x126>
    2ec6:	12 96       	adiw	r26, 0x02	; 2
    2ec8:	ed 93       	st	X+, r30
    2eca:	fc 93       	st	X, r31
    2ecc:	13 97       	sbiw	r26, 0x03	; 3
    2ece:	ed 01       	movw	r28, r26
    2ed0:	49 91       	ld	r20, Y+
    2ed2:	59 91       	ld	r21, Y+
    2ed4:	9e 01       	movw	r18, r28
    2ed6:	24 0f       	add	r18, r20
    2ed8:	35 1f       	adc	r19, r21
    2eda:	e2 17       	cp	r30, r18
    2edc:	f3 07       	cpc	r31, r19
    2ede:	71 f4       	brne	.+28     	; 0x2efc <free+0xd8>
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	84 0f       	add	r24, r20
    2ee6:	95 1f       	adc	r25, r21
    2ee8:	02 96       	adiw	r24, 0x02	; 2
    2eea:	8d 93       	st	X+, r24
    2eec:	9c 93       	st	X, r25
    2eee:	11 97       	sbiw	r26, 0x01	; 1
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	12 96       	adiw	r26, 0x02	; 2
    2ef6:	8d 93       	st	X+, r24
    2ef8:	9c 93       	st	X, r25
    2efa:	13 97       	sbiw	r26, 0x03	; 3
    2efc:	e0 e0       	ldi	r30, 0x00	; 0
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	d8 01       	movw	r26, r16
    2f02:	12 96       	adiw	r26, 0x02	; 2
    2f04:	8d 91       	ld	r24, X+
    2f06:	9c 91       	ld	r25, X
    2f08:	13 97       	sbiw	r26, 0x03	; 3
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	19 f0       	breq	.+6      	; 0x2f14 <free+0xf0>
    2f0e:	f8 01       	movw	r30, r16
    2f10:	8c 01       	movw	r16, r24
    2f12:	f6 cf       	rjmp	.-20     	; 0x2f00 <free+0xdc>
    2f14:	8d 91       	ld	r24, X+
    2f16:	9c 91       	ld	r25, X
    2f18:	98 01       	movw	r18, r16
    2f1a:	2e 5f       	subi	r18, 0xFE	; 254
    2f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f1e:	82 0f       	add	r24, r18
    2f20:	93 1f       	adc	r25, r19
    2f22:	20 91 d4 22 	lds	r18, 0x22D4
    2f26:	30 91 d5 22 	lds	r19, 0x22D5
    2f2a:	28 17       	cp	r18, r24
    2f2c:	39 07       	cpc	r19, r25
    2f2e:	69 f4       	brne	.+26     	; 0x2f4a <free+0x126>
    2f30:	30 97       	sbiw	r30, 0x00	; 0
    2f32:	29 f4       	brne	.+10     	; 0x2f3e <free+0x11a>
    2f34:	10 92 d6 22 	sts	0x22D6, r1
    2f38:	10 92 d7 22 	sts	0x22D7, r1
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <free+0x11e>
    2f3e:	12 82       	std	Z+2, r1	; 0x02
    2f40:	13 82       	std	Z+3, r1	; 0x03
    2f42:	00 93 d4 22 	sts	0x22D4, r16
    2f46:	10 93 d5 22 	sts	0x22D5, r17
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	08 95       	ret

00002f54 <_exit>:
    2f54:	f8 94       	cli

00002f56 <__stop_program>:
    2f56:	ff cf       	rjmp	.-2      	; 0x2f56 <__stop_program>
